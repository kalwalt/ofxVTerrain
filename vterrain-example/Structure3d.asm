; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\openFrameworks\addons\ofxVTerrain\libs\src\vtlib\core\Structure3d.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_VBITS@?$vector@_NV?$allocator@_N@std@@@std@@2HB ; std::vector<bool,std::allocator<bool> >::_VBITS
PUBLIC	?_EEM_DS@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@2HB ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_EEM_DS
PUBLIC	?s_bMaterialsLoaded@vtStructure3d@@1_NA		; vtStructure3d::s_bMaterialsLoaded
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
_BSS	SEGMENT
?s_bMaterialsLoaded@vtStructure3d@@1_NA DB 01H DUP (?)	; vtStructure3d::s_bMaterialsLoaded
_BSS	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT ?_EEM_DS@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@2HB
CONST	SEGMENT
?_EEM_DS@?$deque@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@2HB DD 01H ; std::deque<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_EEM_DS
CONST	ENDS
;	COMDAT ?_VBITS@?$vector@_NV?$allocator@_N@std@@@std@@2HB
CONST	SEGMENT
?_VBITS@?$vector@_NV?$allocator@_N@std@@@std@@2HB DD 020H ; std::vector<bool,std::allocator<bool> >::_VBITS
CONST	ENDS
CONST	SEGMENT
_PI	DQ	0400921fb54442d18r		; 3.14159
_LN_2	DQ	03fe62e42fefa39efr		; 0.693147
_WGS_84_RADIUS_EQUATOR DQ 0415854a640000000r	; 6.37814e+006
_WGS_84_RADIUS_POLAR DQ 041583fc4141bda51r	; 6.35675e+006
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	_sqrtf
EXTRN	__fltused:DWORD
EXTRN	__CIsqrt:PROC
; Function compile flags: /Ogtp
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv69 = 8						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 434
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __X$[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv69[ebp]
	fld	DWORD PTR tv69[ebp]
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
; Line 345
	push	ebp
	mov	ebp, esp
	push	esi
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
; Line 346
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
; Line 354
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
; Line 355
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN6@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtp
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtp
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; Line 62
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?compare@?$char_traits@D@std@@SAHPBD0I@Z	; std::char_traits<char>::compare
; Function compile flags: /Ogtp
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHPBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
; Line 485
	push	ebp
	mov	ebp, esp
; Line 486
	mov	ecx, DWORD PTR __First2$[ebp]
	mov	edx, DWORD PTR __First1$[ebp]
	push	esi
	mov	esi, DWORD PTR __Count$[ebp]
	push	edi
	cmp	esi, 4
	jb	SHORT $LN11@compare
$LL4@compare:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN5@compare
	sub	esi, 4
	add	ecx, 4
	add	edx, 4
	cmp	esi, 4
	jae	SHORT $LL4@compare
$LN11@compare:
	test	esi, esi
	je	SHORT $LN6@compare
$LN5@compare:
	movzx	eax, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	eax, edi
	jne	SHORT $LN7@compare
	cmp	esi, 1
	jbe	SHORT $LN6@compare
	movzx	eax, BYTE PTR [edx+1]
	movzx	edi, BYTE PTR [ecx+1]
	sub	eax, edi
	jne	SHORT $LN7@compare
	cmp	esi, 2
	jbe	SHORT $LN6@compare
	movzx	eax, BYTE PTR [edx+2]
	movzx	edi, BYTE PTR [ecx+2]
	sub	eax, edi
	jne	SHORT $LN7@compare
	cmp	esi, 3
	jbe	SHORT $LN6@compare
	movzx	eax, BYTE PTR [edx+3]
	movzx	ecx, BYTE PTR [ecx+3]
	sub	eax, ecx
$LN7@compare:
	sar	eax, 31					; 0000001fH
	pop	edi
	or	eax, 1
	pop	esi
; Line 487
	pop	ebp
	ret	0
$LN6@compare:
	pop	edi
; Line 486
	xor	eax, eax
	pop	esi
; Line 487
	pop	ebp
	ret	0
?compare@?$char_traits@D@std@@SAHPBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogtp
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT
; Line 490
	push	ebp
	mov	ebp, esp
; Line 491
	mov	eax, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL3@length:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@length
	sub	eax, edx
; Line 492
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT
; Line 496
	push	ebp
	mov	ebp, esp
; Line 498
	pop	ebp
; Line 497
	jmp	_memcpy
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
EXTRN	__imp__memcpy_s:PROC
; Function compile flags: /Ogtp
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT
; Line 503
	push	ebp
	mov	ebp, esp
; Line 504
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __First2$[ebp]
	mov	edx, DWORD PTR __Size_in_bytes$[ebp]
	push	esi
	mov	esi, DWORD PTR __First1$[ebp]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	DWORD PTR __imp__memcpy_s
	add	esp, 16					; 00000010H
; Line 505
	mov	eax, esi
	pop	esi
; Line 506
	pop	ebp
	ret	0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$char_traits@D@std@@SAPBDPBDIABD@Z	; std::char_traits<char>::find
EXTRN	__imp__memchr:PROC
; Function compile flags: /Ogtp
;	COMDAT ?find@?$char_traits@D@std@@SAPBDPBDIABD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 4
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT
; Line 510
	push	ebp
	mov	ebp, esp
; Line 511
	mov	ecx, DWORD PTR __Ch$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	edx
	push	eax
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
; Line 512
	pop	ebp
	ret	0
?find@?$char_traits@D@std@@SAPBDPBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	__imp__memmove:PROC
; Function compile flags: /Ogtp
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT
; Line 516
	push	ebp
	mov	ebp, esp
; Line 518
	pop	ebp
; Line 517
	jmp	DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT
; Line 521
	push	ebp
	mov	ebp, esp
; Line 522
	mov	eax, DWORD PTR __Count$[ebp]
	movsx	ecx, BYTE PTR __Ch$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	push	eax
	push	ecx
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 523
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT
; Line 526
	push	ebp
	mov	ebp, esp
; Line 527
	mov	eax, DWORD PTR __Right$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	edx, DWORD PTR __Left$[ebp]
	mov	BYTE PTR [edx], cl
; Line 528
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
; Function compile flags: /Ogtp
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT
; Line 531
	push	ebp
	mov	ebp, esp
; Line 532
	mov	eax, DWORD PTR __Left$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	xor	eax, eax
	cmp	cl, BYTE PTR [edx]
	sete	al
; Line 533
	pop	ebp
	ret	0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
; Function compile flags: /Ogtp
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 49
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??0FPoint3@@QAE@XZ				; FPoint3::FPoint3
;	COMDAT __real@00000000
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\mathtypes.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0FPoint3@@QAE@XZ
_TEXT	SEGMENT
??0FPoint3@@QAE@XZ PROC					; FPoint3::FPoint3, COMDAT
; _this$ = ecx
; Line 95
	fldz
	mov	eax, ecx
	fst	DWORD PTR [eax+8]
	fst	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax]
	ret	0
??0FPoint3@@QAE@XZ ENDP					; FPoint3::FPoint3
_TEXT	ENDS
PUBLIC	??0FPoint3@@QAE@MMM@Z				; FPoint3::FPoint3
; Function compile flags: /Ogtp
;	COMDAT ??0FPoint3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0FPoint3@@QAE@MMM@Z PROC				; FPoint3::FPoint3, COMDAT
; _this$ = ecx
; Line 96
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _fx$[ebp]
	mov	eax, ecx
	fstp	DWORD PTR [eax]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]
	pop	ebp
	ret	12					; 0000000cH
??0FPoint3@@QAE@MMM@Z ENDP				; FPoint3::FPoint3
_TEXT	ENDS
PUBLIC	?Length@FPoint3@@QBEMXZ				; FPoint3::Length
; Function compile flags: /Ogtp
;	COMDAT ?Length@FPoint3@@QBEMXZ
_TEXT	SEGMENT
tv169 = -4						; size = 4
tv160 = -4						; size = 4
?Length@FPoint3@@QBEMXZ PROC				; FPoint3::Length, COMDAT
; _this$ = ecx
; Line 99
	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR [ecx]
	fld	DWORD PTR [ecx+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv169[ebp]
	fld	DWORD PTR tv169[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv160[ebp]
	fld	DWORD PTR tv160[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Length@FPoint3@@QBEMXZ ENDP				; FPoint3::Length
_TEXT	ENDS
PUBLIC	??YFPoint3@@QAEXABV0@@Z				; FPoint3::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??YFPoint3@@QAEXABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YFPoint3@@QAEXABV0@@Z PROC				; FPoint3::operator+=, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR [ecx+8]
	pop	ebp
	ret	4
??YFPoint3@@QAEXABV0@@Z ENDP				; FPoint3::operator+=
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	??0DPoint2@@QAE@XZ				; DPoint2::DPoint2
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0DPoint2@@QAE@XZ
_TEXT	SEGMENT
??0DPoint2@@QAE@XZ PROC					; DPoint2::DPoint2, COMDAT
; _this$ = ecx
; Line 285
	fldz
	mov	eax, ecx
	fst	QWORD PTR [eax+8]
	fstp	QWORD PTR [eax]
	ret	0
??0DPoint2@@QAE@XZ ENDP					; DPoint2::DPoint2
_TEXT	ENDS
PUBLIC	??0DPoint2@@QAE@NN@Z				; DPoint2::DPoint2
; Function compile flags: /Ogtp
;	COMDAT ??0DPoint2@@QAE@NN@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 8
_fy$ = 16						; size = 8
??0DPoint2@@QAE@NN@Z PROC				; DPoint2::DPoint2, COMDAT
; _this$ = ecx
; Line 288
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _fx$[ebp]
	mov	eax, ecx
	fstp	QWORD PTR [eax]
	fld	QWORD PTR _fy$[ebp]
	fstp	QWORD PTR [eax+8]
	pop	ebp
	ret	16					; 00000010H
??0DPoint2@@QAE@NN@Z ENDP				; DPoint2::DPoint2
_TEXT	ENDS
PUBLIC	?Length@DPoint2@@QBENXZ				; DPoint2::Length
; Function compile flags: /Ogtp
;	COMDAT ?Length@DPoint2@@QBENXZ
_TEXT	SEGMENT
?Length@DPoint2@@QBENXZ PROC				; DPoint2::Length, COMDAT
; _this$ = ecx
; Line 291
	fld	QWORD PTR [ecx+8]
	fld	QWORD PTR [ecx]
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	jmp	__CIsqrt
?Length@DPoint2@@QBENXZ ENDP				; DPoint2::Length
_TEXT	ENDS
PUBLIC	??GDPoint2@@QBE?AV0@ABV0@@Z			; DPoint2::operator-
; Function compile flags: /Ogtp
;	COMDAT ??GDPoint2@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GDPoint2@@QBE?AV0@ABV0@@Z PROC			; DPoint2::operator-, COMDAT
; _this$ = ecx
; Line 322
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _v$[ebp]
	fld	QWORD PTR [ecx]
	fsub	QWORD PTR [edx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fstp	QWORD PTR [eax]
	fld	QWORD PTR [ecx+8]
	fsub	QWORD PTR [edx+8]
	fstp	QWORD PTR [eax+8]
	pop	ebp
	ret	8
??GDPoint2@@QBE?AV0@ABV0@@Z ENDP			; DPoint2::operator-
_TEXT	ENDS
PUBLIC	??YDPoint2@@QAEXABV0@@Z				; DPoint2::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??YDPoint2@@QAEXABV0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YDPoint2@@QAEXABV0@@Z PROC				; DPoint2::operator+=, COMDAT
; _this$ = ecx
; Line 326
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _v$[ebp]
	fld	QWORD PTR [eax]
	fadd	QWORD PTR [ecx]
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx+8]
	pop	ebp
	ret	4
??YDPoint2@@QAEXABV0@@Z ENDP				; DPoint2::operator+=
_TEXT	ENDS
PUBLIC	??0FSphere@@QAE@XZ				; FSphere::FSphere
; Function compile flags: /Ogtp
;	COMDAT ??0FSphere@@QAE@XZ
_TEXT	SEGMENT
??0FSphere@@QAE@XZ PROC					; FSphere::FSphere, COMDAT
; _this$ = ecx
; Line 700
	fldz
	mov	eax, ecx
	fst	DWORD PTR [eax+8]
	fst	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax]
	ret	0
??0FSphere@@QAE@XZ ENDP					; FSphere::FSphere
_TEXT	ENDS
PUBLIC	??0RGBf@@QAE@XZ					; RGBf::RGBf
; Function compile flags: /Ogtp
;	COMDAT ??0RGBf@@QAE@XZ
_TEXT	SEGMENT
??0RGBf@@QAE@XZ PROC					; RGBf::RGBf, COMDAT
; _this$ = ecx
; Line 1329
	mov	eax, ecx
	ret	0
??0RGBf@@QAE@XZ ENDP					; RGBf::RGBf
_TEXT	ENDS
PUBLIC	??0RGBf@@QAE@MMM@Z				; RGBf::RGBf
; Function compile flags: /Ogtp
;	COMDAT ??0RGBf@@QAE@MMM@Z
_TEXT	SEGMENT
__r$ = 8						; size = 4
__g$ = 12						; size = 4
__b$ = 16						; size = 4
??0RGBf@@QAE@MMM@Z PROC					; RGBf::RGBf, COMDAT
; _this$ = ecx
; Line 1330
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __r$[ebp]
	mov	eax, ecx
	fstp	DWORD PTR [eax]
	fld	DWORD PTR __g$[ebp]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR __b$[ebp]
	fstp	DWORD PTR [eax+8]
	pop	ebp
	ret	12					; 0000000cH
??0RGBf@@QAE@MMM@Z ENDP					; RGBf::RGBf
_TEXT	ENDS
PUBLIC	?Set@RGBf@@QAEXMMM@Z				; RGBf::Set
; Function compile flags: /Ogtp
;	COMDAT ?Set@RGBf@@QAEXMMM@Z
_TEXT	SEGMENT
__r$ = 8						; size = 4
__g$ = 12						; size = 4
__b$ = 16						; size = 4
?Set@RGBf@@QAEXMMM@Z PROC				; RGBf::Set, COMDAT
; _this$ = ecx
; Line 1334
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR __r$[ebp]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR __g$[ebp]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR __b$[ebp]
	fstp	DWORD PTR [ecx+8]
	pop	ebp
	ret	12					; 0000000cH
?Set@RGBf@@QAEXMMM@Z ENDP				; RGBf::Set
_TEXT	ENDS
PUBLIC	??DRGBf@@QBE?AV0@M@Z				; RGBf::operator*
; Function compile flags: /Ogtp
;	COMDAT ??DRGBf@@QBE?AV0@M@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??DRGBf@@QBE?AV0@M@Z PROC				; RGBf::operator*, COMDAT
; _this$ = ecx
; Line 1337
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	fld	DWORD PTR _s$[ebp]
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	pop	ebp
	ret	8
??DRGBf@@QBE?AV0@M@Z ENDP				; RGBf::operator*
_TEXT	ENDS
PUBLIC	??8RGBf@@QBE_NABV0@@Z				; RGBf::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8RGBf@@QBE_NABV0@@Z
_TEXT	SEGMENT
_v2$ = 8						; size = 4
??8RGBf@@QBE_NABV0@@Z PROC				; RGBf::operator==, COMDAT
; _this$ = ecx
; Line 1349
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	fld	DWORD PTR [ecx+4]
	fld	DWORD PTR [edx+4]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	fld	DWORD PTR [ecx+8]
	fld	DWORD PTR [edx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@operator
	mov	eax, 1
	pop	ebp
	ret	4
$LN3@operator:
	xor	eax, eax
	pop	ebp
	ret	4
??8RGBf@@QBE_NABV0@@Z ENDP				; RGBf::operator==
_TEXT	ENDS
PUBLIC	__real@406ffff7c0000000
PUBLIC	??4RGBi@@QAEAAV0@ABVRGBf@@@Z			; RGBi::operator=
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@406ffff7c0000000
CONST	SEGMENT
__real@406ffff7c0000000 DQ 0406ffff7c0000000r	; 255.999
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??4RGBi@@QAEAAV0@ABVRGBf@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??4RGBi@@QAEAAV0@ABVRGBf@@@Z PROC			; RGBi::operator=, COMDAT
; _this$ = ecx
; Line 1357
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 1358
	mov	edi, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edi]
	mov	esi, ecx
	fld	QWORD PTR __real@406ffff7c0000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	mov	WORD PTR [esi], ax
; Line 1359
	fld	DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	call	__ftol2_sse
	mov	WORD PTR [esi+2], ax
; Line 1360
	fmul	DWORD PTR [edi+8]
	call	__ftol2_sse
	mov	WORD PTR [esi+4], ax
	pop	edi
; Line 1361
	mov	eax, esi
	pop	esi
; Line 1362
	pop	ebp
	ret	4
??4RGBi@@QAEAAV0@ABVRGBf@@@Z ENDP			; RGBi::operator=
_TEXT	ENDS
PUBLIC	__real@406fe00000000000
PUBLIC	??4RGBf@@QAEAAV0@ABVRGBi@@@Z			; RGBf::operator=
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??4RGBf@@QAEAAV0@ABVRGBi@@@Z
_TEXT	SEGMENT
tv157 = 8						; size = 4
tv149 = 8						; size = 4
tv147 = 8						; size = 4
_v$ = 8							; size = 4
??4RGBf@@QAEAAV0@ABVRGBi@@@Z PROC			; RGBf::operator=, COMDAT
; _this$ = ecx
; Line 1365
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 1366
	mov	ecx, DWORD PTR _v$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv157[ebp], edx
	fild	DWORD PTR tv157[ebp]
	fld	QWORD PTR __real@406fe00000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [eax]
; Line 1367
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR tv149[ebp], edx
	fild	DWORD PTR tv149[ebp]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
; Line 1368
	movsx	ecx, WORD PTR [ecx+4]
	mov	DWORD PTR tv147[ebp], ecx
	fild	DWORD PTR tv147[ebp]
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR [eax+8]
; Line 1370
	pop	ebp
	ret	4
??4RGBf@@QAEAAV0@ABVRGBi@@@Z ENDP			; RGBf::operator=
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	??4RGBAf@@QAEAAV0@ABVRGBf@@@Z			; RGBAf::operator=
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??4RGBAf@@QAEAAV0@ABVRGBf@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??4RGBAf@@QAEAAV0@ABVRGBf@@@Z PROC			; RGBAf::operator=, COMDAT
; _this$ = ecx
; Line 1394
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	fld1
	fstp	DWORD PTR [eax+12]
	pop	ebp
	ret	4
??4RGBAf@@QAEAAV0@ABVRGBf@@@Z ENDP			; RGBAf::operator=
_TEXT	ENDS
PUBLIC	??0Vec3f@osg@@QAE@MMM@Z				; osg::Vec3f::Vec3f
; Function compile flags: /Ogtp
;	COMDAT ??0Vec3f@osg@@QAE@MMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0Vec3f@osg@@QAE@MMM@Z PROC				; osg::Vec3f::Vec3f, COMDAT
; _this$ = ecx
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\vec3f
; Line 42
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _x$[ebp]
	mov	eax, ecx
	fstp	DWORD PTR [eax]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [eax+8]
	pop	ebp
	ret	12					; 0000000cH
??0Vec3f@osg@@QAE@MMM@Z ENDP				; osg::Vec3f::Vec3f
_TEXT	ENDS
PUBLIC	??AVec3f@osg@@QBEMH@Z				; osg::Vec3f::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??AVec3f@osg@@QBEMH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??AVec3f@osg@@QBEMH@Z PROC				; osg::Vec3f::operator[], COMDAT
; _this$ = ecx
; Line 78
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR [ecx+eax*4]
	pop	ebp
	ret	4
??AVec3f@osg@@QBEMH@Z ENDP				; osg::Vec3f::operator[]
_TEXT	ENDS
PUBLIC	?SetDiffuse1@vtMaterial@@QAEXABVRGBAf@@@Z	; vtMaterial::SetDiffuse1
EXTRN	?SetDiffuse@vtMaterial@@QAEXMMMM@Z:PROC		; vtMaterial::SetDiffuse
; Function compile flags: /Ogtp
;	COMDAT ?SetDiffuse1@vtMaterial@@QAEXABVRGBAf@@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
?SetDiffuse1@vtMaterial@@QAEXABVRGBAf@@@Z PROC		; vtMaterial::SetDiffuse1, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\vtosg\material.h
; Line 71
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _c$[ebp]
	fld	DWORD PTR [eax+12]
	sub	esp, 16					; 00000010H
	fstp	DWORD PTR [esp+12]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?SetDiffuse@vtMaterial@@QAEXMMMM@Z	; vtMaterial::SetDiffuse
	pop	ebp
	ret	4
?SetDiffuse1@vtMaterial@@QAEXABVRGBAf@@@Z ENDP		; vtMaterial::SetDiffuse1
_TEXT	ENDS
PUBLIC	?SetSpecular2@vtMaterial@@QAEXM@Z		; vtMaterial::SetSpecular2
EXTRN	?SetSpecular@vtMaterial@@QAEXMMM@Z:PROC		; vtMaterial::SetSpecular
; Function compile flags: /Ogtp
;	COMDAT ?SetSpecular2@vtMaterial@@QAEXM@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
?SetSpecular2@vtMaterial@@QAEXM@Z PROC			; vtMaterial::SetSpecular2, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _f$[ebp]
	sub	esp, 12					; 0000000cH
	fst	DWORD PTR [esp+8]
	fst	DWORD PTR [esp+4]
	fstp	DWORD PTR [esp]
	call	?SetSpecular@vtMaterial@@QAEXMMM@Z	; vtMaterial::SetSpecular
	pop	ebp
	ret	4
?SetSpecular2@vtMaterial@@QAEXM@Z ENDP			; vtMaterial::SetSpecular2
_TEXT	ENDS
PUBLIC	?SetAmbient1@vtMaterial@@QAEXABVRGBf@@@Z	; vtMaterial::SetAmbient1
EXTRN	?SetAmbient@vtMaterial@@QAEXMMM@Z:PROC		; vtMaterial::SetAmbient
; Function compile flags: /Ogtp
;	COMDAT ?SetAmbient1@vtMaterial@@QAEXABVRGBf@@@Z
_TEXT	SEGMENT
_c$ = 8							; size = 4
?SetAmbient1@vtMaterial@@QAEXABVRGBf@@@Z PROC		; vtMaterial::SetAmbient1, COMDAT
; _this$ = ecx
; Line 77
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _c$[ebp]
	fld	DWORD PTR [eax+8]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?SetAmbient@vtMaterial@@QAEXMMM@Z	; vtMaterial::SetAmbient
	pop	ebp
	ret	4
?SetAmbient1@vtMaterial@@QAEXABVRGBf@@@Z ENDP		; vtMaterial::SetAmbient1
_TEXT	ENDS
PUBLIC	??0OGREnvelope@@QAE@XZ				; OGREnvelope::OGREnvelope
; Function compile flags: /Ogtp
;	COMDAT ??0OGREnvelope@@QAE@XZ
_TEXT	SEGMENT
??0OGREnvelope@@QAE@XZ PROC				; OGREnvelope::OGREnvelope, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogr_core.h
; Line 51
	fldz
	mov	eax, ecx
	fst	QWORD PTR [eax]
	fst	QWORD PTR [eax+8]
	fst	QWORD PTR [eax+16]
	fstp	QWORD PTR [eax+24]
; Line 52
	ret	0
??0OGREnvelope@@QAE@XZ ENDP				; OGREnvelope::OGREnvelope
_TEXT	ENDS
PUBLIC	?IsInit@OGREnvelope@@QBEHXZ			; OGREnvelope::IsInit
; Function compile flags: /Ogtp
;	COMDAT ?IsInit@OGREnvelope@@QBEHXZ
_TEXT	SEGMENT
?IsInit@OGREnvelope@@QBEHXZ PROC			; OGREnvelope::IsInit, COMDAT
; _this$ = ecx
; Line 58
	fld	QWORD PTR [ecx]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@IsInit
	fld	QWORD PTR [ecx+16]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@IsInit
	fld	QWORD PTR [ecx+8]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@IsInit
	fld	QWORD PTR [ecx+24]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@IsInit
	xor	eax, eax
	ret	0
$LN12@IsInit:
	fstp	ST(0)
$LN3@IsInit:
	mov	eax, 1
	ret	0
?IsInit@OGREnvelope@@QBEHXZ ENDP			; OGREnvelope::IsInit
_TEXT	ENDS
PUBLIC	?Merge@OGREnvelope@@QAEXABV1@@Z			; OGREnvelope::Merge
; Function compile flags: /Ogtp
;	COMDAT ?Merge@OGREnvelope@@QAEXABV1@@Z
_TEXT	SEGMENT
_sOther$ = 8						; size = 4
?Merge@OGREnvelope@@QAEXABV1@@Z PROC			; OGREnvelope::Merge, COMDAT
; _this$ = ecx
; Line 59
	push	ebp
	mov	ebp, esp
; Line 60
	fld	QWORD PTR [ecx]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@Merge
	fld	QWORD PTR [ecx+16]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@Merge
	fld	QWORD PTR [ecx+8]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@Merge
	fld	QWORD PTR [ecx+24]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@Merge
; Line 69
	mov	eax, DWORD PTR _sOther$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [ecx]
; Line 70
	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR [ecx+8]
; Line 71
	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR [ecx+16]
; Line 72
	fld	QWORD PTR [eax+24]
	fstp	QWORD PTR [ecx+24]
; Line 74
	pop	ebp
	ret	4
$LN25@Merge:
; Line 60
	fstp	ST(0)
$LN15@Merge:
; Line 62
	mov	edx, DWORD PTR _sOther$[ebp]
	fld	QWORD PTR [edx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@Merge
	fld	QWORD PTR [ecx]
	jmp	SHORT $LN6@Merge
$LN5@Merge:
	fld	QWORD PTR [edx]
$LN6@Merge:
	fstp	QWORD PTR [ecx]
; Line 63
	fld	QWORD PTR [edx+8]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@Merge
	fld	QWORD PTR [ecx+8]
	jmp	SHORT $LN8@Merge
$LN7@Merge:
	fld	QWORD PTR [edx+8]
$LN8@Merge:
	fstp	QWORD PTR [ecx+8]
; Line 64
	fld	QWORD PTR [edx+16]
	fcomp	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@Merge
	fld	QWORD PTR [ecx+16]
	jmp	SHORT $LN10@Merge
$LN9@Merge:
	fld	QWORD PTR [edx+16]
$LN10@Merge:
	fstp	QWORD PTR [ecx+16]
; Line 65
	fld	QWORD PTR [edx+24]
	fcomp	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@Merge
	fld	QWORD PTR [ecx+24]
; Line 72
	fstp	QWORD PTR [ecx+24]
; Line 74
	pop	ebp
	ret	4
$LN11@Merge:
; Line 65
	fld	QWORD PTR [edx+24]
; Line 72
	fstp	QWORD PTR [ecx+24]
; Line 74
	pop	ebp
	ret	4
?Merge@OGREnvelope@@QAEXABV1@@Z ENDP			; OGREnvelope::Merge
_TEXT	ENDS
PUBLIC	?Merge@OGREnvelope@@QAEXNN@Z			; OGREnvelope::Merge
; Function compile flags: /Ogtp
;	COMDAT ?Merge@OGREnvelope@@QAEXNN@Z
_TEXT	SEGMENT
_dfX$ = 8						; size = 8
_dfY$ = 16						; size = 8
?Merge@OGREnvelope@@QAEXNN@Z PROC			; OGREnvelope::Merge, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
; Line 76
	fld	QWORD PTR [ecx]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@Merge@2
	fld	QWORD PTR [ecx+16]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@Merge@2
	fld	QWORD PTR [ecx+8]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@Merge@2
	fld	QWORD PTR [ecx+24]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@Merge@2
; Line 85
	fld	QWORD PTR _dfX$[ebp]
	fst	QWORD PTR [ecx+8]
	fstp	QWORD PTR [ecx]
; Line 86
	fld	QWORD PTR _dfY$[ebp]
	fst	QWORD PTR [ecx+24]
	fstp	QWORD PTR [ecx+16]
; Line 88
	pop	ebp
	ret	16					; 00000010H
$LN25@Merge@2:
; Line 76
	fstp	ST(0)
$LN15@Merge@2:
; Line 78
	fld	QWORD PTR _dfX$[ebp]
	fcom	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@Merge@2
	fld	QWORD PTR [ecx]
	jmp	SHORT $LN6@Merge@2
$LN5@Merge@2:
	fld	ST(0)
$LN6@Merge@2:
	fstp	QWORD PTR [ecx]
; Line 79
	fcom	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@Merge@2
	fstp	ST(0)
	fld	QWORD PTR [ecx+8]
$LN8@Merge@2:
	fstp	QWORD PTR [ecx+8]
; Line 80
	fld	QWORD PTR _dfY$[ebp]
	fcom	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@Merge@2
	fld	QWORD PTR [ecx+16]
	jmp	SHORT $LN10@Merge@2
$LN9@Merge@2:
	fld	ST(0)
$LN10@Merge@2:
	fstp	QWORD PTR [ecx+16]
; Line 81
	fcom	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@Merge@2
	fstp	ST(0)
	fld	QWORD PTR [ecx+24]
$LN12@Merge@2:
	fstp	QWORD PTR [ecx+24]
; Line 88
	pop	ebp
	ret	16					; 00000010H
?Merge@OGREnvelope@@QAEXNN@Z ENDP			; OGREnvelope::Merge
_TEXT	ENDS
PUBLIC	?Intersects@OGREnvelope@@QBEHABV1@@Z		; OGREnvelope::Intersects
; Function compile flags: /Ogtp
;	COMDAT ?Intersects@OGREnvelope@@QBEHABV1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?Intersects@OGREnvelope@@QBEHABV1@@Z PROC		; OGREnvelope::Intersects, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
; Line 120
	mov	edx, DWORD PTR _other$[ebp]
	fld	QWORD PTR [edx+8]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Intersects
	fld	QWORD PTR [edx]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Intersects
	fld	QWORD PTR [edx+24]
	fcomp	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Intersects
	fld	QWORD PTR [edx+16]
	fcomp	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Intersects
	mov	eax, 1
; Line 121
	pop	ebp
	ret	4
$LN3@Intersects:
; Line 120
	xor	eax, eax
; Line 121
	pop	ebp
	ret	4
?Intersects@OGREnvelope@@QBEHABV1@@Z ENDP		; OGREnvelope::Intersects
_TEXT	ENDS
PUBLIC	?Contains@OGREnvelope@@QBEHABV1@@Z		; OGREnvelope::Contains
; Function compile flags: /Ogtp
;	COMDAT ?Contains@OGREnvelope@@QBEHABV1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?Contains@OGREnvelope@@QBEHABV1@@Z PROC			; OGREnvelope::Contains, COMDAT
; _this$ = ecx
; Line 124
	push	ebp
	mov	ebp, esp
; Line 126
	mov	edx, DWORD PTR _other$[ebp]
	fld	QWORD PTR [edx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Contains
	fld	QWORD PTR [edx+16]
	fcomp	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Contains
	fld	QWORD PTR [edx+8]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Contains
	fld	QWORD PTR [edx+24]
	fcomp	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Contains
	mov	eax, 1
; Line 127
	pop	ebp
	ret	4
$LN3@Contains:
; Line 126
	xor	eax, eax
; Line 127
	pop	ebp
	ret	4
?Contains@OGREnvelope@@QBEHABV1@@Z ENDP			; OGREnvelope::Contains
_TEXT	ENDS
PUBLIC	??4OGREnvelope@@QAEAAV0@ABV0@@Z			; OGREnvelope::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGREnvelope@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGREnvelope@@QAEAAV0@ABV0@@Z PROC			; OGREnvelope::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	push	edi
	mov	eax, ecx
	mov	ecx, 8
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4OGREnvelope@@QAEAAV0@ABV0@@Z ENDP			; OGREnvelope::operator=
_TEXT	ENDS
PUBLIC	??0OGREnvelope3D@@QAE@XZ			; OGREnvelope3D::OGREnvelope3D
; Function compile flags: /Ogtp
;	COMDAT ??0OGREnvelope3D@@QAE@XZ
_TEXT	SEGMENT
??0OGREnvelope3D@@QAE@XZ PROC				; OGREnvelope3D::OGREnvelope3D, COMDAT
; _this$ = ecx
; Line 149
	fldz
	mov	eax, ecx
	fst	QWORD PTR [eax]
	fst	QWORD PTR [eax+8]
	fst	QWORD PTR [eax+16]
	fst	QWORD PTR [eax+24]
	fst	QWORD PTR [eax+32]
	fstp	QWORD PTR [eax+40]
; Line 150
	ret	0
??0OGREnvelope3D@@QAE@XZ ENDP				; OGREnvelope3D::OGREnvelope3D
_TEXT	ENDS
PUBLIC	?IsInit@OGREnvelope3D@@QBEHXZ			; OGREnvelope3D::IsInit
; Function compile flags: /Ogtp
;	COMDAT ?IsInit@OGREnvelope3D@@QBEHXZ
_TEXT	SEGMENT
?IsInit@OGREnvelope3D@@QBEHXZ PROC			; OGREnvelope3D::IsInit, COMDAT
; _this$ = ecx
; Line 155
	fld	QWORD PTR [ecx]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@IsInit@2
	fld	QWORD PTR [ecx+16]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@IsInit@2
	fld	QWORD PTR [ecx+8]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@IsInit@2
	fld	QWORD PTR [ecx+24]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@IsInit@2
	fld	QWORD PTR [ecx+32]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN18@IsInit@2
	fld	QWORD PTR [ecx+40]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@IsInit@2
	xor	eax, eax
	ret	0
$LN18@IsInit@2:
	fstp	ST(0)
$LN3@IsInit@2:
	mov	eax, 1
	ret	0
?IsInit@OGREnvelope3D@@QBEHXZ ENDP			; OGREnvelope3D::IsInit
_TEXT	ENDS
PUBLIC	?Merge@OGREnvelope3D@@QAEXABV1@@Z		; OGREnvelope3D::Merge
; Function compile flags: /Ogtp
;	COMDAT ?Merge@OGREnvelope3D@@QAEXABV1@@Z
_TEXT	SEGMENT
_sOther$ = 8						; size = 4
?Merge@OGREnvelope3D@@QAEXABV1@@Z PROC			; OGREnvelope3D::Merge, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 157
	call	?IsInit@OGREnvelope3D@@QBEHXZ		; OGREnvelope3D::IsInit
	test	eax, eax
	je	$LN2@Merge@3
; Line 159
	mov	ecx, DWORD PTR _sOther$[ebp]
	fld	QWORD PTR [ecx]
	fcomp	QWORD PTR [esi]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@Merge@3
	fld	QWORD PTR [esi]
	jmp	SHORT $LN6@Merge@3
$LN5@Merge@3:
	fld	QWORD PTR [ecx]
$LN6@Merge@3:
	fstp	QWORD PTR [esi]
; Line 160
	fld	QWORD PTR [ecx+8]
	fcomp	QWORD PTR [esi+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@Merge@3
	fld	QWORD PTR [esi+8]
	jmp	SHORT $LN8@Merge@3
$LN7@Merge@3:
	fld	QWORD PTR [ecx+8]
$LN8@Merge@3:
	fstp	QWORD PTR [esi+8]
; Line 161
	fld	QWORD PTR [ecx+16]
	fcomp	QWORD PTR [esi+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@Merge@3
	fld	QWORD PTR [esi+16]
	jmp	SHORT $LN10@Merge@3
$LN9@Merge@3:
	fld	QWORD PTR [ecx+16]
$LN10@Merge@3:
	fstp	QWORD PTR [esi+16]
; Line 162
	fld	QWORD PTR [ecx+24]
	fcomp	QWORD PTR [esi+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@Merge@3
	fld	QWORD PTR [esi+24]
	jmp	SHORT $LN12@Merge@3
$LN11@Merge@3:
	fld	QWORD PTR [ecx+24]
$LN12@Merge@3:
	fstp	QWORD PTR [esi+24]
; Line 163
	fld	QWORD PTR [ecx+32]
	fcomp	QWORD PTR [esi+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@Merge@3
	fld	QWORD PTR [esi+32]
	jmp	SHORT $LN14@Merge@3
$LN13@Merge@3:
	fld	QWORD PTR [ecx+32]
$LN14@Merge@3:
	fstp	QWORD PTR [esi+32]
; Line 164
	fld	QWORD PTR [ecx+40]
	fcomp	QWORD PTR [esi+40]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN15@Merge@3
	fld	QWORD PTR [esi+40]
; Line 173
	fstp	QWORD PTR [esi+40]
	pop	esi
; Line 175
	pop	ebp
	ret	4
$LN15@Merge@3:
; Line 164
	fld	QWORD PTR [ecx+40]
; Line 173
	fstp	QWORD PTR [esi+40]
	pop	esi
; Line 175
	pop	ebp
	ret	4
$LN2@Merge@3:
; Line 168
	mov	eax, DWORD PTR _sOther$[ebp]
	fld	QWORD PTR [eax]
	fstp	QWORD PTR [esi]
; Line 169
	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR [esi+8]
; Line 170
	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR [esi+16]
; Line 171
	fld	QWORD PTR [eax+24]
	fstp	QWORD PTR [esi+24]
; Line 172
	fld	QWORD PTR [eax+32]
	fstp	QWORD PTR [esi+32]
; Line 173
	fld	QWORD PTR [eax+40]
	fstp	QWORD PTR [esi+40]
	pop	esi
; Line 175
	pop	ebp
	ret	4
?Merge@OGREnvelope3D@@QAEXABV1@@Z ENDP			; OGREnvelope3D::Merge
_TEXT	ENDS
PUBLIC	?Merge@OGREnvelope3D@@QAEXNNN@Z			; OGREnvelope3D::Merge
; Function compile flags: /Ogtp
;	COMDAT ?Merge@OGREnvelope3D@@QAEXNNN@Z
_TEXT	SEGMENT
_dfX$ = 8						; size = 8
_dfY$ = 16						; size = 8
_dfZ$ = 24						; size = 8
?Merge@OGREnvelope3D@@QAEXNNN@Z PROC			; OGREnvelope3D::Merge, COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 177
	call	?IsInit@OGREnvelope3D@@QBEHXZ		; OGREnvelope3D::IsInit
; Line 179
	fld	QWORD PTR _dfX$[ebp]
	test	eax, eax
	je	SHORT $LN2@Merge@4
	fcom	QWORD PTR [esi]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@Merge@4
	fld	QWORD PTR [esi]
	jmp	SHORT $LN6@Merge@4
$LN5@Merge@4:
	fld	ST(0)
$LN6@Merge@4:
	fstp	QWORD PTR [esi]
; Line 180
	fcom	QWORD PTR [esi+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@Merge@4
	fstp	ST(0)
	fld	QWORD PTR [esi+8]
$LN8@Merge@4:
	fstp	QWORD PTR [esi+8]
; Line 181
	fld	QWORD PTR _dfY$[ebp]
	fcom	QWORD PTR [esi+16]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@Merge@4
	fld	QWORD PTR [esi+16]
	jmp	SHORT $LN10@Merge@4
$LN9@Merge@4:
	fld	ST(0)
$LN10@Merge@4:
	fstp	QWORD PTR [esi+16]
; Line 182
	fcom	QWORD PTR [esi+24]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN12@Merge@4
	fstp	ST(0)
	fld	QWORD PTR [esi+24]
$LN12@Merge@4:
	fstp	QWORD PTR [esi+24]
; Line 183
	fld	QWORD PTR _dfZ$[ebp]
	fcom	QWORD PTR [esi+32]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@Merge@4
	fld	QWORD PTR [esi+32]
	jmp	SHORT $LN14@Merge@4
$LN13@Merge@4:
	fld	ST(0)
$LN14@Merge@4:
	fstp	QWORD PTR [esi+32]
; Line 184
	fcom	QWORD PTR [esi+40]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN16@Merge@4
	fstp	ST(0)
	fld	QWORD PTR [esi+40]
$LN16@Merge@4:
	fstp	QWORD PTR [esi+40]
	pop	esi
; Line 192
	pop	ebp
	ret	24					; 00000018H
$LN2@Merge@4:
; Line 188
	fst	QWORD PTR [esi+8]
	fstp	QWORD PTR [esi]
; Line 189
	fld	QWORD PTR _dfY$[ebp]
	fst	QWORD PTR [esi+24]
	fstp	QWORD PTR [esi+16]
; Line 190
	fld	QWORD PTR _dfZ$[ebp]
	fst	QWORD PTR [esi+40]
	fstp	QWORD PTR [esi+32]
	pop	esi
; Line 192
	pop	ebp
	ret	24					; 00000018H
?Merge@OGREnvelope3D@@QAEXNNN@Z ENDP			; OGREnvelope3D::Merge
_TEXT	ENDS
PUBLIC	?Intersects@OGREnvelope3D@@QBEHABV1@@Z		; OGREnvelope3D::Intersects
; Function compile flags: /Ogtp
;	COMDAT ?Intersects@OGREnvelope3D@@QBEHABV1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?Intersects@OGREnvelope3D@@QBEHABV1@@Z PROC		; OGREnvelope3D::Intersects, COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
; Line 231
	mov	edx, DWORD PTR _other$[ebp]
	fld	QWORD PTR [edx+8]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Intersects@2
	fld	QWORD PTR [edx]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Intersects@2
	fld	QWORD PTR [edx+24]
	fcomp	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Intersects@2
	fld	QWORD PTR [edx+16]
	fcomp	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Intersects@2
	fld	QWORD PTR [edx+40]
	fcomp	QWORD PTR [ecx+32]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Intersects@2
	fld	QWORD PTR [edx+32]
	fcomp	QWORD PTR [ecx+40]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Intersects@2
	mov	eax, 1
; Line 232
	pop	ebp
	ret	4
$LN3@Intersects@2:
; Line 231
	xor	eax, eax
; Line 232
	pop	ebp
	ret	4
?Intersects@OGREnvelope3D@@QBEHABV1@@Z ENDP		; OGREnvelope3D::Intersects
_TEXT	ENDS
PUBLIC	?Contains@OGREnvelope3D@@QBEHABV1@@Z		; OGREnvelope3D::Contains
; Function compile flags: /Ogtp
;	COMDAT ?Contains@OGREnvelope3D@@QBEHABV1@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?Contains@OGREnvelope3D@@QBEHABV1@@Z PROC		; OGREnvelope3D::Contains, COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
; Line 238
	mov	edx, DWORD PTR _other$[ebp]
	fld	QWORD PTR [edx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Contains@2
	fld	QWORD PTR [edx+16]
	fcomp	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Contains@2
	fld	QWORD PTR [edx+8]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Contains@2
	fld	QWORD PTR [edx+24]
	fcomp	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Contains@2
	fld	QWORD PTR [edx+40]
	fcomp	QWORD PTR [ecx+40]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Contains@2
	fld	QWORD PTR [edx+40]
	fcomp	QWORD PTR [ecx+40]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@Contains@2
	mov	eax, 1
; Line 239
	pop	ebp
	ret	4
$LN3@Contains@2:
; Line 238
	xor	eax, eax
; Line 239
	pop	ebp
	ret	4
?Contains@OGREnvelope3D@@QBEHABV1@@Z ENDP		; OGREnvelope3D::Contains
_TEXT	ENDS
PUBLIC	??4OGREnvelope3D@@QAEAAV0@ABV0@@Z		; OGREnvelope3D::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGREnvelope3D@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGREnvelope3D@@QAEAAV0@ABV0@@Z PROC			; OGREnvelope3D::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	push	edi
	mov	eax, ecx
	mov	ecx, 12					; 0000000cH
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4OGREnvelope3D@@QAEAAV0@ABV0@@Z ENDP			; OGREnvelope3D::operator=
_TEXT	ENDS
PUBLIC	?IsLeafNode@OGR_SRSNode@@QBEHXZ			; OGR_SRSNode::IsLeafNode
; Function compile flags: /Ogtp
;	COMDAT ?IsLeafNode@OGR_SRSNode@@QBEHXZ
_TEXT	SEGMENT
?IsLeafNode@OGR_SRSNode@@QBEHXZ PROC			; OGR_SRSNode::IsLeafNode, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogr_spatialref.h
; Line 74
	xor	eax, eax
	cmp	DWORD PTR [ecx+12], eax
	sete	al
	ret	0
?IsLeafNode@OGR_SRSNode@@QBEHXZ ENDP			; OGR_SRSNode::IsLeafNode
_TEXT	ENDS
PUBLIC	?GetChildCount@OGR_SRSNode@@QBEHXZ		; OGR_SRSNode::GetChildCount
; Function compile flags: /Ogtp
;	COMDAT ?GetChildCount@OGR_SRSNode@@QBEHXZ
_TEXT	SEGMENT
?GetChildCount@OGR_SRSNode@@QBEHXZ PROC			; OGR_SRSNode::GetChildCount, COMDAT
; _this$ = ecx
; Line 76
	mov	eax, DWORD PTR [ecx+12]
	ret	0
?GetChildCount@OGR_SRSNode@@QBEHXZ ENDP			; OGR_SRSNode::GetChildCount
_TEXT	ENDS
PUBLIC	?GetValue@OGR_SRSNode@@QBEPBDXZ			; OGR_SRSNode::GetValue
; Function compile flags: /Ogtp
;	COMDAT ?GetValue@OGR_SRSNode@@QBEPBDXZ
_TEXT	SEGMENT
?GetValue@OGR_SRSNode@@QBEPBDXZ PROC			; OGR_SRSNode::GetValue, COMDAT
; _this$ = ecx
; Line 90
	mov	eax, DWORD PTR [ecx]
	ret	0
?GetValue@OGR_SRSNode@@QBEPBDXZ ENDP			; OGR_SRSNode::GetValue
_TEXT	ENDS
PUBLIC	??4OGR_SRSNode@@QAEAAV0@ABV0@@Z			; OGR_SRSNode::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGR_SRSNode@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGR_SRSNode@@QAEAAV0@ABV0@@Z PROC			; OGR_SRSNode::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	pop	ebp
	ret	4
??4OGR_SRSNode@@QAEAAV0@ABV0@@Z ENDP			; OGR_SRSNode::operator=
_TEXT	ENDS
PUBLIC	??_FOGR_SRSNode@@QAEXXZ				; OGR_SRSNode::`default constructor closure'
EXTRN	??0OGR_SRSNode@@QAE@PBD@Z:PROC			; OGR_SRSNode::OGR_SRSNode
; Function compile flags: /Ogtp
;	COMDAT ??_FOGR_SRSNode@@QAEXXZ
_TEXT	SEGMENT
??_FOGR_SRSNode@@QAEXXZ PROC				; OGR_SRSNode::`default constructor closure', COMDAT
; _this$ = ecx
	push	0
	call	??0OGR_SRSNode@@QAE@PBD@Z		; OGR_SRSNode::OGR_SRSNode
	ret	0
??_FOGR_SRSNode@@QAEXXZ ENDP				; OGR_SRSNode::`default constructor closure'
_TEXT	ENDS
PUBLIC	?GetReferenceCount@OGRSpatialReference@@QBEHXZ	; OGRSpatialReference::GetReferenceCount
; Function compile flags: /Ogtp
;	COMDAT ?GetReferenceCount@OGRSpatialReference@@QBEHXZ
_TEXT	SEGMENT
?GetReferenceCount@OGRSpatialReference@@QBEHXZ PROC	; OGRSpatialReference::GetReferenceCount, COMDAT
; _this$ = ecx
; Line 162
	mov	eax, DWORD PTR [ecx+36]
	ret	0
?GetReferenceCount@OGRSpatialReference@@QBEHXZ ENDP	; OGRSpatialReference::GetReferenceCount
_TEXT	ENDS
PUBLIC	?GetRoot@OGRSpatialReference@@QAEPAVOGR_SRSNode@@XZ ; OGRSpatialReference::GetRoot
; Function compile flags: /Ogtp
;	COMDAT ?GetRoot@OGRSpatialReference@@QAEPAVOGR_SRSNode@@XZ
_TEXT	SEGMENT
?GetRoot@OGRSpatialReference@@QAEPAVOGR_SRSNode@@XZ PROC ; OGRSpatialReference::GetRoot, COMDAT
; _this$ = ecx
; Line 219
	mov	eax, DWORD PTR [ecx+32]
	ret	0
?GetRoot@OGRSpatialReference@@QAEPAVOGR_SRSNode@@XZ ENDP ; OGRSpatialReference::GetRoot
_TEXT	ENDS
PUBLIC	?GetRoot@OGRSpatialReference@@QBEPBVOGR_SRSNode@@XZ ; OGRSpatialReference::GetRoot
; Function compile flags: /Ogtp
;	COMDAT ?GetRoot@OGRSpatialReference@@QBEPBVOGR_SRSNode@@XZ
_TEXT	SEGMENT
?GetRoot@OGRSpatialReference@@QBEPBVOGR_SRSNode@@XZ PROC ; OGRSpatialReference::GetRoot, COMDAT
; _this$ = ecx
; Line 220
	mov	eax, DWORD PTR [ecx+32]
	ret	0
?GetRoot@OGRSpatialReference@@QBEPBVOGR_SRSNode@@XZ ENDP ; OGRSpatialReference::GetRoot
_TEXT	ENDS
PUBLIC	??_FOGRSpatialReference@@QAEXXZ			; OGRSpatialReference::`default constructor closure'
EXTRN	??0OGRSpatialReference@@QAE@PBD@Z:PROC		; OGRSpatialReference::OGRSpatialReference
; Function compile flags: /Ogtp
;	COMDAT ??_FOGRSpatialReference@@QAEXXZ
_TEXT	SEGMENT
??_FOGRSpatialReference@@QAEXXZ PROC			; OGRSpatialReference::`default constructor closure', COMDAT
; _this$ = ecx
	push	0
	call	??0OGRSpatialReference@@QAE@PBD@Z	; OGRSpatialReference::OGRSpatialReference
	ret	0
??_FOGRSpatialReference@@QAEXXZ ENDP			; OGRSpatialReference::`default constructor closure'
_TEXT	ENDS
PUBLIC	??_7OGRCoordinateTransformation@@6B@		; OGRCoordinateTransformation::`vftable'
PUBLIC	??1OGRCoordinateTransformation@@UAE@XZ		; OGRCoordinateTransformation::~OGRCoordinateTransformation
PUBLIC	??_R4OGRCoordinateTransformation@@6B@		; OGRCoordinateTransformation::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRCoordinateTransformation@@@8		; OGRCoordinateTransformation `RTTI Type Descriptor'
PUBLIC	??_R3OGRCoordinateTransformation@@8		; OGRCoordinateTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRCoordinateTransformation@@8		; OGRCoordinateTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRCoordinateTransformation@@8	; OGRCoordinateTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRCoordinateTransformation@@UAEPAXI@Z	; OGRCoordinateTransformation::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@OGRCoordinateTransformation@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRCoordinateTransformation@@8 DD FLAT:??_R0?AVOGRCoordinateTransformation@@@8 ; OGRCoordinateTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRCoordinateTransformation@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRCoordinateTransformation@@8
rdata$r	SEGMENT
??_R2OGRCoordinateTransformation@@8 DD FLAT:??_R1A@?0A@EA@OGRCoordinateTransformation@@8 ; OGRCoordinateTransformation::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRCoordinateTransformation@@8
rdata$r	SEGMENT
??_R3OGRCoordinateTransformation@@8 DD 00H		; OGRCoordinateTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRCoordinateTransformation@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRCoordinateTransformation@@@8
_DATA	SEGMENT
??_R0?AVOGRCoordinateTransformation@@@8 DD FLAT:??_7type_info@@6B@ ; OGRCoordinateTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRCoordinateTransformation@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRCoordinateTransformation@@6B@
rdata$r	SEGMENT
??_R4OGRCoordinateTransformation@@6B@ DD 00H		; OGRCoordinateTransformation::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRCoordinateTransformation@@@8
	DD	FLAT:??_R3OGRCoordinateTransformation@@8
rdata$r	ENDS
;	COMDAT ??_7OGRCoordinateTransformation@@6B@
CONST	SEGMENT
??_7OGRCoordinateTransformation@@6B@ DD FLAT:??_R4OGRCoordinateTransformation@@6B@ ; OGRCoordinateTransformation::`vftable'
	DD	FLAT:??_EOGRCoordinateTransformation@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1OGRCoordinateTransformation@@UAE@XZ
_TEXT	SEGMENT
??1OGRCoordinateTransformation@@UAE@XZ PROC		; OGRCoordinateTransformation::~OGRCoordinateTransformation, COMDAT
; _this$ = ecx
; Line 552
	mov	DWORD PTR [ecx], OFFSET ??_7OGRCoordinateTransformation@@6B@
	ret	0
??1OGRCoordinateTransformation@@UAE@XZ ENDP		; OGRCoordinateTransformation::~OGRCoordinateTransformation
_TEXT	ENDS
PUBLIC	??0OGRCoordinateTransformation@@QAE@XZ		; OGRCoordinateTransformation::OGRCoordinateTransformation
; Function compile flags: /Ogtp
;	COMDAT ??0OGRCoordinateTransformation@@QAE@XZ
_TEXT	SEGMENT
??0OGRCoordinateTransformation@@QAE@XZ PROC		; OGRCoordinateTransformation::OGRCoordinateTransformation, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRCoordinateTransformation@@6B@
	ret	0
??0OGRCoordinateTransformation@@QAE@XZ ENDP		; OGRCoordinateTransformation::OGRCoordinateTransformation
_TEXT	ENDS
PUBLIC	??0OGRCoordinateTransformation@@QAE@ABV0@@Z	; OGRCoordinateTransformation::OGRCoordinateTransformation
; Function compile flags: /Ogtp
;	COMDAT ??0OGRCoordinateTransformation@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRCoordinateTransformation@@QAE@ABV0@@Z PROC	; OGRCoordinateTransformation::OGRCoordinateTransformation, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRCoordinateTransformation@@6B@
	ret	4
??0OGRCoordinateTransformation@@QAE@ABV0@@Z ENDP	; OGRCoordinateTransformation::OGRCoordinateTransformation
_TEXT	ENDS
PUBLIC	??4OGRCoordinateTransformation@@QAEAAV0@ABV0@@Z	; OGRCoordinateTransformation::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRCoordinateTransformation@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRCoordinateTransformation@@QAEAAV0@ABV0@@Z PROC	; OGRCoordinateTransformation::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	ret	4
??4OGRCoordinateTransformation@@QAEAAV0@ABV0@@Z ENDP	; OGRCoordinateTransformation::operator=
_TEXT	ENDS
PUBLIC	??_GOGRCoordinateTransformation@@UAEPAXI@Z	; OGRCoordinateTransformation::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRCoordinateTransformation@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRCoordinateTransformation@@UAEPAXI@Z PROC		; OGRCoordinateTransformation::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	test	BYTE PTR ___flags$[ebp], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7OGRCoordinateTransformation@@6B@
	je	SHORT $LN6@scalar@2
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar@2:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRCoordinateTransformation@@UAEPAXI@Z ENDP		; OGRCoordinateTransformation::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_EOGRCoordinateTransformation@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRCoordinateTransformation@@UAEPAXI@Z PROC		; OGRCoordinateTransformation::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRCoordinateTransformation@@UAE@XZ ; OGRCoordinateTransformation::~OGRCoordinateTransformation
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	4
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector:
	mov	DWORD PTR [esi], OFFSET ??_7OGRCoordinateTransformation@@6B@
	test	bl, 1
	je	SHORT $LN1@vector
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRCoordinateTransformation@@UAEPAXI@Z ENDP		; OGRCoordinateTransformation::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; osgDB::readImageFile
EXTRN	__imp_?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBVOptions@1@@Z:PROC
EXTRN	__imp_?getOptions@Registry@osgDB@@QAEPAVOptions@2@XZ:PROC
EXTRN	__imp_?instance@Registry@osgDB@@SAPAV12@_N@Z:PROC
; Function compile flags: /Ogtp
;	COMDAT ?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; osgDB::readImageFile, COMDAT
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osgdb\readfile
; Line 65
	push	ebp
	mov	ebp, esp
; Line 66
	push	0
	call	DWORD PTR __imp_?instance@Registry@osgDB@@SAPAV12@_N@Z
	add	esp, 4
	mov	ecx, eax
	call	DWORD PTR __imp_?getOptions@Registry@osgDB@@QAEPAVOptions@2@XZ
	push	eax
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	DWORD PTR __imp_?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBVOptions@1@@Z
	add	esp, 8
; Line 67
	pop	ebp
	ret	0
?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; osgDB::readImageFile
_TEXT	ENDS
PUBLIC	?s2v@@YAXABVVec3f@osg@@AAVFPoint3@@@Z		; s2v
; Function compile flags: /Ogtp
;	COMDAT ?s2v@@YAXABVVec3f@osg@@AAVFPoint3@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_f$ = 12						; size = 4
?s2v@@YAXABVVec3f@osg@@AAVFPoint3@@@Z PROC		; s2v, COMDAT
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\vtosg\mathosg.h
; Line 67
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _f$[ebp]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]
	pop	ebp
	ret	0
?s2v@@YAXABVVec3f@osg@@AAVFPoint3@@@Z ENDP		; s2v
_TEXT	ENDS
PUBLIC	?s2v@@YAXABV?$BoundingSphereImpl@VVec3f@osg@@@osg@@AAVFSphere@@@Z ; s2v
; Function compile flags: /Ogtp
;	COMDAT ?s2v@@YAXABV?$BoundingSphereImpl@VVec3f@osg@@@osg@@AAVFSphere@@@Z
_TEXT	SEGMENT
_bs$ = 8						; size = 4
_sph$ = 12						; size = 4
?s2v@@YAXABV?$BoundingSphereImpl@VVec3f@osg@@@osg@@AAVFSphere@@@Z PROC ; s2v, COMDAT
; Line 73
	push	ebp
	mov	ebp, esp
; Line 74
	mov	eax, DWORD PTR _bs$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _sph$[ebp]
	fstp	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [ecx+8]
; Line 75
	fld	DWORD PTR [eax+12]
	fstp	DWORD PTR [ecx+12]
; Line 76
	pop	ebp
	ret	0
?s2v@@YAXABV?$BoundingSphereImpl@VVec3f@osg@@@osg@@AAVFSphere@@@Z ENDP ; s2v
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	edi
	mov	edi, DWORD PTR ___n$[ebp]
	dec	edi
	js	SHORT $LN1@vector@2
	push	ebx
	mov	ebx, DWORD PTR ___f$[ebp]
	push	esi
	mov	esi, DWORD PTR ___t$[ebp]
$LL2@vector@2:
	mov	ecx, esi
	call	ebx
	add	esi, DWORD PTR ___s$[ebp]
	dec	edi
	jns	SHORT $LL2@vector@2
	pop	esi
	pop	ebx
$LN1@vector@2:
	pop	edi
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??BvtString@@QBEPBDXZ				; vtString::operator char const *
; Function compile flags: /Ogtp
;	COMDAT ??BvtString@@QBEPBDXZ
_TEXT	SEGMENT
??BvtString@@QBEPBDXZ PROC				; vtString::operator char const *, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\vtstring.h
; Line 289
	mov	eax, DWORD PTR [ecx]
	ret	0
??BvtString@@QBEPBDXZ ENDP				; vtString::operator char const *
_TEXT	ENDS
PUBLIC	?Compare@vtString@@QBEHPBD@Z			; vtString::Compare
; Function compile flags: /Ogtp
;	COMDAT ?Compare@vtString@@QBEHPBD@Z
_TEXT	SEGMENT
_lpsz$ = 8						; size = 4
?Compare@vtString@@QBEHPBD@Z PROC			; vtString::Compare, COMDAT
; _this$ = ecx
; Line 295
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _lpsz$[ebp]
	mov	eax, DWORD PTR [ecx]
$LL3@Compare:
	mov	cl, BYTE PTR [eax]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN4@Compare
	test	cl, cl
	je	SHORT $LN5@Compare
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN4@Compare
	add	eax, 2
	add	edx, 2
	test	cl, cl
	jne	SHORT $LL3@Compare
$LN5@Compare:
	xor	eax, eax
	pop	ebp
	ret	4
$LN4@Compare:
	sbb	eax, eax
	sbb	eax, -1
	pop	ebp
	ret	4
?Compare@vtString@@QBEHPBD@Z ENDP			; vtString::Compare
_TEXT	ENDS
PUBLIC	?CompareNoCase@vtString@@QBEHPBD@Z		; vtString::CompareNoCase
EXTRN	__imp___stricmp:PROC
; Function compile flags: /Ogtp
;	COMDAT ?CompareNoCase@vtString@@QBEHPBD@Z
_TEXT	SEGMENT
_lpsz$ = 8						; size = 4
?CompareNoCase@vtString@@QBEHPBD@Z PROC			; vtString::CompareNoCase, COMDAT
; _this$ = ecx
; Line 297
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _lpsz$[ebp]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	push	ecx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	pop	ebp
	ret	4
?CompareNoCase@vtString@@QBEHPBD@Z ENDP			; vtString::CompareNoCase
_TEXT	ENDS
PUBLIC	??8@YA_NABVvtString@@PBD@Z			; operator==
; Function compile flags: /Ogtp
;	COMDAT ??8@YA_NABVvtString@@PBD@Z
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YA_NABVvtString@@PBD@Z PROC				; operator==, COMDAT
; Line 311
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s1$[ebp]
	mov	edx, DWORD PTR _s2$[ebp]
	mov	ecx, DWORD PTR [eax]
	npad	5
$LL5@operator@2:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN6@operator@2
	test	al, al
	je	SHORT $LN7@operator@2
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN6@operator@2
	add	ecx, 2
	add	edx, 2
	test	al, al
	jne	SHORT $LL5@operator@2
$LN7@operator@2:
	xor	eax, eax
	xor	ecx, ecx
	test	eax, eax
	sete	al
	pop	ebp
	ret	0
$LN6@operator@2:
	sbb	eax, eax
	sbb	eax, -1
	xor	ecx, ecx
	test	eax, eax
	sete	al
	pop	ebp
	ret	0
??8@YA_NABVvtString@@PBD@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	??_7vtEnabledBase@@6B@				; vtEnabledBase::`vftable'
PUBLIC	??0vtEnabledBase@@QAE@XZ			; vtEnabledBase::vtEnabledBase
PUBLIC	??_R4vtEnabledBase@@6B@				; vtEnabledBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtEnabledBase@@@8			; vtEnabledBase `RTTI Type Descriptor'
PUBLIC	??_R3vtEnabledBase@@8				; vtEnabledBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtEnabledBase@@8				; vtEnabledBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtEnabledBase@@8			; vtEnabledBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?SetEnabled@vtEnabledBase@@UAEX_N@Z		; vtEnabledBase::SetEnabled
;	COMDAT ??_R1A@?0A@EA@vtEnabledBase@@8
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\engine.h
rdata$r	SEGMENT
??_R1A@?0A@EA@vtEnabledBase@@8 DD FLAT:??_R0?AVvtEnabledBase@@@8 ; vtEnabledBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtEnabledBase@@8
rdata$r	ENDS
;	COMDAT ??_R2vtEnabledBase@@8
rdata$r	SEGMENT
??_R2vtEnabledBase@@8 DD FLAT:??_R1A@?0A@EA@vtEnabledBase@@8 ; vtEnabledBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3vtEnabledBase@@8
rdata$r	SEGMENT
??_R3vtEnabledBase@@8 DD 00H				; vtEnabledBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2vtEnabledBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtEnabledBase@@@8
_DATA	SEGMENT
??_R0?AVvtEnabledBase@@@8 DD FLAT:??_7type_info@@6B@	; vtEnabledBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtEnabledBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtEnabledBase@@6B@
rdata$r	SEGMENT
??_R4vtEnabledBase@@6B@ DD 00H				; vtEnabledBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtEnabledBase@@@8
	DD	FLAT:??_R3vtEnabledBase@@8
rdata$r	ENDS
;	COMDAT ??_7vtEnabledBase@@6B@
CONST	SEGMENT
??_7vtEnabledBase@@6B@ DD FLAT:??_R4vtEnabledBase@@6B@	; vtEnabledBase::`vftable'
	DD	FLAT:?SetEnabled@vtEnabledBase@@UAEX_N@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0vtEnabledBase@@QAE@XZ
_TEXT	SEGMENT
??0vtEnabledBase@@QAE@XZ PROC				; vtEnabledBase::vtEnabledBase, COMDAT
; _this$ = ecx
; Line 31
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7vtEnabledBase@@6B@
	mov	BYTE PTR [eax+4], 1
	ret	0
??0vtEnabledBase@@QAE@XZ ENDP				; vtEnabledBase::vtEnabledBase
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SetEnabled@vtEnabledBase@@UAEX_N@Z
_TEXT	SEGMENT
_bOn$ = 8						; size = 1
?SetEnabled@vtEnabledBase@@UAEX_N@Z PROC		; vtEnabledBase::SetEnabled, COMDAT
; _this$ = ecx
; Line 33
	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _bOn$[ebp]
	mov	BYTE PTR [ecx+4], al
	pop	ebp
	ret	4
?SetEnabled@vtEnabledBase@@UAEX_N@Z ENDP		; vtEnabledBase::SetEnabled
_TEXT	ENDS
PUBLIC	?Select@Selectable@@QAEX_N@Z			; Selectable::Select
; Function compile flags: /Ogtp
;	COMDAT ?Select@Selectable@@QAEX_N@Z
_TEXT	SEGMENT
_b$ = 8							; size = 1
?Select@Selectable@@QAEX_N@Z PROC			; Selectable::Select, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\selectable.h
; Line 16
	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx], al
	pop	ebp
	ret	4
?Select@Selectable@@QAEX_N@Z ENDP			; Selectable::Select
_TEXT	ENDS
PUBLIC	?IsSelected@Selectable@@QAE_NXZ			; Selectable::IsSelected
; Function compile flags: /Ogtp
;	COMDAT ?IsSelected@Selectable@@QAE_NXZ
_TEXT	SEGMENT
?IsSelected@Selectable@@QAE_NXZ PROC			; Selectable::IsSelected, COMDAT
; _this$ = ecx
; Line 17
	mov	al, BYTE PTR [ecx]
	ret	0
?IsSelected@Selectable@@QAE_NXZ ENDP			; Selectable::IsSelected
_TEXT	ENDS
PUBLIC	?GetName@vtMaterialDescriptor@@QBEABVvtString@@XZ ; vtMaterialDescriptor::GetName
; Function compile flags: /Ogtp
;	COMDAT ?GetName@vtMaterialDescriptor@@QBEABVvtString@@XZ
_TEXT	SEGMENT
?GetName@vtMaterialDescriptor@@QBEABVvtString@@XZ PROC	; vtMaterialDescriptor::GetName, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\structure.h
; Line 69
	mov	eax, DWORD PTR [ecx]
; Line 70
	ret	0
?GetName@vtMaterialDescriptor@@QBEABVvtString@@XZ ENDP	; vtMaterialDescriptor::GetName
_TEXT	ENDS
PUBLIC	?GetMatType@vtMaterialDescriptor@@QBEHXZ	; vtMaterialDescriptor::GetMatType
; Function compile flags: /Ogtp
;	COMDAT ?GetMatType@vtMaterialDescriptor@@QBEHXZ
_TEXT	SEGMENT
?GetMatType@vtMaterialDescriptor@@QBEHXZ PROC		; vtMaterialDescriptor::GetMatType, COMDAT
; _this$ = ecx
; Line 85
	mov	eax, DWORD PTR [ecx+4]
; Line 86
	ret	0
?GetMatType@vtMaterialDescriptor@@QBEHXZ ENDP		; vtMaterialDescriptor::GetMatType
_TEXT	ENDS
PUBLIC	?SetMaterialIndex@vtMaterialDescriptor@@QAEXH@Z	; vtMaterialDescriptor::SetMaterialIndex
; Function compile flags: /Ogtp
;	COMDAT ?SetMaterialIndex@vtMaterialDescriptor@@QAEXH@Z
_TEXT	SEGMENT
_Index$ = 8						; size = 4
?SetMaterialIndex@vtMaterialDescriptor@@QAEXH@Z PROC	; vtMaterialDescriptor::SetMaterialIndex, COMDAT
; _this$ = ecx
; Line 97
	push	ebp
	mov	ebp, esp
; Line 98
	mov	eax, DWORD PTR _Index$[ebp]
	mov	DWORD PTR [ecx+36], eax
; Line 99
	pop	ebp
	ret	4
?SetMaterialIndex@vtMaterialDescriptor@@QAEXH@Z ENDP	; vtMaterialDescriptor::SetMaterialIndex
_TEXT	ENDS
PUBLIC	?GetMaterialIndex@vtMaterialDescriptor@@QBE?BHXZ ; vtMaterialDescriptor::GetMaterialIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetMaterialIndex@vtMaterialDescriptor@@QBE?BHXZ
_TEXT	SEGMENT
?GetMaterialIndex@vtMaterialDescriptor@@QBE?BHXZ PROC	; vtMaterialDescriptor::GetMaterialIndex, COMDAT
; _this$ = ecx
; Line 102
	mov	eax, DWORD PTR [ecx+36]
; Line 103
	ret	0
?GetMaterialIndex@vtMaterialDescriptor@@QBE?BHXZ ENDP	; vtMaterialDescriptor::GetMaterialIndex
_TEXT	ENDS
PUBLIC	?GetColorable@vtMaterialDescriptor@@QBE?BW4vtMaterialColorEnum@@XZ ; vtMaterialDescriptor::GetColorable
; Function compile flags: /Ogtp
;	COMDAT ?GetColorable@vtMaterialDescriptor@@QBE?BW4vtMaterialColorEnum@@XZ
_TEXT	SEGMENT
?GetColorable@vtMaterialDescriptor@@QBE?BW4vtMaterialColorEnum@@XZ PROC ; vtMaterialDescriptor::GetColorable, COMDAT
; _this$ = ecx
; Line 110
	mov	eax, DWORD PTR [ecx+8]
; Line 111
	ret	0
?GetColorable@vtMaterialDescriptor@@QBE?BW4vtMaterialColorEnum@@XZ ENDP ; vtMaterialDescriptor::GetColorable
_TEXT	ENDS
PUBLIC	?GetSourceName@vtMaterialDescriptor@@QBEABVvtString@@XZ ; vtMaterialDescriptor::GetSourceName
; Function compile flags: /Ogtp
;	COMDAT ?GetSourceName@vtMaterialDescriptor@@QBEABVvtString@@XZ
_TEXT	SEGMENT
?GetSourceName@vtMaterialDescriptor@@QBEABVvtString@@XZ PROC ; vtMaterialDescriptor::GetSourceName, COMDAT
; _this$ = ecx
; Line 118
	lea	eax, DWORD PTR [ecx+12]
; Line 119
	ret	0
?GetSourceName@vtMaterialDescriptor@@QBEABVvtString@@XZ ENDP ; vtMaterialDescriptor::GetSourceName
_TEXT	ENDS
PUBLIC	?GetRGB@vtMaterialDescriptor@@QBE?BVRGBi@@XZ	; vtMaterialDescriptor::GetRGB
; Function compile flags: /Ogtp
;	COMDAT ?GetRGB@vtMaterialDescriptor@@QBE?BVRGBi@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetRGB@vtMaterialDescriptor@@QBE?BVRGBi@@XZ PROC	; vtMaterialDescriptor::GetRGB, COMDAT
; _this$ = ecx
; Line 125
	push	ebp
	mov	ebp, esp
; Line 126
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cx, WORD PTR [ecx+28]
	mov	DWORD PTR [eax], edx
	mov	WORD PTR [eax+4], cx
; Line 127
	pop	ebp
	ret	4
?GetRGB@vtMaterialDescriptor@@QBE?BVRGBi@@XZ ENDP	; vtMaterialDescriptor::GetRGB
_TEXT	ENDS
PUBLIC	?GetTwoSided@vtMaterialDescriptor@@QAE?B_NXZ	; vtMaterialDescriptor::GetTwoSided
; Function compile flags: /Ogtp
;	COMDAT ?GetTwoSided@vtMaterialDescriptor@@QAE?B_NXZ
_TEXT	SEGMENT
?GetTwoSided@vtMaterialDescriptor@@QAE?B_NXZ PROC	; vtMaterialDescriptor::GetTwoSided, COMDAT
; _this$ = ecx
; Line 134
	mov	al, BYTE PTR [ecx+30]
; Line 135
	ret	0
?GetTwoSided@vtMaterialDescriptor@@QAE?B_NXZ ENDP	; vtMaterialDescriptor::GetTwoSided
_TEXT	ENDS
PUBLIC	?GetAmbient@vtMaterialDescriptor@@QAE?B_NXZ	; vtMaterialDescriptor::GetAmbient
; Function compile flags: /Ogtp
;	COMDAT ?GetAmbient@vtMaterialDescriptor@@QAE?B_NXZ
_TEXT	SEGMENT
?GetAmbient@vtMaterialDescriptor@@QAE?B_NXZ PROC	; vtMaterialDescriptor::GetAmbient, COMDAT
; _this$ = ecx
; Line 142
	mov	al, BYTE PTR [ecx+31]
; Line 143
	ret	0
?GetAmbient@vtMaterialDescriptor@@QAE?B_NXZ ENDP	; vtMaterialDescriptor::GetAmbient
_TEXT	ENDS
PUBLIC	?GetBlending@vtMaterialDescriptor@@QAE?B_NXZ	; vtMaterialDescriptor::GetBlending
; Function compile flags: /Ogtp
;	COMDAT ?GetBlending@vtMaterialDescriptor@@QAE?B_NXZ
_TEXT	SEGMENT
?GetBlending@vtMaterialDescriptor@@QAE?B_NXZ PROC	; vtMaterialDescriptor::GetBlending, COMDAT
; _this$ = ecx
; Line 150
	mov	al, BYTE PTR [ecx+32]
; Line 151
	ret	0
?GetBlending@vtMaterialDescriptor@@QAE?B_NXZ ENDP	; vtMaterialDescriptor::GetBlending
_TEXT	ENDS
PUBLIC	?GetType@vtStructure@@QAE?AW4vtStructureType@@XZ ; vtStructure::GetType
; Function compile flags: /Ogtp
;	COMDAT ?GetType@vtStructure@@QAE?AW4vtStructureType@@XZ
_TEXT	SEGMENT
?GetType@vtStructure@@QAE?AW4vtStructureType@@XZ PROC	; vtStructure::GetType, COMDAT
; _this$ = ecx
; Line 236
	mov	eax, DWORD PTR [ecx+24]
	ret	0
?GetType@vtStructure@@QAE?AW4vtStructureType@@XZ ENDP	; vtStructure::GetType
_TEXT	ENDS
PUBLIC	?SetElevationOffset@vtStructure@@QAEXM@Z	; vtStructure::SetElevationOffset
; Function compile flags: /Ogtp
;	COMDAT ?SetElevationOffset@vtStructure@@QAEXM@Z
_TEXT	SEGMENT
_fOffset$ = 8						; size = 4
?SetElevationOffset@vtStructure@@QAEXM@Z PROC		; vtStructure::SetElevationOffset, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	fld	DWORD PTR _fOffset$[ebp]
	fstp	DWORD PTR [ecx+28]
	pop	ebp
	ret	4
?SetElevationOffset@vtStructure@@QAEXM@Z ENDP		; vtStructure::SetElevationOffset
_TEXT	ENDS
PUBLIC	?GetElevationOffset@vtStructure@@QBEMXZ		; vtStructure::GetElevationOffset
; Function compile flags: /Ogtp
;	COMDAT ?GetElevationOffset@vtStructure@@QBEMXZ
_TEXT	SEGMENT
?GetElevationOffset@vtStructure@@QBEMXZ PROC		; vtStructure::GetElevationOffset, COMDAT
; _this$ = ecx
; Line 239
	fld	DWORD PTR [ecx+28]
	ret	0
?GetElevationOffset@vtStructure@@QBEMXZ ENDP		; vtStructure::GetElevationOffset
_TEXT	ENDS
PUBLIC	?GetBuilding@vtStructure@@QAEPAVvtBuilding@@XZ	; vtStructure::GetBuilding
; Function compile flags: /Ogtp
;	COMDAT ?GetBuilding@vtStructure@@QAEPAVvtBuilding@@XZ
_TEXT	SEGMENT
?GetBuilding@vtStructure@@QAEPAVvtBuilding@@XZ PROC	; vtStructure::GetBuilding, COMDAT
; _this$ = ecx
; Line 243
	mov	eax, DWORD PTR [ecx+24]
	neg	eax
	sbb	eax, eax
	not	eax
	and	eax, ecx
	ret	0
?GetBuilding@vtStructure@@QAEPAVvtBuilding@@XZ ENDP	; vtStructure::GetBuilding
_TEXT	ENDS
PUBLIC	?GetInstance@vtStructure@@QAEPAVvtStructInstance@@XZ ; vtStructure::GetInstance
; Function compile flags: /Ogtp
;	COMDAT ?GetInstance@vtStructure@@QAEPAVvtStructInstance@@XZ
_TEXT	SEGMENT
?GetInstance@vtStructure@@QAEPAVvtStructInstance@@XZ PROC ; vtStructure::GetInstance, COMDAT
; _this$ = ecx
; Line 245
	xor	eax, eax
	cmp	DWORD PTR [ecx+24], 2
	setne	al
	dec	eax
	and	eax, ecx
	ret	0
?GetInstance@vtStructure@@QAEPAVvtStructInstance@@XZ ENDP ; vtStructure::GetInstance
_TEXT	ENDS
PUBLIC	?Offset@vtStructInstance@@QAEXABVDPoint2@@@Z	; vtStructInstance::Offset
; Function compile flags: /Ogtp
;	COMDAT ?Offset@vtStructInstance@@QAEXABVDPoint2@@@Z
_TEXT	SEGMENT
_delta$ = 8						; size = 4
?Offset@vtStructInstance@@QAEXABVDPoint2@@@Z PROC	; vtStructInstance::Offset, COMDAT
; _this$ = ecx
; Line 300
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR [ecx+40]
	mov	eax, DWORD PTR _delta$[ebp]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [ecx+40]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR [ecx+48]
	fstp	QWORD PTR [ecx+48]
	pop	ebp
	ret	4
?Offset@vtStructInstance@@QAEXABVDPoint2@@@Z ENDP	; vtStructInstance::Offset
_TEXT	ENDS
PUBLIC	?getSpatialReference@OGRGeometry@@QBEPAVOGRSpatialReference@@XZ ; OGRGeometry::getSpatialReference
; Function compile flags: /Ogtp
;	COMDAT ?getSpatialReference@OGRGeometry@@QBEPAVOGRSpatialReference@@XZ
_TEXT	SEGMENT
?getSpatialReference@OGRGeometry@@QBEPAVOGRSpatialReference@@XZ PROC ; OGRGeometry::getSpatialReference, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogr_geometry.h
; Line 122
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?getSpatialReference@OGRGeometry@@QBEPAVOGRSpatialReference@@XZ ENDP ; OGRGeometry::getSpatialReference
_TEXT	ENDS
PUBLIC	??_7OGRGeometry@@6B@				; OGRGeometry::`vftable'
PUBLIC	??0OGRGeometry@@QAE@ABV0@@Z			; OGRGeometry::OGRGeometry
PUBLIC	??_R4OGRGeometry@@6B@				; OGRGeometry::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRGeometry@@@8				; OGRGeometry `RTTI Type Descriptor'
PUBLIC	??_R3OGRGeometry@@8				; OGRGeometry::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRGeometry@@8				; OGRGeometry::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRGeometry@@8			; OGRGeometry::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRGeometry@@UAEPAXI@Z			; OGRGeometry::`vector deleting destructor'
EXTRN	?getCoordinateDimension@OGRGeometry@@UBEHXZ:PROC ; OGRGeometry::getCoordinateDimension
EXTRN	?IsValid@OGRGeometry@@UBEHXZ:PROC		; OGRGeometry::IsValid
EXTRN	?IsSimple@OGRGeometry@@UBEHXZ:PROC		; OGRGeometry::IsSimple
EXTRN	?IsRing@OGRGeometry@@UBEHXZ:PROC		; OGRGeometry::IsRing
EXTRN	?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z:PROC ; OGRGeometry::dumpReadable
EXTRN	?exportToGML@OGRGeometry@@UBEPADPBQBD@Z:PROC	; OGRGeometry::exportToGML
EXTRN	?exportToKML@OGRGeometry@@UBEPADXZ:PROC		; OGRGeometry::exportToKML
EXTRN	?exportToJson@OGRGeometry@@UBEPADXZ:PROC	; OGRGeometry::exportToJson
EXTRN	?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ:PROC ; OGRGeometry::exportToGEOS
EXTRN	?closeRings@OGRGeometry@@UAEXXZ:PROC		; OGRGeometry::closeRings
EXTRN	?setCoordinateDimension@OGRGeometry@@UAEXH@Z:PROC ; OGRGeometry::setCoordinateDimension
EXTRN	?segmentize@OGRGeometry@@UAEXN@Z:PROC		; OGRGeometry::segmentize
EXTRN	?Intersects@OGRGeometry@@UBEHPAV1@@Z:PROC	; OGRGeometry::Intersects
EXTRN	?Disjoint@OGRGeometry@@UBEHPBV1@@Z:PROC		; OGRGeometry::Disjoint
EXTRN	?Touches@OGRGeometry@@UBEHPBV1@@Z:PROC		; OGRGeometry::Touches
EXTRN	?Crosses@OGRGeometry@@UBEHPBV1@@Z:PROC		; OGRGeometry::Crosses
EXTRN	?Within@OGRGeometry@@UBEHPBV1@@Z:PROC		; OGRGeometry::Within
EXTRN	?Contains@OGRGeometry@@UBEHPBV1@@Z:PROC		; OGRGeometry::Contains
EXTRN	?Overlaps@OGRGeometry@@UBEHPBV1@@Z:PROC		; OGRGeometry::Overlaps
EXTRN	?Boundary@OGRGeometry@@UBEPAV1@XZ:PROC		; OGRGeometry::Boundary
EXTRN	?Distance@OGRGeometry@@UBENPBV1@@Z:PROC		; OGRGeometry::Distance
EXTRN	?ConvexHull@OGRGeometry@@UBEPAV1@XZ:PROC	; OGRGeometry::ConvexHull
EXTRN	?Buffer@OGRGeometry@@UBEPAV1@NH@Z:PROC		; OGRGeometry::Buffer
EXTRN	?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z:PROC	; OGRGeometry::Intersection
EXTRN	?Union@OGRGeometry@@UBEPAV1@PBV1@@Z:PROC	; OGRGeometry::Union
EXTRN	?UnionCascaded@OGRGeometry@@UBEPAV1@XZ:PROC	; OGRGeometry::UnionCascaded
EXTRN	?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z:PROC	; OGRGeometry::Difference
EXTRN	?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z:PROC ; OGRGeometry::SymDifference
EXTRN	?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z:PROC	; OGRGeometry::Centroid
EXTRN	?Simplify@OGRGeometry@@UBEPAV1@N@Z:PROC		; OGRGeometry::Simplify
EXTRN	?Polygonize@OGRGeometry@@UBEPAV1@XZ:PROC	; OGRGeometry::Polygonize
EXTRN	?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z:PROC ; OGRGeometry::SymmetricDifference
EXTRN	?getBoundary@OGRGeometry@@UBEPAV1@XZ:PROC	; OGRGeometry::getBoundary
EXTRN	?swapXY@OGRGeometry@@UAEXXZ:PROC		; OGRGeometry::swapXY
;	COMDAT ??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRGeometry@@8 DD FLAT:??_R0?AVOGRGeometry@@@8 ; OGRGeometry::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRGeometry@@8
rdata$r	SEGMENT
??_R2OGRGeometry@@8 DD FLAT:??_R1A@?0A@EA@OGRGeometry@@8 ; OGRGeometry::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRGeometry@@8
rdata$r	SEGMENT
??_R3OGRGeometry@@8 DD 00H				; OGRGeometry::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRGeometry@@@8
_DATA	SEGMENT
??_R0?AVOGRGeometry@@@8 DD FLAT:??_7type_info@@6B@	; OGRGeometry `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRGeometry@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRGeometry@@6B@
rdata$r	SEGMENT
??_R4OGRGeometry@@6B@ DD 00H				; OGRGeometry::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRGeometry@@@8
	DD	FLAT:??_R3OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_7OGRGeometry@@6B@
CONST	SEGMENT
??_7OGRGeometry@@6B@ DD FLAT:??_R4OGRGeometry@@6B@	; OGRGeometry::`vftable'
	DD	FLAT:??_EOGRGeometry@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:__purecall
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:__purecall
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometry@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRGeometry@@UAEXH@Z
	DD	FLAT:__purecall
	DD	FLAT:?segmentize@OGRGeometry@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:__purecall
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRGeometry@@UAEXXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRGeometry@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRGeometry@@QAE@ABV0@@Z PROC			; OGRGeometry::OGRGeometry, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	4
??0OGRGeometry@@QAE@ABV0@@Z ENDP			; OGRGeometry::OGRGeometry
_TEXT	ENDS
PUBLIC	??4OGRGeometry@@QAEAAV0@ABV0@@Z			; OGRGeometry::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRGeometry@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRGeometry@@QAEAAV0@ABV0@@Z PROC			; OGRGeometry::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	4
??4OGRGeometry@@QAEAAV0@ABV0@@Z ENDP			; OGRGeometry::operator=
_TEXT	ENDS
PUBLIC	??_GOGRGeometry@@UAEPAXI@Z			; OGRGeometry::`scalar deleting destructor'
EXTRN	??1OGRGeometry@@UAE@XZ:PROC			; OGRGeometry::~OGRGeometry
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRGeometry@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRGeometry@@UAEPAXI@Z PROC				; OGRGeometry::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRGeometry@@UAE@XZ			; OGRGeometry::~OGRGeometry
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@3
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@3:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRGeometry@@UAEPAXI@Z ENDP				; OGRGeometry::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRGeometry@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRGeometry@@UAEPAXI@Z PROC				; OGRGeometry::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@3
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRGeometry@@UAE@XZ		; OGRGeometry::~OGRGeometry
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	12					; 0000000cH
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@3
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@3:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@3:
	call	??1OGRGeometry@@UAE@XZ			; OGRGeometry::~OGRGeometry
	test	bl, 1
	je	SHORT $LN1@vector@3
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@3:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRGeometry@@UAEPAXI@Z ENDP				; OGRGeometry::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getX@OGRPoint@@QBENXZ				; OGRPoint::getX
; Function compile flags: /Ogtp
;	COMDAT ?getX@OGRPoint@@QBENXZ
_TEXT	SEGMENT
?getX@OGRPoint@@QBENXZ PROC				; OGRPoint::getX, COMDAT
; _this$ = ecx
; Line 205
	fld	QWORD PTR [ecx+16]
	ret	0
?getX@OGRPoint@@QBENXZ ENDP				; OGRPoint::getX
_TEXT	ENDS
PUBLIC	?getY@OGRPoint@@QBENXZ				; OGRPoint::getY
; Function compile flags: /Ogtp
;	COMDAT ?getY@OGRPoint@@QBENXZ
_TEXT	SEGMENT
?getY@OGRPoint@@QBENXZ PROC				; OGRPoint::getY, COMDAT
; _this$ = ecx
; Line 206
	fld	QWORD PTR [ecx+24]
	ret	0
?getY@OGRPoint@@QBENXZ ENDP				; OGRPoint::getY
_TEXT	ENDS
PUBLIC	?getZ@OGRPoint@@QBENXZ				; OGRPoint::getZ
; Function compile flags: /Ogtp
;	COMDAT ?getZ@OGRPoint@@QBENXZ
_TEXT	SEGMENT
?getZ@OGRPoint@@QBENXZ PROC				; OGRPoint::getZ, COMDAT
; _this$ = ecx
; Line 207
	fld	QWORD PTR [ecx+32]
	ret	0
?getZ@OGRPoint@@QBENXZ ENDP				; OGRPoint::getZ
_TEXT	ENDS
PUBLIC	?setX@OGRPoint@@QAEXN@Z				; OGRPoint::setX
; Function compile flags: /Ogtp
;	COMDAT ?setX@OGRPoint@@QAEXN@Z
_TEXT	SEGMENT
_xIn$ = 8						; size = 8
?setX@OGRPoint@@QAEXN@Z PROC				; OGRPoint::setX, COMDAT
; _this$ = ecx
; Line 211
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR [ecx+8], 0
	fld	QWORD PTR _xIn$[ebp]
	fstp	QWORD PTR [ecx+16]
	jne	SHORT $LN1@setX
	mov	DWORD PTR [ecx+8], 2
$LN1@setX:
	pop	ebp
	ret	8
?setX@OGRPoint@@QAEXN@Z ENDP				; OGRPoint::setX
_TEXT	ENDS
PUBLIC	?setY@OGRPoint@@QAEXN@Z				; OGRPoint::setY
; Function compile flags: /Ogtp
;	COMDAT ?setY@OGRPoint@@QAEXN@Z
_TEXT	SEGMENT
_yIn$ = 8						; size = 8
?setY@OGRPoint@@QAEXN@Z PROC				; OGRPoint::setY, COMDAT
; _this$ = ecx
; Line 212
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR [ecx+8], 0
	fld	QWORD PTR _yIn$[ebp]
	fstp	QWORD PTR [ecx+24]
	jne	SHORT $LN1@setY
	mov	DWORD PTR [ecx+8], 2
$LN1@setY:
	pop	ebp
	ret	8
?setY@OGRPoint@@QAEXN@Z ENDP				; OGRPoint::setY
_TEXT	ENDS
PUBLIC	?setZ@OGRPoint@@QAEXN@Z				; OGRPoint::setZ
; Function compile flags: /Ogtp
;	COMDAT ?setZ@OGRPoint@@QAEXN@Z
_TEXT	SEGMENT
_zIn$ = 8						; size = 8
?setZ@OGRPoint@@QAEXN@Z PROC				; OGRPoint::setZ, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _zIn$[ebp]
	mov	DWORD PTR [ecx+8], 3
	fstp	QWORD PTR [ecx+32]
	pop	ebp
	ret	8
?setZ@OGRPoint@@QAEXN@Z ENDP				; OGRPoint::setZ
_TEXT	ENDS
PUBLIC	??_7OGRPoint@@6B@				; OGRPoint::`vftable'
PUBLIC	??0OGRPoint@@QAE@ABV0@@Z			; OGRPoint::OGRPoint
PUBLIC	??_R4OGRPoint@@6B@				; OGRPoint::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRPoint@@@8				; OGRPoint `RTTI Type Descriptor'
PUBLIC	??_R3OGRPoint@@8				; OGRPoint::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRPoint@@8				; OGRPoint::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRPoint@@8			; OGRPoint::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRPoint@@UAEPAXI@Z				; OGRPoint::`vector deleting destructor'
EXTRN	?getDimension@OGRPoint@@UBEHXZ:PROC		; OGRPoint::getDimension
EXTRN	?IsEmpty@OGRPoint@@UBEHXZ:PROC			; OGRPoint::IsEmpty
EXTRN	?empty@OGRPoint@@UAEXXZ:PROC			; OGRPoint::empty
EXTRN	?clone@OGRPoint@@UBEPAVOGRGeometry@@XZ:PROC	; OGRPoint::clone
EXTRN	?getEnvelope@OGRPoint@@UBEXPAVOGREnvelope3D@@@Z:PROC ; OGRPoint::getEnvelope
EXTRN	?getEnvelope@OGRPoint@@UBEXPAVOGREnvelope@@@Z:PROC ; OGRPoint::getEnvelope
EXTRN	?WkbSize@OGRPoint@@UBEHXZ:PROC			; OGRPoint::WkbSize
EXTRN	?importFromWkb@OGRPoint@@UAEHPAEH@Z:PROC	; OGRPoint::importFromWkb
EXTRN	?exportToWkb@OGRPoint@@UBEHW4OGRwkbByteOrder@@PAE@Z:PROC ; OGRPoint::exportToWkb
EXTRN	?importFromWkt@OGRPoint@@UAEHPAPAD@Z:PROC	; OGRPoint::importFromWkt
EXTRN	?exportToWkt@OGRPoint@@UBEHPAPAD@Z:PROC		; OGRPoint::exportToWkt
EXTRN	?getGeometryType@OGRPoint@@UBE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRPoint::getGeometryType
EXTRN	?getGeometryName@OGRPoint@@UBEPBDXZ:PROC	; OGRPoint::getGeometryName
EXTRN	?flattenTo2D@OGRPoint@@UAEXXZ:PROC		; OGRPoint::flattenTo2D
EXTRN	?setCoordinateDimension@OGRPoint@@UAEXH@Z:PROC	; OGRPoint::setCoordinateDimension
EXTRN	?transform@OGRPoint@@UAEHPAVOGRCoordinateTransformation@@@Z:PROC ; OGRPoint::transform
EXTRN	?Equals@OGRPoint@@UBEHPAVOGRGeometry@@@Z:PROC	; OGRPoint::Equals
EXTRN	?swapXY@OGRPoint@@UAEXXZ:PROC			; OGRPoint::swapXY
;	COMDAT ??_R1A@?0A@EA@OGRPoint@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRPoint@@8 DD FLAT:??_R0?AVOGRPoint@@@8	; OGRPoint::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRPoint@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRPoint@@8
rdata$r	SEGMENT
??_R2OGRPoint@@8 DD FLAT:??_R1A@?0A@EA@OGRPoint@@8	; OGRPoint::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRPoint@@8
rdata$r	SEGMENT
??_R3OGRPoint@@8 DD 00H					; OGRPoint::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRPoint@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRPoint@@@8
_DATA	SEGMENT
??_R0?AVOGRPoint@@@8 DD FLAT:??_7type_info@@6B@		; OGRPoint `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRPoint@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRPoint@@6B@
rdata$r	SEGMENT
??_R4OGRPoint@@6B@ DD 00H				; OGRPoint::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRPoint@@@8
	DD	FLAT:??_R3OGRPoint@@8
rdata$r	ENDS
;	COMDAT ??_7OGRPoint@@6B@
CONST	SEGMENT
??_7OGRPoint@@6B@ DD FLAT:??_R4OGRPoint@@6B@		; OGRPoint::`vftable'
	DD	FLAT:??_EOGRPoint@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRPoint@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRPoint@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRPoint@@UAEXXZ
	DD	FLAT:?clone@OGRPoint@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRPoint@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRPoint@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRPoint@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRPoint@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRPoint@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRPoint@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRPoint@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRPoint@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRPoint@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRPoint@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometry@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRPoint@@UAEXH@Z
	DD	FLAT:?transform@OGRPoint@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRGeometry@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRPoint@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRPoint@@UAEXXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRPoint@@QAE@ABV0@@Z PROC				; OGRPoint::OGRPoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRPoint@@6B@
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fstp	QWORD PTR [eax+24]
	fld	QWORD PTR [ecx+32]
	fstp	QWORD PTR [eax+32]
	pop	ebp
	ret	4
??0OGRPoint@@QAE@ABV0@@Z ENDP				; OGRPoint::OGRPoint
_TEXT	ENDS
PUBLIC	??4OGRPoint@@QAEAAV0@ABV0@@Z			; OGRPoint::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRPoint@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRPoint@@QAEAAV0@ABV0@@Z PROC			; OGRPoint::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	fld	QWORD PTR [ecx+24]
	fstp	QWORD PTR [eax+24]
	fld	QWORD PTR [ecx+32]
	fstp	QWORD PTR [eax+32]
	pop	ebp
	ret	4
??4OGRPoint@@QAEAAV0@ABV0@@Z ENDP			; OGRPoint::operator=
_TEXT	ENDS
PUBLIC	??_GOGRPoint@@UAEPAXI@Z				; OGRPoint::`scalar deleting destructor'
EXTRN	??1OGRPoint@@UAE@XZ:PROC			; OGRPoint::~OGRPoint
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRPoint@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRPoint@@UAEPAXI@Z PROC				; OGRPoint::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRPoint@@UAE@XZ			; OGRPoint::~OGRPoint
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@4
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@4:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRPoint@@UAEPAXI@Z ENDP				; OGRPoint::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRPoint@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRPoint@@UAEPAXI@Z PROC				; OGRPoint::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@4
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRPoint@@UAE@XZ		; OGRPoint::~OGRPoint
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	40					; 00000028H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@4
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@4:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@4:
	call	??1OGRPoint@@UAE@XZ			; OGRPoint::~OGRPoint
	test	bl, 1
	je	SHORT $LN1@vector@4
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@4:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRPoint@@UAEPAXI@Z ENDP				; OGRPoint::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRCurve@@6B@				; OGRCurve::`vftable'
PUBLIC	??0OGRCurve@@QAE@ABV0@@Z			; OGRCurve::OGRCurve
PUBLIC	??_R4OGRCurve@@6B@				; OGRCurve::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRCurve@@@8				; OGRCurve `RTTI Type Descriptor'
PUBLIC	??_R3OGRCurve@@8				; OGRCurve::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRCurve@@8				; OGRCurve::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRCurve@@8			; OGRCurve::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRCurve@@UAEPAXI@Z				; OGRCurve::`vector deleting destructor'
EXTRN	?get_IsClosed@OGRCurve@@UBEHXZ:PROC		; OGRCurve::get_IsClosed
;	COMDAT ??_R1A@?0A@EA@OGRCurve@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRCurve@@8 DD FLAT:??_R0?AVOGRCurve@@@8	; OGRCurve::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRCurve@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRCurve@@8
rdata$r	SEGMENT
??_R2OGRCurve@@8 DD FLAT:??_R1A@?0A@EA@OGRCurve@@8	; OGRCurve::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRCurve@@8
rdata$r	SEGMENT
??_R3OGRCurve@@8 DD 00H					; OGRCurve::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRCurve@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRCurve@@@8
_DATA	SEGMENT
??_R0?AVOGRCurve@@@8 DD FLAT:??_7type_info@@6B@		; OGRCurve `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRCurve@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRCurve@@6B@
rdata$r	SEGMENT
??_R4OGRCurve@@6B@ DD 00H				; OGRCurve::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRCurve@@@8
	DD	FLAT:??_R3OGRCurve@@8
rdata$r	ENDS
;	COMDAT ??_7OGRCurve@@6B@
CONST	SEGMENT
??_7OGRCurve@@6B@ DD FLAT:??_R4OGRCurve@@6B@		; OGRCurve::`vftable'
	DD	FLAT:??_EOGRCurve@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:__purecall
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:__purecall
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometry@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRGeometry@@UAEXH@Z
	DD	FLAT:__purecall
	DD	FLAT:?segmentize@OGRGeometry@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:__purecall
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRGeometry@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?get_IsClosed@OGRCurve@@UBEHXZ
	DD	FLAT:__purecall
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRCurve@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRCurve@@QAE@ABV0@@Z PROC				; OGRCurve::OGRCurve, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRCurve@@6B@
	pop	ebp
	ret	4
??0OGRCurve@@QAE@ABV0@@Z ENDP				; OGRCurve::OGRCurve
_TEXT	ENDS
PUBLIC	??4OGRCurve@@QAEAAV0@ABV0@@Z			; OGRCurve::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRCurve@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRCurve@@QAEAAV0@ABV0@@Z PROC			; OGRCurve::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	4
??4OGRCurve@@QAEAAV0@ABV0@@Z ENDP			; OGRCurve::operator=
_TEXT	ENDS
PUBLIC	??_GOGRCurve@@UAEPAXI@Z				; OGRCurve::`scalar deleting destructor'
EXTRN	??1OGRCurve@@UAE@XZ:PROC			; OGRCurve::~OGRCurve
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRCurve@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRCurve@@UAEPAXI@Z PROC				; OGRCurve::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRCurve@@UAE@XZ			; OGRCurve::~OGRCurve
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@5
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@5:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRCurve@@UAEPAXI@Z ENDP				; OGRCurve::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRCurve@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRCurve@@UAEPAXI@Z PROC				; OGRCurve::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@5
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRCurve@@UAE@XZ		; OGRCurve::~OGRCurve
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	12					; 0000000cH
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@5
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@5:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@5:
	call	??1OGRCurve@@UAE@XZ			; OGRCurve::~OGRCurve
	test	bl, 1
	je	SHORT $LN1@vector@5
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@5:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRCurve@@UAEPAXI@Z ENDP				; OGRCurve::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?getNumPoints@OGRLineString@@QBEHXZ		; OGRLineString::getNumPoints
; Function compile flags: /Ogtp
;	COMDAT ?getNumPoints@OGRLineString@@QBEHXZ
_TEXT	SEGMENT
?getNumPoints@OGRLineString@@QBEHXZ PROC		; OGRLineString::getNumPoints, COMDAT
; _this$ = ecx
; Line 293
	mov	eax, DWORD PTR [ecx+12]
	ret	0
?getNumPoints@OGRLineString@@QBEHXZ ENDP		; OGRLineString::getNumPoints
_TEXT	ENDS
PUBLIC	?getX@OGRLineString@@QBENH@Z			; OGRLineString::getX
; Function compile flags: /Ogtp
;	COMDAT ?getX@OGRLineString@@QBENH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?getX@OGRLineString@@QBENH@Z PROC			; OGRLineString::getX, COMDAT
; _this$ = ecx
; Line 295
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	add	eax, eax
	fld	QWORD PTR [ecx+eax*8]
	pop	ebp
	ret	4
?getX@OGRLineString@@QBENH@Z ENDP			; OGRLineString::getX
_TEXT	ENDS
PUBLIC	?getY@OGRLineString@@QBENH@Z			; OGRLineString::getY
; Function compile flags: /Ogtp
;	COMDAT ?getY@OGRLineString@@QBENH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?getY@OGRLineString@@QBENH@Z PROC			; OGRLineString::getY, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	add	eax, eax
	fld	QWORD PTR [ecx+eax*8+8]
	pop	ebp
	ret	4
?getY@OGRLineString@@QBENH@Z ENDP			; OGRLineString::getY
_TEXT	ENDS
PUBLIC	??_7OGRLineString@@6B@				; OGRLineString::`vftable'
PUBLIC	??0OGRLineString@@QAE@ABV0@@Z			; OGRLineString::OGRLineString
PUBLIC	??_R4OGRLineString@@6B@				; OGRLineString::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRLineString@@@8			; OGRLineString `RTTI Type Descriptor'
PUBLIC	??_R3OGRLineString@@8				; OGRLineString::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRLineString@@8				; OGRLineString::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRLineString@@8			; OGRLineString::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRLineString@@UAEPAXI@Z			; OGRLineString::`vector deleting destructor'
EXTRN	?getDimension@OGRLineString@@UBEHXZ:PROC	; OGRLineString::getDimension
EXTRN	?IsEmpty@OGRLineString@@UBEHXZ:PROC		; OGRLineString::IsEmpty
EXTRN	?empty@OGRLineString@@UAEXXZ:PROC		; OGRLineString::empty
EXTRN	?clone@OGRLineString@@UBEPAVOGRGeometry@@XZ:PROC ; OGRLineString::clone
EXTRN	?getEnvelope@OGRLineString@@UBEXPAVOGREnvelope3D@@@Z:PROC ; OGRLineString::getEnvelope
EXTRN	?getEnvelope@OGRLineString@@UBEXPAVOGREnvelope@@@Z:PROC ; OGRLineString::getEnvelope
EXTRN	?WkbSize@OGRLineString@@UBEHXZ:PROC		; OGRLineString::WkbSize
EXTRN	?importFromWkb@OGRLineString@@UAEHPAEH@Z:PROC	; OGRLineString::importFromWkb
EXTRN	?exportToWkb@OGRLineString@@UBEHW4OGRwkbByteOrder@@PAE@Z:PROC ; OGRLineString::exportToWkb
EXTRN	?importFromWkt@OGRLineString@@UAEHPAPAD@Z:PROC	; OGRLineString::importFromWkt
EXTRN	?exportToWkt@OGRLineString@@UBEHPAPAD@Z:PROC	; OGRLineString::exportToWkt
EXTRN	?getGeometryType@OGRLineString@@UBE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRLineString::getGeometryType
EXTRN	?getGeometryName@OGRLineString@@UBEPBDXZ:PROC	; OGRLineString::getGeometryName
EXTRN	?flattenTo2D@OGRLineString@@UAEXXZ:PROC		; OGRLineString::flattenTo2D
EXTRN	?setCoordinateDimension@OGRLineString@@UAEXH@Z:PROC ; OGRLineString::setCoordinateDimension
EXTRN	?transform@OGRLineString@@UAEHPAVOGRCoordinateTransformation@@@Z:PROC ; OGRLineString::transform
EXTRN	?segmentize@OGRLineString@@UAEXN@Z:PROC		; OGRLineString::segmentize
EXTRN	?Equals@OGRLineString@@UBEHPAVOGRGeometry@@@Z:PROC ; OGRLineString::Equals
EXTRN	?swapXY@OGRLineString@@UAEXXZ:PROC		; OGRLineString::swapXY
EXTRN	?get_Length@OGRLineString@@UBENXZ:PROC		; OGRLineString::get_Length
EXTRN	?StartPoint@OGRLineString@@UBEXPAVOGRPoint@@@Z:PROC ; OGRLineString::StartPoint
EXTRN	?EndPoint@OGRLineString@@UBEXPAVOGRPoint@@@Z:PROC ; OGRLineString::EndPoint
EXTRN	?Value@OGRLineString@@UBEXNPAVOGRPoint@@@Z:PROC	; OGRLineString::Value
;	COMDAT ??_R1A@?0A@EA@OGRLineString@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRLineString@@8 DD FLAT:??_R0?AVOGRLineString@@@8 ; OGRLineString::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRLineString@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRLineString@@8
rdata$r	SEGMENT
??_R2OGRLineString@@8 DD FLAT:??_R1A@?0A@EA@OGRLineString@@8 ; OGRLineString::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRCurve@@8
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRLineString@@8
rdata$r	SEGMENT
??_R3OGRLineString@@8 DD 00H				; OGRLineString::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2OGRLineString@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRLineString@@@8
_DATA	SEGMENT
??_R0?AVOGRLineString@@@8 DD FLAT:??_7type_info@@6B@	; OGRLineString `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRLineString@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRLineString@@6B@
rdata$r	SEGMENT
??_R4OGRLineString@@6B@ DD 00H				; OGRLineString::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRLineString@@@8
	DD	FLAT:??_R3OGRLineString@@8
rdata$r	ENDS
;	COMDAT ??_7OGRLineString@@6B@
CONST	SEGMENT
??_7OGRLineString@@6B@ DD FLAT:??_R4OGRLineString@@6B@	; OGRLineString::`vftable'
	DD	FLAT:??_EOGRLineString@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRLineString@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRLineString@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRLineString@@UAEXXZ
	DD	FLAT:?clone@OGRLineString@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRLineString@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRLineString@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRLineString@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRLineString@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRLineString@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRLineString@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRLineString@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRLineString@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRLineString@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRLineString@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometry@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRLineString@@UAEXH@Z
	DD	FLAT:?transform@OGRLineString@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRLineString@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRLineString@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRLineString@@UAEXXZ
	DD	FLAT:?get_Length@OGRLineString@@UBENXZ
	DD	FLAT:?StartPoint@OGRLineString@@UBEXPAVOGRPoint@@@Z
	DD	FLAT:?EndPoint@OGRLineString@@UBEXPAVOGRPoint@@@Z
	DD	FLAT:?get_IsClosed@OGRCurve@@UBEHXZ
	DD	FLAT:?Value@OGRLineString@@UBEXNPAVOGRPoint@@@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRLineString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRLineString@@QAE@ABV0@@Z PROC			; OGRLineString::OGRLineString, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRLineString@@6B@
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	pop	ebp
	ret	4
??0OGRLineString@@QAE@ABV0@@Z ENDP			; OGRLineString::OGRLineString
_TEXT	ENDS
PUBLIC	??4OGRLineString@@QAEAAV0@ABV0@@Z		; OGRLineString::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRLineString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRLineString@@QAEAAV0@ABV0@@Z PROC			; OGRLineString::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	pop	ebp
	ret	4
??4OGRLineString@@QAEAAV0@ABV0@@Z ENDP			; OGRLineString::operator=
_TEXT	ENDS
PUBLIC	??_GOGRLineString@@UAEPAXI@Z			; OGRLineString::`scalar deleting destructor'
EXTRN	??1OGRLineString@@UAE@XZ:PROC			; OGRLineString::~OGRLineString
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRLineString@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRLineString@@UAEPAXI@Z PROC			; OGRLineString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRLineString@@UAE@XZ		; OGRLineString::~OGRLineString
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@6
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@6:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRLineString@@UAEPAXI@Z ENDP			; OGRLineString::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRLineString@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRLineString@@UAEPAXI@Z PROC			; OGRLineString::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@6
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRLineString@@UAE@XZ		; OGRLineString::~OGRLineString
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	24					; 00000018H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@6
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@6:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@6:
	call	??1OGRLineString@@UAE@XZ		; OGRLineString::~OGRLineString
	test	bl, 1
	je	SHORT $LN1@vector@6
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@6:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRLineString@@UAEPAXI@Z ENDP			; OGRLineString::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRLinearRing@@6B@				; OGRLinearRing::`vftable'
PUBLIC	??0OGRLinearRing@@QAE@ABV0@@Z			; OGRLinearRing::OGRLinearRing
PUBLIC	??_R4OGRLinearRing@@6B@				; OGRLinearRing::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRLinearRing@@@8			; OGRLinearRing `RTTI Type Descriptor'
PUBLIC	??_R3OGRLinearRing@@8				; OGRLinearRing::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRLinearRing@@8				; OGRLinearRing::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRLinearRing@@8			; OGRLinearRing::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRLinearRing@@UAEPAXI@Z			; OGRLinearRing::`vector deleting destructor'
EXTRN	?clone@OGRLinearRing@@UBEPAVOGRGeometry@@XZ:PROC ; OGRLinearRing::clone
EXTRN	?WkbSize@OGRLinearRing@@UBEHXZ:PROC		; OGRLinearRing::WkbSize
EXTRN	?importFromWkb@OGRLinearRing@@UAEHPAEH@Z:PROC	; OGRLinearRing::importFromWkb
EXTRN	?exportToWkb@OGRLinearRing@@UBEHW4OGRwkbByteOrder@@PAE@Z:PROC ; OGRLinearRing::exportToWkb
EXTRN	?getGeometryName@OGRLinearRing@@UBEPBDXZ:PROC	; OGRLinearRing::getGeometryName
EXTRN	?closeRings@OGRLinearRing@@UAEXXZ:PROC		; OGRLinearRing::closeRings
EXTRN	?_WkbSize@OGRLinearRing@@EBEHH@Z:PROC		; OGRLinearRing::_WkbSize
EXTRN	?_importFromWkb@OGRLinearRing@@EAEHW4OGRwkbByteOrder@@HPAEH@Z:PROC ; OGRLinearRing::_importFromWkb
EXTRN	?_exportToWkb@OGRLinearRing@@EBEHW4OGRwkbByteOrder@@HPAE@Z:PROC ; OGRLinearRing::_exportToWkb
EXTRN	?isClockwise@OGRLinearRing@@UBEHXZ:PROC		; OGRLinearRing::isClockwise
EXTRN	?reverseWindingOrder@OGRLinearRing@@UAEXXZ:PROC	; OGRLinearRing::reverseWindingOrder
EXTRN	?get_Area@OGRLinearRing@@UBENXZ:PROC		; OGRLinearRing::get_Area
;	COMDAT ??_R1A@?0A@EA@OGRLinearRing@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRLinearRing@@8 DD FLAT:??_R0?AVOGRLinearRing@@@8 ; OGRLinearRing::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRLinearRing@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRLinearRing@@8
rdata$r	SEGMENT
??_R2OGRLinearRing@@8 DD FLAT:??_R1A@?0A@EA@OGRLinearRing@@8 ; OGRLinearRing::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRLineString@@8
	DD	FLAT:??_R1A@?0A@EA@OGRCurve@@8
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRLinearRing@@8
rdata$r	SEGMENT
??_R3OGRLinearRing@@8 DD 00H				; OGRLinearRing::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2OGRLinearRing@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRLinearRing@@@8
_DATA	SEGMENT
??_R0?AVOGRLinearRing@@@8 DD FLAT:??_7type_info@@6B@	; OGRLinearRing `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRLinearRing@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRLinearRing@@6B@
rdata$r	SEGMENT
??_R4OGRLinearRing@@6B@ DD 00H				; OGRLinearRing::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRLinearRing@@@8
	DD	FLAT:??_R3OGRLinearRing@@8
rdata$r	ENDS
;	COMDAT ??_7OGRLinearRing@@6B@
CONST	SEGMENT
??_7OGRLinearRing@@6B@ DD FLAT:??_R4OGRLinearRing@@6B@	; OGRLinearRing::`vftable'
	DD	FLAT:??_EOGRLinearRing@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRLineString@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRLineString@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRLineString@@UAEXXZ
	DD	FLAT:?clone@OGRLinearRing@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRLineString@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRLineString@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRLinearRing@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRLinearRing@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRLinearRing@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRLineString@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRLineString@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRLineString@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRLinearRing@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRLineString@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRLinearRing@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRLineString@@UAEXH@Z
	DD	FLAT:?transform@OGRLineString@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRLineString@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRLineString@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRLineString@@UAEXXZ
	DD	FLAT:?get_Length@OGRLineString@@UBENXZ
	DD	FLAT:?StartPoint@OGRLineString@@UBEXPAVOGRPoint@@@Z
	DD	FLAT:?EndPoint@OGRLineString@@UBEXPAVOGRPoint@@@Z
	DD	FLAT:?get_IsClosed@OGRCurve@@UBEHXZ
	DD	FLAT:?Value@OGRLineString@@UBEXNPAVOGRPoint@@@Z
	DD	FLAT:?_WkbSize@OGRLinearRing@@EBEHH@Z
	DD	FLAT:?_importFromWkb@OGRLinearRing@@EAEHW4OGRwkbByteOrder@@HPAEH@Z
	DD	FLAT:?_exportToWkb@OGRLinearRing@@EBEHW4OGRwkbByteOrder@@HPAE@Z
	DD	FLAT:?isClockwise@OGRLinearRing@@UBEHXZ
	DD	FLAT:?reverseWindingOrder@OGRLinearRing@@UAEXXZ
	DD	FLAT:?get_Area@OGRLinearRing@@UBENXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRLinearRing@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRLinearRing@@QAE@ABV0@@Z PROC			; OGRLinearRing::OGRLinearRing, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], OFFSET ??_7OGRLineString@@6B@
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRLinearRing@@6B@
	pop	ebp
	ret	4
??0OGRLinearRing@@QAE@ABV0@@Z ENDP			; OGRLinearRing::OGRLinearRing
_TEXT	ENDS
PUBLIC	??4OGRLinearRing@@QAEAAV0@ABV0@@Z		; OGRLinearRing::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRLinearRing@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRLinearRing@@QAEAAV0@ABV0@@Z PROC			; OGRLinearRing::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	pop	ebp
	ret	4
??4OGRLinearRing@@QAEAAV0@ABV0@@Z ENDP			; OGRLinearRing::operator=
_TEXT	ENDS
PUBLIC	??_GOGRLinearRing@@UAEPAXI@Z			; OGRLinearRing::`scalar deleting destructor'
EXTRN	??1OGRLinearRing@@UAE@XZ:PROC			; OGRLinearRing::~OGRLinearRing
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRLinearRing@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRLinearRing@@UAEPAXI@Z PROC			; OGRLinearRing::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRLinearRing@@UAE@XZ		; OGRLinearRing::~OGRLinearRing
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@7
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@7:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRLinearRing@@UAEPAXI@Z ENDP			; OGRLinearRing::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRLinearRing@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRLinearRing@@UAEPAXI@Z PROC			; OGRLinearRing::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@7
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRLinearRing@@UAE@XZ		; OGRLinearRing::~OGRLinearRing
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	24					; 00000018H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@7
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@7:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@7:
	call	??1OGRLinearRing@@UAE@XZ		; OGRLinearRing::~OGRLinearRing
	test	bl, 1
	je	SHORT $LN1@vector@7
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@7:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRLinearRing@@UAEPAXI@Z ENDP			; OGRLinearRing::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRSurface@@6B@				; OGRSurface::`vftable'
PUBLIC	??0OGRSurface@@QAE@XZ				; OGRSurface::OGRSurface
PUBLIC	??_R4OGRSurface@@6B@				; OGRSurface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRSurface@@@8				; OGRSurface `RTTI Type Descriptor'
PUBLIC	??_R3OGRSurface@@8				; OGRSurface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRSurface@@8				; OGRSurface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRSurface@@8			; OGRSurface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRSurface@@UAEPAXI@Z			; OGRSurface::`vector deleting destructor'
EXTRN	??0OGRGeometry@@QAE@XZ:PROC			; OGRGeometry::OGRGeometry
;	COMDAT ??_R1A@?0A@EA@OGRSurface@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRSurface@@8 DD FLAT:??_R0?AVOGRSurface@@@8 ; OGRSurface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRSurface@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRSurface@@8
rdata$r	SEGMENT
??_R2OGRSurface@@8 DD FLAT:??_R1A@?0A@EA@OGRSurface@@8	; OGRSurface::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRSurface@@8
rdata$r	SEGMENT
??_R3OGRSurface@@8 DD 00H				; OGRSurface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRSurface@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRSurface@@@8
_DATA	SEGMENT
??_R0?AVOGRSurface@@@8 DD FLAT:??_7type_info@@6B@	; OGRSurface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRSurface@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRSurface@@6B@
rdata$r	SEGMENT
??_R4OGRSurface@@6B@ DD 00H				; OGRSurface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRSurface@@@8
	DD	FLAT:??_R3OGRSurface@@8
rdata$r	ENDS
;	COMDAT ??_7OGRSurface@@6B@
CONST	SEGMENT
??_7OGRSurface@@6B@ DD FLAT:??_R4OGRSurface@@6B@	; OGRSurface::`vftable'
	DD	FLAT:??_EOGRSurface@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:__purecall
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:__purecall
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometry@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRGeometry@@UAEXH@Z
	DD	FLAT:__purecall
	DD	FLAT:?segmentize@OGRGeometry@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:__purecall
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRGeometry@@UAEXXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRSurface@@QAE@XZ
_TEXT	SEGMENT
??0OGRSurface@@QAE@XZ PROC				; OGRSurface::OGRSurface, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??0OGRGeometry@@QAE@XZ			; OGRGeometry::OGRGeometry
	mov	DWORD PTR [esi], OFFSET ??_7OGRSurface@@6B@
	mov	eax, esi
	pop	esi
	ret	0
??0OGRSurface@@QAE@XZ ENDP				; OGRSurface::OGRSurface
_TEXT	ENDS
PUBLIC	??1OGRSurface@@UAE@XZ				; OGRSurface::~OGRSurface
; Function compile flags: /Ogtp
;	COMDAT ??1OGRSurface@@UAE@XZ
_TEXT	SEGMENT
??1OGRSurface@@UAE@XZ PROC				; OGRSurface::~OGRSurface, COMDAT
; _this$ = ecx
	jmp	??1OGRGeometry@@UAE@XZ			; OGRGeometry::~OGRGeometry
??1OGRSurface@@UAE@XZ ENDP				; OGRSurface::~OGRSurface
_TEXT	ENDS
PUBLIC	??0OGRSurface@@QAE@ABV0@@Z			; OGRSurface::OGRSurface
; Function compile flags: /Ogtp
;	COMDAT ??0OGRSurface@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRSurface@@QAE@ABV0@@Z PROC				; OGRSurface::OGRSurface, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRSurface@@6B@
	pop	ebp
	ret	4
??0OGRSurface@@QAE@ABV0@@Z ENDP				; OGRSurface::OGRSurface
_TEXT	ENDS
PUBLIC	??4OGRSurface@@QAEAAV0@ABV0@@Z			; OGRSurface::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRSurface@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRSurface@@QAEAAV0@ABV0@@Z PROC			; OGRSurface::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	pop	ebp
	ret	4
??4OGRSurface@@QAEAAV0@ABV0@@Z ENDP			; OGRSurface::operator=
_TEXT	ENDS
PUBLIC	??_GOGRSurface@@UAEPAXI@Z			; OGRSurface::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRSurface@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRSurface@@UAEPAXI@Z PROC				; OGRSurface::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRGeometry@@UAE@XZ			; OGRGeometry::~OGRGeometry
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN7@scalar@8
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@scalar@8:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRSurface@@UAEPAXI@Z ENDP				; OGRSurface::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRSurface@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRSurface@@UAEPAXI@Z PROC				; OGRSurface::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@8
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRSurface@@UAE@XZ
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	12					; 0000000cH
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@8
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@8:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@8:
	call	??1OGRGeometry@@UAE@XZ			; OGRGeometry::~OGRGeometry
	test	bl, 1
	je	SHORT $LN1@vector@8
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@8:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRSurface@@UAEPAXI@Z ENDP				; OGRSurface::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRPolygon@@6B@				; OGRPolygon::`vftable'
PUBLIC	??0OGRPolygon@@QAE@ABV0@@Z			; OGRPolygon::OGRPolygon
PUBLIC	??_R4OGRPolygon@@6B@				; OGRPolygon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRPolygon@@@8				; OGRPolygon `RTTI Type Descriptor'
PUBLIC	??_R3OGRPolygon@@8				; OGRPolygon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRPolygon@@8				; OGRPolygon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRPolygon@@8			; OGRPolygon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRPolygon@@UAEPAXI@Z			; OGRPolygon::`vector deleting destructor'
EXTRN	?getDimension@OGRPolygon@@UBEHXZ:PROC		; OGRPolygon::getDimension
EXTRN	?IsEmpty@OGRPolygon@@UBEHXZ:PROC		; OGRPolygon::IsEmpty
EXTRN	?empty@OGRPolygon@@UAEXXZ:PROC			; OGRPolygon::empty
EXTRN	?clone@OGRPolygon@@UBEPAVOGRGeometry@@XZ:PROC	; OGRPolygon::clone
EXTRN	?getEnvelope@OGRPolygon@@UBEXPAVOGREnvelope3D@@@Z:PROC ; OGRPolygon::getEnvelope
EXTRN	?getEnvelope@OGRPolygon@@UBEXPAVOGREnvelope@@@Z:PROC ; OGRPolygon::getEnvelope
EXTRN	?WkbSize@OGRPolygon@@UBEHXZ:PROC		; OGRPolygon::WkbSize
EXTRN	?importFromWkb@OGRPolygon@@UAEHPAEH@Z:PROC	; OGRPolygon::importFromWkb
EXTRN	?exportToWkb@OGRPolygon@@UBEHW4OGRwkbByteOrder@@PAE@Z:PROC ; OGRPolygon::exportToWkb
EXTRN	?importFromWkt@OGRPolygon@@UAEHPAPAD@Z:PROC	; OGRPolygon::importFromWkt
EXTRN	?exportToWkt@OGRPolygon@@UBEHPAPAD@Z:PROC	; OGRPolygon::exportToWkt
EXTRN	?getGeometryType@OGRPolygon@@UBE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRPolygon::getGeometryType
EXTRN	?getGeometryName@OGRPolygon@@UBEPBDXZ:PROC	; OGRPolygon::getGeometryName
EXTRN	?flattenTo2D@OGRPolygon@@UAEXXZ:PROC		; OGRPolygon::flattenTo2D
EXTRN	?closeRings@OGRPolygon@@UAEXXZ:PROC		; OGRPolygon::closeRings
EXTRN	?setCoordinateDimension@OGRPolygon@@UAEXH@Z:PROC ; OGRPolygon::setCoordinateDimension
EXTRN	?transform@OGRPolygon@@UAEHPAVOGRCoordinateTransformation@@@Z:PROC ; OGRPolygon::transform
EXTRN	?segmentize@OGRPolygon@@UAEXN@Z:PROC		; OGRPolygon::segmentize
EXTRN	?Equals@OGRPolygon@@UBEHPAVOGRGeometry@@@Z:PROC	; OGRPolygon::Equals
EXTRN	?swapXY@OGRPolygon@@UAEXXZ:PROC			; OGRPolygon::swapXY
EXTRN	?get_Area@OGRPolygon@@UBENXZ:PROC		; OGRPolygon::get_Area
EXTRN	?PointOnSurface@OGRPolygon@@UBEHPAVOGRPoint@@@Z:PROC ; OGRPolygon::PointOnSurface
;	COMDAT ??_R1A@?0A@EA@OGRPolygon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRPolygon@@8 DD FLAT:??_R0?AVOGRPolygon@@@8 ; OGRPolygon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRPolygon@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRPolygon@@8
rdata$r	SEGMENT
??_R2OGRPolygon@@8 DD FLAT:??_R1A@?0A@EA@OGRPolygon@@8	; OGRPolygon::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRSurface@@8
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRPolygon@@8
rdata$r	SEGMENT
??_R3OGRPolygon@@8 DD 00H				; OGRPolygon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2OGRPolygon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRPolygon@@@8
_DATA	SEGMENT
??_R0?AVOGRPolygon@@@8 DD FLAT:??_7type_info@@6B@	; OGRPolygon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRPolygon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRPolygon@@6B@
rdata$r	SEGMENT
??_R4OGRPolygon@@6B@ DD 00H				; OGRPolygon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRPolygon@@@8
	DD	FLAT:??_R3OGRPolygon@@8
rdata$r	ENDS
;	COMDAT ??_7OGRPolygon@@6B@
CONST	SEGMENT
??_7OGRPolygon@@6B@ DD FLAT:??_R4OGRPolygon@@6B@	; OGRPolygon::`vftable'
	DD	FLAT:??_EOGRPolygon@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRPolygon@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRPolygon@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRPolygon@@UAEXXZ
	DD	FLAT:?clone@OGRPolygon@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRPolygon@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRPolygon@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRPolygon@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRPolygon@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRPolygon@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRPolygon@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRPolygon@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRPolygon@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRPolygon@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRPolygon@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRPolygon@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRPolygon@@UAEXH@Z
	DD	FLAT:?transform@OGRPolygon@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRPolygon@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRPolygon@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRPolygon@@UAEXXZ
	DD	FLAT:?get_Area@OGRPolygon@@UBENXZ
	DD	FLAT:?PointOnSurface@OGRPolygon@@UBEHPAVOGRPoint@@@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRPolygon@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRPolygon@@QAE@ABV0@@Z PROC				; OGRPolygon::OGRPolygon, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRPolygon@@6B@
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??0OGRPolygon@@QAE@ABV0@@Z ENDP				; OGRPolygon::OGRPolygon
_TEXT	ENDS
PUBLIC	??4OGRPolygon@@QAEAAV0@ABV0@@Z			; OGRPolygon::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRPolygon@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRPolygon@@QAEAAV0@ABV0@@Z PROC			; OGRPolygon::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??4OGRPolygon@@QAEAAV0@ABV0@@Z ENDP			; OGRPolygon::operator=
_TEXT	ENDS
PUBLIC	??_GOGRPolygon@@UAEPAXI@Z			; OGRPolygon::`scalar deleting destructor'
EXTRN	??1OGRPolygon@@UAE@XZ:PROC			; OGRPolygon::~OGRPolygon
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRPolygon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRPolygon@@UAEPAXI@Z PROC				; OGRPolygon::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRPolygon@@UAE@XZ			; OGRPolygon::~OGRPolygon
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@9
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@9:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRPolygon@@UAEPAXI@Z ENDP				; OGRPolygon::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRPolygon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRPolygon@@UAEPAXI@Z PROC				; OGRPolygon::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@9
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRPolygon@@UAE@XZ		; OGRPolygon::~OGRPolygon
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@9
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@9:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@9:
	call	??1OGRPolygon@@UAE@XZ			; OGRPolygon::~OGRPolygon
	test	bl, 1
	je	SHORT $LN1@vector@9
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@9:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRPolygon@@UAEPAXI@Z ENDP				; OGRPolygon::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRGeometryCollection@@6B@			; OGRGeometryCollection::`vftable'
PUBLIC	??0OGRGeometryCollection@@QAE@ABV0@@Z		; OGRGeometryCollection::OGRGeometryCollection
PUBLIC	??_R4OGRGeometryCollection@@6B@			; OGRGeometryCollection::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRGeometryCollection@@@8		; OGRGeometryCollection `RTTI Type Descriptor'
PUBLIC	??_R3OGRGeometryCollection@@8			; OGRGeometryCollection::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRGeometryCollection@@8			; OGRGeometryCollection::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRGeometryCollection@@8		; OGRGeometryCollection::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRGeometryCollection@@UAEPAXI@Z		; OGRGeometryCollection::`vector deleting destructor'
EXTRN	?getDimension@OGRGeometryCollection@@UBEHXZ:PROC ; OGRGeometryCollection::getDimension
EXTRN	?IsEmpty@OGRGeometryCollection@@UBEHXZ:PROC	; OGRGeometryCollection::IsEmpty
EXTRN	?empty@OGRGeometryCollection@@UAEXXZ:PROC	; OGRGeometryCollection::empty
EXTRN	?clone@OGRGeometryCollection@@UBEPAVOGRGeometry@@XZ:PROC ; OGRGeometryCollection::clone
EXTRN	?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope3D@@@Z:PROC ; OGRGeometryCollection::getEnvelope
EXTRN	?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope@@@Z:PROC ; OGRGeometryCollection::getEnvelope
EXTRN	?WkbSize@OGRGeometryCollection@@UBEHXZ:PROC	; OGRGeometryCollection::WkbSize
EXTRN	?importFromWkb@OGRGeometryCollection@@UAEHPAEH@Z:PROC ; OGRGeometryCollection::importFromWkb
EXTRN	?exportToWkb@OGRGeometryCollection@@UBEHW4OGRwkbByteOrder@@PAE@Z:PROC ; OGRGeometryCollection::exportToWkb
EXTRN	?importFromWkt@OGRGeometryCollection@@UAEHPAPAD@Z:PROC ; OGRGeometryCollection::importFromWkt
EXTRN	?exportToWkt@OGRGeometryCollection@@UBEHPAPAD@Z:PROC ; OGRGeometryCollection::exportToWkt
EXTRN	?getGeometryType@OGRGeometryCollection@@UBE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRGeometryCollection::getGeometryType
EXTRN	?getGeometryName@OGRGeometryCollection@@UBEPBDXZ:PROC ; OGRGeometryCollection::getGeometryName
EXTRN	?flattenTo2D@OGRGeometryCollection@@UAEXXZ:PROC	; OGRGeometryCollection::flattenTo2D
EXTRN	?closeRings@OGRGeometryCollection@@UAEXXZ:PROC	; OGRGeometryCollection::closeRings
EXTRN	?setCoordinateDimension@OGRGeometryCollection@@UAEXH@Z:PROC ; OGRGeometryCollection::setCoordinateDimension
EXTRN	?transform@OGRGeometryCollection@@UAEHPAVOGRCoordinateTransformation@@@Z:PROC ; OGRGeometryCollection::transform
EXTRN	?segmentize@OGRGeometryCollection@@UAEXN@Z:PROC	; OGRGeometryCollection::segmentize
EXTRN	?Equals@OGRGeometryCollection@@UBEHPAVOGRGeometry@@@Z:PROC ; OGRGeometryCollection::Equals
EXTRN	?swapXY@OGRGeometryCollection@@UAEXXZ:PROC	; OGRGeometryCollection::swapXY
EXTRN	?get_Length@OGRGeometryCollection@@UBENXZ:PROC	; OGRGeometryCollection::get_Length
EXTRN	?get_Area@OGRGeometryCollection@@UBENXZ:PROC	; OGRGeometryCollection::get_Area
EXTRN	?addGeometry@OGRGeometryCollection@@UAEHPBVOGRGeometry@@@Z:PROC ; OGRGeometryCollection::addGeometry
EXTRN	?addGeometryDirectly@OGRGeometryCollection@@UAEHPAVOGRGeometry@@@Z:PROC ; OGRGeometryCollection::addGeometryDirectly
EXTRN	?removeGeometry@OGRGeometryCollection@@UAEHHH@Z:PROC ; OGRGeometryCollection::removeGeometry
;	COMDAT ??_R1A@?0A@EA@OGRGeometryCollection@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRGeometryCollection@@8 DD FLAT:??_R0?AVOGRGeometryCollection@@@8 ; OGRGeometryCollection::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRGeometryCollection@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRGeometryCollection@@8
rdata$r	SEGMENT
??_R2OGRGeometryCollection@@8 DD FLAT:??_R1A@?0A@EA@OGRGeometryCollection@@8 ; OGRGeometryCollection::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRGeometryCollection@@8
rdata$r	SEGMENT
??_R3OGRGeometryCollection@@8 DD 00H			; OGRGeometryCollection::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRGeometryCollection@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRGeometryCollection@@@8
_DATA	SEGMENT
??_R0?AVOGRGeometryCollection@@@8 DD FLAT:??_7type_info@@6B@ ; OGRGeometryCollection `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRGeometryCollection@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRGeometryCollection@@6B@
rdata$r	SEGMENT
??_R4OGRGeometryCollection@@6B@ DD 00H			; OGRGeometryCollection::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRGeometryCollection@@@8
	DD	FLAT:??_R3OGRGeometryCollection@@8
rdata$r	ENDS
;	COMDAT ??_7OGRGeometryCollection@@6B@
CONST	SEGMENT
??_7OGRGeometryCollection@@6B@ DD FLAT:??_R4OGRGeometryCollection@@6B@ ; OGRGeometryCollection::`vftable'
	DD	FLAT:??_EOGRGeometryCollection@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?clone@OGRGeometryCollection@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRGeometryCollection@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRGeometryCollection@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRGeometryCollection@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRGeometryCollection@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRGeometryCollection@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRGeometryCollection@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRGeometryCollection@@UAEXH@Z
	DD	FLAT:?transform@OGRGeometryCollection@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRGeometryCollection@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRGeometryCollection@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?get_Length@OGRGeometryCollection@@UBENXZ
	DD	FLAT:?get_Area@OGRGeometryCollection@@UBENXZ
	DD	FLAT:?addGeometry@OGRGeometryCollection@@UAEHPBVOGRGeometry@@@Z
	DD	FLAT:?addGeometryDirectly@OGRGeometryCollection@@UAEHPAVOGRGeometry@@@Z
	DD	FLAT:?removeGeometry@OGRGeometryCollection@@UAEHHH@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRGeometryCollection@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRGeometryCollection@@QAE@ABV0@@Z PROC		; OGRGeometryCollection::OGRGeometryCollection, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometryCollection@@6B@
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??0OGRGeometryCollection@@QAE@ABV0@@Z ENDP		; OGRGeometryCollection::OGRGeometryCollection
_TEXT	ENDS
PUBLIC	??4OGRGeometryCollection@@QAEAAV0@ABV0@@Z	; OGRGeometryCollection::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRGeometryCollection@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRGeometryCollection@@QAEAAV0@ABV0@@Z PROC		; OGRGeometryCollection::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??4OGRGeometryCollection@@QAEAAV0@ABV0@@Z ENDP		; OGRGeometryCollection::operator=
_TEXT	ENDS
PUBLIC	??_GOGRGeometryCollection@@UAEPAXI@Z		; OGRGeometryCollection::`scalar deleting destructor'
EXTRN	??1OGRGeometryCollection@@UAE@XZ:PROC		; OGRGeometryCollection::~OGRGeometryCollection
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRGeometryCollection@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRGeometryCollection@@UAEPAXI@Z PROC		; OGRGeometryCollection::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@10
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@10:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRGeometryCollection@@UAEPAXI@Z ENDP		; OGRGeometryCollection::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRGeometryCollection@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRGeometryCollection@@UAEPAXI@Z PROC		; OGRGeometryCollection::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@10
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@10
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@10:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@10:
	call	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
	test	bl, 1
	je	SHORT $LN1@vector@10
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@10:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRGeometryCollection@@UAEPAXI@Z ENDP		; OGRGeometryCollection::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1OGRMultiPolygon@@UAE@XZ			; OGRMultiPolygon::~OGRMultiPolygon
; Function compile flags: /Ogtp
;	COMDAT ??1OGRMultiPolygon@@UAE@XZ
_TEXT	SEGMENT
??1OGRMultiPolygon@@UAE@XZ PROC				; OGRMultiPolygon::~OGRMultiPolygon, COMDAT
; _this$ = ecx
	jmp	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
??1OGRMultiPolygon@@UAE@XZ ENDP				; OGRMultiPolygon::~OGRMultiPolygon
_TEXT	ENDS
PUBLIC	??_7OGRMultiPolygon@@6B@			; OGRMultiPolygon::`vftable'
PUBLIC	??0OGRMultiPolygon@@QAE@ABV0@@Z			; OGRMultiPolygon::OGRMultiPolygon
PUBLIC	??_R4OGRMultiPolygon@@6B@			; OGRMultiPolygon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRMultiPolygon@@@8			; OGRMultiPolygon `RTTI Type Descriptor'
PUBLIC	??_R3OGRMultiPolygon@@8				; OGRMultiPolygon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRMultiPolygon@@8				; OGRMultiPolygon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRMultiPolygon@@8		; OGRMultiPolygon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRMultiPolygon@@UAEPAXI@Z			; OGRMultiPolygon::`vector deleting destructor'
EXTRN	?clone@OGRMultiPolygon@@UBEPAVOGRGeometry@@XZ:PROC ; OGRMultiPolygon::clone
EXTRN	?importFromWkt@OGRMultiPolygon@@UAEHPAPAD@Z:PROC ; OGRMultiPolygon::importFromWkt
EXTRN	?exportToWkt@OGRMultiPolygon@@UBEHPAPAD@Z:PROC	; OGRMultiPolygon::exportToWkt
EXTRN	?getGeometryType@OGRMultiPolygon@@UBE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRMultiPolygon::getGeometryType
EXTRN	?getGeometryName@OGRMultiPolygon@@UBEPBDXZ:PROC	; OGRMultiPolygon::getGeometryName
EXTRN	?get_Area@OGRMultiPolygon@@UBENXZ:PROC		; OGRMultiPolygon::get_Area
EXTRN	?addGeometryDirectly@OGRMultiPolygon@@UAEHPAVOGRGeometry@@@Z:PROC ; OGRMultiPolygon::addGeometryDirectly
;	COMDAT ??_R1A@?0A@EA@OGRMultiPolygon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRMultiPolygon@@8 DD FLAT:??_R0?AVOGRMultiPolygon@@@8 ; OGRMultiPolygon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRMultiPolygon@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRMultiPolygon@@8
rdata$r	SEGMENT
??_R2OGRMultiPolygon@@8 DD FLAT:??_R1A@?0A@EA@OGRMultiPolygon@@8 ; OGRMultiPolygon::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRGeometryCollection@@8
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRMultiPolygon@@8
rdata$r	SEGMENT
??_R3OGRMultiPolygon@@8 DD 00H				; OGRMultiPolygon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2OGRMultiPolygon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRMultiPolygon@@@8
_DATA	SEGMENT
??_R0?AVOGRMultiPolygon@@@8 DD FLAT:??_7type_info@@6B@	; OGRMultiPolygon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRMultiPolygon@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRMultiPolygon@@6B@
rdata$r	SEGMENT
??_R4OGRMultiPolygon@@6B@ DD 00H			; OGRMultiPolygon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRMultiPolygon@@@8
	DD	FLAT:??_R3OGRMultiPolygon@@8
rdata$r	ENDS
;	COMDAT ??_7OGRMultiPolygon@@6B@
CONST	SEGMENT
??_7OGRMultiPolygon@@6B@ DD FLAT:??_R4OGRMultiPolygon@@6B@ ; OGRMultiPolygon::`vftable'
	DD	FLAT:??_EOGRMultiPolygon@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?clone@OGRMultiPolygon@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRGeometryCollection@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRGeometryCollection@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRMultiPolygon@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRMultiPolygon@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRMultiPolygon@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRMultiPolygon@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRGeometryCollection@@UAEXH@Z
	DD	FLAT:?transform@OGRGeometryCollection@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRGeometryCollection@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRGeometryCollection@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?get_Length@OGRGeometryCollection@@UBENXZ
	DD	FLAT:?get_Area@OGRMultiPolygon@@UBENXZ
	DD	FLAT:?addGeometry@OGRGeometryCollection@@UAEHPBVOGRGeometry@@@Z
	DD	FLAT:?addGeometryDirectly@OGRMultiPolygon@@UAEHPAVOGRGeometry@@@Z
	DD	FLAT:?removeGeometry@OGRGeometryCollection@@UAEHHH@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRMultiPolygon@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRMultiPolygon@@QAE@ABV0@@Z PROC			; OGRMultiPolygon::OGRMultiPolygon, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometryCollection@@6B@
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRMultiPolygon@@6B@
	pop	ebp
	ret	4
??0OGRMultiPolygon@@QAE@ABV0@@Z ENDP			; OGRMultiPolygon::OGRMultiPolygon
_TEXT	ENDS
PUBLIC	??4OGRMultiPolygon@@QAEAAV0@ABV0@@Z		; OGRMultiPolygon::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRMultiPolygon@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRMultiPolygon@@QAEAAV0@ABV0@@Z PROC		; OGRMultiPolygon::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??4OGRMultiPolygon@@QAEAAV0@ABV0@@Z ENDP		; OGRMultiPolygon::operator=
_TEXT	ENDS
PUBLIC	??_GOGRMultiPolygon@@UAEPAXI@Z			; OGRMultiPolygon::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRMultiPolygon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRMultiPolygon@@UAEPAXI@Z PROC			; OGRMultiPolygon::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN7@scalar@11
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@scalar@11:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRMultiPolygon@@UAEPAXI@Z ENDP			; OGRMultiPolygon::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRMultiPolygon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRMultiPolygon@@UAEPAXI@Z PROC			; OGRMultiPolygon::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@11
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRMultiPolygon@@UAE@XZ
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@11
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@11:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@11:
	call	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
	test	bl, 1
	je	SHORT $LN1@vector@11
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@11:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRMultiPolygon@@UAEPAXI@Z ENDP			; OGRMultiPolygon::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1OGRMultiPoint@@UAE@XZ			; OGRMultiPoint::~OGRMultiPoint
; Function compile flags: /Ogtp
;	COMDAT ??1OGRMultiPoint@@UAE@XZ
_TEXT	SEGMENT
??1OGRMultiPoint@@UAE@XZ PROC				; OGRMultiPoint::~OGRMultiPoint, COMDAT
; _this$ = ecx
	jmp	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
??1OGRMultiPoint@@UAE@XZ ENDP				; OGRMultiPoint::~OGRMultiPoint
_TEXT	ENDS
PUBLIC	??_7OGRMultiPoint@@6B@				; OGRMultiPoint::`vftable'
PUBLIC	??0OGRMultiPoint@@QAE@ABV0@@Z			; OGRMultiPoint::OGRMultiPoint
PUBLIC	??_R4OGRMultiPoint@@6B@				; OGRMultiPoint::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRMultiPoint@@@8			; OGRMultiPoint `RTTI Type Descriptor'
PUBLIC	??_R3OGRMultiPoint@@8				; OGRMultiPoint::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRMultiPoint@@8				; OGRMultiPoint::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRMultiPoint@@8			; OGRMultiPoint::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRMultiPoint@@UAEPAXI@Z			; OGRMultiPoint::`vector deleting destructor'
EXTRN	?clone@OGRMultiPoint@@UBEPAVOGRGeometry@@XZ:PROC ; OGRMultiPoint::clone
EXTRN	?importFromWkt@OGRMultiPoint@@UAEHPAPAD@Z:PROC	; OGRMultiPoint::importFromWkt
EXTRN	?exportToWkt@OGRMultiPoint@@UBEHPAPAD@Z:PROC	; OGRMultiPoint::exportToWkt
EXTRN	?getGeometryType@OGRMultiPoint@@UBE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRMultiPoint::getGeometryType
EXTRN	?getGeometryName@OGRMultiPoint@@UBEPBDXZ:PROC	; OGRMultiPoint::getGeometryName
EXTRN	?addGeometryDirectly@OGRMultiPoint@@UAEHPAVOGRGeometry@@@Z:PROC ; OGRMultiPoint::addGeometryDirectly
;	COMDAT ??_R1A@?0A@EA@OGRMultiPoint@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRMultiPoint@@8 DD FLAT:??_R0?AVOGRMultiPoint@@@8 ; OGRMultiPoint::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRMultiPoint@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRMultiPoint@@8
rdata$r	SEGMENT
??_R2OGRMultiPoint@@8 DD FLAT:??_R1A@?0A@EA@OGRMultiPoint@@8 ; OGRMultiPoint::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRGeometryCollection@@8
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRMultiPoint@@8
rdata$r	SEGMENT
??_R3OGRMultiPoint@@8 DD 00H				; OGRMultiPoint::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2OGRMultiPoint@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRMultiPoint@@@8
_DATA	SEGMENT
??_R0?AVOGRMultiPoint@@@8 DD FLAT:??_7type_info@@6B@	; OGRMultiPoint `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRMultiPoint@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRMultiPoint@@6B@
rdata$r	SEGMENT
??_R4OGRMultiPoint@@6B@ DD 00H				; OGRMultiPoint::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRMultiPoint@@@8
	DD	FLAT:??_R3OGRMultiPoint@@8
rdata$r	ENDS
;	COMDAT ??_7OGRMultiPoint@@6B@
CONST	SEGMENT
??_7OGRMultiPoint@@6B@ DD FLAT:??_R4OGRMultiPoint@@6B@	; OGRMultiPoint::`vftable'
	DD	FLAT:??_EOGRMultiPoint@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?clone@OGRMultiPoint@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRGeometryCollection@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRGeometryCollection@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRMultiPoint@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRMultiPoint@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRMultiPoint@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRMultiPoint@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRGeometryCollection@@UAEXH@Z
	DD	FLAT:?transform@OGRGeometryCollection@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRGeometryCollection@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRGeometryCollection@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?get_Length@OGRGeometryCollection@@UBENXZ
	DD	FLAT:?get_Area@OGRGeometryCollection@@UBENXZ
	DD	FLAT:?addGeometry@OGRGeometryCollection@@UAEHPBVOGRGeometry@@@Z
	DD	FLAT:?addGeometryDirectly@OGRMultiPoint@@UAEHPAVOGRGeometry@@@Z
	DD	FLAT:?removeGeometry@OGRGeometryCollection@@UAEHHH@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRMultiPoint@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRMultiPoint@@QAE@ABV0@@Z PROC			; OGRMultiPoint::OGRMultiPoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometryCollection@@6B@
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRMultiPoint@@6B@
	pop	ebp
	ret	4
??0OGRMultiPoint@@QAE@ABV0@@Z ENDP			; OGRMultiPoint::OGRMultiPoint
_TEXT	ENDS
PUBLIC	??4OGRMultiPoint@@QAEAAV0@ABV0@@Z		; OGRMultiPoint::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRMultiPoint@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRMultiPoint@@QAEAAV0@ABV0@@Z PROC			; OGRMultiPoint::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??4OGRMultiPoint@@QAEAAV0@ABV0@@Z ENDP			; OGRMultiPoint::operator=
_TEXT	ENDS
PUBLIC	??_GOGRMultiPoint@@UAEPAXI@Z			; OGRMultiPoint::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRMultiPoint@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRMultiPoint@@UAEPAXI@Z PROC			; OGRMultiPoint::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN7@scalar@12
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@scalar@12:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRMultiPoint@@UAEPAXI@Z ENDP			; OGRMultiPoint::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRMultiPoint@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRMultiPoint@@UAEPAXI@Z PROC			; OGRMultiPoint::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@12
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRMultiPoint@@UAE@XZ
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@12
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@12:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@12:
	call	??1OGRGeometryCollection@@UAE@XZ	; OGRGeometryCollection::~OGRGeometryCollection
	test	bl, 1
	je	SHORT $LN1@vector@12
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@12:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRMultiPoint@@UAEPAXI@Z ENDP			; OGRMultiPoint::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRMultiLineString@@6B@			; OGRMultiLineString::`vftable'
PUBLIC	??0OGRMultiLineString@@QAE@ABV0@@Z		; OGRMultiLineString::OGRMultiLineString
PUBLIC	??_R4OGRMultiLineString@@6B@			; OGRMultiLineString::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRMultiLineString@@@8			; OGRMultiLineString `RTTI Type Descriptor'
PUBLIC	??_R3OGRMultiLineString@@8			; OGRMultiLineString::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRMultiLineString@@8			; OGRMultiLineString::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRMultiLineString@@8		; OGRMultiLineString::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRMultiLineString@@UAEPAXI@Z		; OGRMultiLineString::`vector deleting destructor'
EXTRN	?clone@OGRMultiLineString@@UBEPAVOGRGeometry@@XZ:PROC ; OGRMultiLineString::clone
EXTRN	?importFromWkt@OGRMultiLineString@@UAEHPAPAD@Z:PROC ; OGRMultiLineString::importFromWkt
EXTRN	?exportToWkt@OGRMultiLineString@@UBEHPAPAD@Z:PROC ; OGRMultiLineString::exportToWkt
EXTRN	?getGeometryType@OGRMultiLineString@@UBE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRMultiLineString::getGeometryType
EXTRN	?getGeometryName@OGRMultiLineString@@UBEPBDXZ:PROC ; OGRMultiLineString::getGeometryName
EXTRN	?addGeometryDirectly@OGRMultiLineString@@UAEHPAVOGRGeometry@@@Z:PROC ; OGRMultiLineString::addGeometryDirectly
;	COMDAT ??_R1A@?0A@EA@OGRMultiLineString@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRMultiLineString@@8 DD FLAT:??_R0?AVOGRMultiLineString@@@8 ; OGRMultiLineString::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRMultiLineString@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRMultiLineString@@8
rdata$r	SEGMENT
??_R2OGRMultiLineString@@8 DD FLAT:??_R1A@?0A@EA@OGRMultiLineString@@8 ; OGRMultiLineString::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRGeometryCollection@@8
	DD	FLAT:??_R1A@?0A@EA@OGRGeometry@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRMultiLineString@@8
rdata$r	SEGMENT
??_R3OGRMultiLineString@@8 DD 00H			; OGRMultiLineString::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2OGRMultiLineString@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRMultiLineString@@@8
_DATA	SEGMENT
??_R0?AVOGRMultiLineString@@@8 DD FLAT:??_7type_info@@6B@ ; OGRMultiLineString `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRMultiLineString@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRMultiLineString@@6B@
rdata$r	SEGMENT
??_R4OGRMultiLineString@@6B@ DD 00H			; OGRMultiLineString::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRMultiLineString@@@8
	DD	FLAT:??_R3OGRMultiLineString@@8
rdata$r	ENDS
;	COMDAT ??_7OGRMultiLineString@@6B@
CONST	SEGMENT
??_7OGRMultiLineString@@6B@ DD FLAT:??_R4OGRMultiLineString@@6B@ ; OGRMultiLineString::`vftable'
	DD	FLAT:??_EOGRMultiLineString@@UAEPAXI@Z
	DD	FLAT:?getDimension@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?getCoordinateDimension@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsEmpty@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?IsValid@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsSimple@OGRGeometry@@UBEHXZ
	DD	FLAT:?IsRing@OGRGeometry@@UBEHXZ
	DD	FLAT:?empty@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?clone@OGRMultiLineString@@UBEPAVOGRGeometry@@XZ
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope3D@@@Z
	DD	FLAT:?getEnvelope@OGRGeometryCollection@@UBEXPAVOGREnvelope@@@Z
	DD	FLAT:?WkbSize@OGRGeometryCollection@@UBEHXZ
	DD	FLAT:?importFromWkb@OGRGeometryCollection@@UAEHPAEH@Z
	DD	FLAT:?exportToWkb@OGRGeometryCollection@@UBEHW4OGRwkbByteOrder@@PAE@Z
	DD	FLAT:?importFromWkt@OGRMultiLineString@@UAEHPAPAD@Z
	DD	FLAT:?exportToWkt@OGRMultiLineString@@UBEHPAPAD@Z
	DD	FLAT:?getGeometryType@OGRMultiLineString@@UBE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:?getGeometryName@OGRMultiLineString@@UBEPBDXZ
	DD	FLAT:?dumpReadable@OGRGeometry@@UBEXPAU_iobuf@@PBDPAPAD@Z
	DD	FLAT:?flattenTo2D@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?exportToGML@OGRGeometry@@UBEPADPBQBD@Z
	DD	FLAT:?exportToKML@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToJson@OGRGeometry@@UBEPADXZ
	DD	FLAT:?exportToGEOS@OGRGeometry@@UBEPAUGEOSGeom_t@@XZ
	DD	FLAT:?closeRings@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?setCoordinateDimension@OGRGeometryCollection@@UAEXH@Z
	DD	FLAT:?transform@OGRGeometryCollection@@UAEHPAVOGRCoordinateTransformation@@@Z
	DD	FLAT:?segmentize@OGRGeometryCollection@@UAEXN@Z
	DD	FLAT:?Intersects@OGRGeometry@@UBEHPAV1@@Z
	DD	FLAT:?Equals@OGRGeometryCollection@@UBEHPAVOGRGeometry@@@Z
	DD	FLAT:?Disjoint@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Touches@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Crosses@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Within@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Contains@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Overlaps@OGRGeometry@@UBEHPBV1@@Z
	DD	FLAT:?Boundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Distance@OGRGeometry@@UBENPBV1@@Z
	DD	FLAT:?ConvexHull@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Buffer@OGRGeometry@@UBEPAV1@NH@Z
	DD	FLAT:?Intersection@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Union@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?UnionCascaded@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?Difference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?SymDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?Centroid@OGRGeometry@@UBEHPAVOGRPoint@@@Z
	DD	FLAT:?Simplify@OGRGeometry@@UBEPAV1@N@Z
	DD	FLAT:?Polygonize@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?SymmetricDifference@OGRGeometry@@UBEPAV1@PBV1@@Z
	DD	FLAT:?getBoundary@OGRGeometry@@UBEPAV1@XZ
	DD	FLAT:?swapXY@OGRGeometryCollection@@UAEXXZ
	DD	FLAT:?get_Length@OGRGeometryCollection@@UBENXZ
	DD	FLAT:?get_Area@OGRGeometryCollection@@UBENXZ
	DD	FLAT:?addGeometry@OGRGeometryCollection@@UAEHPBVOGRGeometry@@@Z
	DD	FLAT:?addGeometryDirectly@OGRMultiLineString@@UAEHPAVOGRGeometry@@@Z
	DD	FLAT:?removeGeometry@OGRGeometryCollection@@UAEHHH@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRMultiLineString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRMultiLineString@@QAE@ABV0@@Z PROC			; OGRMultiLineString::OGRMultiLineString, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometry@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], OFFSET ??_7OGRGeometryCollection@@6B@
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRMultiLineString@@6B@
	pop	ebp
	ret	4
??0OGRMultiLineString@@QAE@ABV0@@Z ENDP			; OGRMultiLineString::OGRMultiLineString
_TEXT	ENDS
PUBLIC	??4OGRMultiLineString@@QAEAAV0@ABV0@@Z		; OGRMultiLineString::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRMultiLineString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRMultiLineString@@QAEAAV0@ABV0@@Z PROC		; OGRMultiLineString::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??4OGRMultiLineString@@QAEAAV0@ABV0@@Z ENDP		; OGRMultiLineString::operator=
_TEXT	ENDS
PUBLIC	??_GOGRMultiLineString@@UAEPAXI@Z		; OGRMultiLineString::`scalar deleting destructor'
EXTRN	??1OGRMultiLineString@@UAE@XZ:PROC		; OGRMultiLineString::~OGRMultiLineString
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRMultiLineString@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRMultiLineString@@UAEPAXI@Z PROC			; OGRMultiLineString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRMultiLineString@@UAE@XZ		; OGRMultiLineString::~OGRMultiLineString
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@13
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@13:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRMultiLineString@@UAEPAXI@Z ENDP			; OGRMultiLineString::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRMultiLineString@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRMultiLineString@@UAEPAXI@Z PROC			; OGRMultiLineString::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@13
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRMultiLineString@@UAE@XZ	; OGRMultiLineString::~OGRMultiLineString
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@13
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@13:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@13:
	call	??1OGRMultiLineString@@UAE@XZ		; OGRMultiLineString::~OGRMultiLineString
	test	bl, 1
	je	SHORT $LN1@vector@13
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@13:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRMultiLineString@@UAEPAXI@Z ENDP			; OGRMultiLineString::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??4OGRGeometryFactory@@QAEAAV0@ABV0@@Z		; OGRGeometryFactory::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRGeometryFactory@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRGeometryFactory@@QAEAAV0@ABV0@@Z PROC		; OGRGeometryFactory::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	ret	4
??4OGRGeometryFactory@@QAEAAV0@ABV0@@Z ENDP		; OGRGeometryFactory::operator=
_TEXT	ENDS
PUBLIC	??4?$_String_val@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$_String_val@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4?$_String_val@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	push	edi
	mov	eax, ecx
	mov	ecx, 7
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4?$_String_val@DV?$allocator@D@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?size@CPLStringList@@QBEHXZ			; CPLStringList::size
EXTRN	?Count@CPLStringList@@QBEHXZ:PROC		; CPLStringList::Count
; Function compile flags: /Ogtp
;	COMDAT ?size@CPLStringList@@QBEHXZ
_TEXT	SEGMENT
?size@CPLStringList@@QBEHXZ PROC			; CPLStringList::size, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\cpl_string.h
; Line 303
	jmp	?Count@CPLStringList@@QBEHXZ		; CPLStringList::Count
?size@CPLStringList@@QBEHXZ ENDP			; CPLStringList::size
_TEXT	ENDS
PUBLIC	?InsertString@CPLStringList@@QAEAAV1@HPBD@Z	; CPLStringList::InsertString
EXTRN	?InsertStringDirectly@CPLStringList@@QAEAAV1@HPAD@Z:PROC ; CPLStringList::InsertStringDirectly
EXTRN	_CPLStrdup:PROC
; Function compile flags: /Ogtp
;	COMDAT ?InsertString@CPLStringList@@QAEAAV1@HPBD@Z
_TEXT	SEGMENT
_nInsertAtLineNo$ = 8					; size = 4
_pszNewLine$ = 12					; size = 4
?InsertString@CPLStringList@@QAEAAV1@HPBD@Z PROC	; CPLStringList::InsertString, COMDAT
; _this$ = ecx
; Line 310
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszNewLine$[ebp]
	push	esi
	push	eax
	mov	esi, ecx
	call	_CPLStrdup
	mov	ecx, DWORD PTR _nInsertAtLineNo$[ebp]
	add	esp, 4
	push	eax
	push	ecx
	mov	ecx, esi
	call	?InsertStringDirectly@CPLStringList@@QAEAAV1@HPAD@Z ; CPLStringList::InsertStringDirectly
	pop	esi
	pop	ebp
	ret	8
?InsertString@CPLStringList@@QAEAAV1@HPBD@Z ENDP	; CPLStringList::InsertString
_TEXT	ENDS
PUBLIC	?FindString@CPLStringList@@QBEHPBD@Z		; CPLStringList::FindString
EXTRN	_CSLFindString:PROC
; Function compile flags: /Ogtp
;	COMDAT ?FindString@CPLStringList@@QBEHPBD@Z
_TEXT	SEGMENT
_pszTarget$ = 8						; size = 4
?FindString@CPLStringList@@QBEHPBD@Z PROC		; CPLStringList::FindString, COMDAT
; _this$ = ecx
; Line 317
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszTarget$[ebp]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	push	ecx
	call	_CSLFindString
	add	esp, 8
	pop	ebp
	ret	4
?FindString@CPLStringList@@QBEHPBD@Z ENDP		; CPLStringList::FindString
_TEXT	ENDS
PUBLIC	?PartialFindString@CPLStringList@@QBEHPBD@Z	; CPLStringList::PartialFindString
EXTRN	_CSLPartialFindString:PROC
; Function compile flags: /Ogtp
;	COMDAT ?PartialFindString@CPLStringList@@QBEHPBD@Z
_TEXT	SEGMENT
_pszNeedle$ = 8						; size = 4
?PartialFindString@CPLStringList@@QBEHPBD@Z PROC	; CPLStringList::PartialFindString, COMDAT
; _this$ = ecx
; Line 319
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszNeedle$[ebp]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	push	ecx
	call	_CSLPartialFindString
	add	esp, 8
	pop	ebp
	ret	4
?PartialFindString@CPLStringList@@QBEHPBD@Z ENDP	; CPLStringList::PartialFindString
_TEXT	ENDS
PUBLIC	??4CPLStringList@@QAEAAV0@PAPAD@Z		; CPLStringList::operator=
EXTRN	?Assign@CPLStringList@@QAEAAV1@PAPADH@Z:PROC	; CPLStringList::Assign
; Function compile flags: /Ogtp
;	COMDAT ??4CPLStringList@@QAEAAV0@PAPAD@Z
_TEXT	SEGMENT
_papszListIn$ = 8					; size = 4
??4CPLStringList@@QAEAAV0@PAPAD@Z PROC			; CPLStringList::operator=, COMDAT
; _this$ = ecx
; Line 329
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _papszListIn$[ebp]
	push	1
	push	eax
	call	?Assign@CPLStringList@@QAEAAV1@PAPADH@Z	; CPLStringList::Assign
	pop	ebp
	ret	4
??4CPLStringList@@QAEAAV0@PAPAD@Z ENDP			; CPLStringList::operator=
_TEXT	ENDS
PUBLIC	??ACPLStringList@@QAEPADI@Z			; CPLStringList::operator[]
EXTRN	??ACPLStringList@@QAEPADH@Z:PROC		; CPLStringList::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??ACPLStringList@@QAEPADI@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??ACPLStringList@@QAEPADI@Z PROC			; CPLStringList::operator[], COMDAT
; _this$ = ecx
; Line 333
	push	ebp
	mov	ebp, esp
	pop	ebp
	jmp	??ACPLStringList@@QAEPADH@Z		; CPLStringList::operator[]
??ACPLStringList@@QAEPADI@Z ENDP			; CPLStringList::operator[]
_TEXT	ENDS
PUBLIC	??ACPLStringList@@QBEPBDI@Z			; CPLStringList::operator[]
EXTRN	??ACPLStringList@@QBEPBDH@Z:PROC		; CPLStringList::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??ACPLStringList@@QBEPBDI@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??ACPLStringList@@QBEPBDI@Z PROC			; CPLStringList::operator[], COMDAT
; _this$ = ecx
; Line 335
	push	ebp
	mov	ebp, esp
	pop	ebp
	jmp	??ACPLStringList@@QBEPBDH@Z		; CPLStringList::operator[]
??ACPLStringList@@QBEPBDI@Z ENDP			; CPLStringList::operator[]
_TEXT	ENDS
PUBLIC	?List@CPLStringList@@QAEPAPADXZ			; CPLStringList::List
; Function compile flags: /Ogtp
;	COMDAT ?List@CPLStringList@@QAEPAPADXZ
_TEXT	SEGMENT
?List@CPLStringList@@QAEPAPADXZ PROC			; CPLStringList::List, COMDAT
; _this$ = ecx
; Line 337
	mov	eax, DWORD PTR [ecx]
	ret	0
?List@CPLStringList@@QAEPAPADXZ ENDP			; CPLStringList::List
_TEXT	ENDS
PUBLIC	?IsSorted@CPLStringList@@QBEHXZ			; CPLStringList::IsSorted
; Function compile flags: /Ogtp
;	COMDAT ?IsSorted@CPLStringList@@QBEHXZ
_TEXT	SEGMENT
?IsSorted@CPLStringList@@QBEHXZ PROC			; CPLStringList::IsSorted, COMDAT
; _this$ = ecx
; Line 341
	mov	eax, DWORD PTR [ecx+16]
	ret	0
?IsSorted@CPLStringList@@QBEHXZ ENDP			; CPLStringList::IsSorted
_TEXT	ENDS
PUBLIC	??BCPLStringList@@QAEPAPADXZ			; CPLStringList::operator char * *
; Function compile flags: /Ogtp
;	COMDAT ??BCPLStringList@@QAEPAPADXZ
_TEXT	SEGMENT
??BCPLStringList@@QAEPAPADXZ PROC			; CPLStringList::operator char * *, COMDAT
; _this$ = ecx
; Line 343
	mov	eax, DWORD PTR [ecx]
	ret	0
??BCPLStringList@@QAEPAPADXZ ENDP			; CPLStringList::operator char * *
_TEXT	ENDS
PUBLIC	?GetDataSetStyleTable@OGRStyleMgr@@QAEPAVOGRStyleTable@@XZ ; OGRStyleMgr::GetDataSetStyleTable
; Function compile flags: /Ogtp
;	COMDAT ?GetDataSetStyleTable@OGRStyleMgr@@QAEPAVOGRStyleTable@@XZ
_TEXT	SEGMENT
?GetDataSetStyleTable@OGRStyleMgr@@QAEPAVOGRStyleTable@@XZ PROC ; OGRStyleMgr::GetDataSetStyleTable, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogr_featurestyle.h
; Line 150
	mov	eax, DWORD PTR [ecx]
	ret	0
?GetDataSetStyleTable@OGRStyleMgr@@QAEPAVOGRStyleTable@@XZ ENDP ; OGRStyleMgr::GetDataSetStyleTable
_TEXT	ENDS
PUBLIC	??4OGRStyleMgr@@QAEAAV0@ABV0@@Z			; OGRStyleMgr::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRStyleMgr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRStyleMgr@@QAEAAV0@ABV0@@Z PROC			; OGRStyleMgr::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	pop	ebp
	ret	4
??4OGRStyleMgr@@QAEAAV0@ABV0@@Z ENDP			; OGRStyleMgr::operator=
_TEXT	ENDS
PUBLIC	??_FOGRStyleMgr@@QAEXXZ				; OGRStyleMgr::`default constructor closure'
EXTRN	??0OGRStyleMgr@@QAE@PAVOGRStyleTable@@@Z:PROC	; OGRStyleMgr::OGRStyleMgr
; Function compile flags: /Ogtp
;	COMDAT ??_FOGRStyleMgr@@QAEXXZ
_TEXT	SEGMENT
??_FOGRStyleMgr@@QAEXXZ PROC				; OGRStyleMgr::`default constructor closure', COMDAT
; _this$ = ecx
	push	0
	call	??0OGRStyleMgr@@QAE@PAVOGRStyleTable@@@Z ; OGRStyleMgr::OGRStyleMgr
	ret	0
??_FOGRStyleMgr@@QAEXXZ ENDP				; OGRStyleMgr::`default constructor closure'
_TEXT	ENDS
PUBLIC	??_7OGRStyleTool@@6B@				; OGRStyleTool::`vftable'
PUBLIC	??0OGRStyleTool@@QAE@XZ				; OGRStyleTool::OGRStyleTool
PUBLIC	??_R4OGRStyleTool@@6B@				; OGRStyleTool::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRStyleTool@@@8			; OGRStyleTool `RTTI Type Descriptor'
PUBLIC	??_R3OGRStyleTool@@8				; OGRStyleTool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRStyleTool@@8				; OGRStyleTool::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRStyleTool@@8			; OGRStyleTool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRStyleTool@@UAEPAXI@Z			; OGRStyleTool::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@OGRStyleTool@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRStyleTool@@8 DD FLAT:??_R0?AVOGRStyleTool@@@8 ; OGRStyleTool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRStyleTool@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRStyleTool@@8
rdata$r	SEGMENT
??_R2OGRStyleTool@@8 DD FLAT:??_R1A@?0A@EA@OGRStyleTool@@8 ; OGRStyleTool::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRStyleTool@@8
rdata$r	SEGMENT
??_R3OGRStyleTool@@8 DD 00H				; OGRStyleTool::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRStyleTool@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRStyleTool@@@8
_DATA	SEGMENT
??_R0?AVOGRStyleTool@@@8 DD FLAT:??_7type_info@@6B@	; OGRStyleTool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRStyleTool@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRStyleTool@@6B@
rdata$r	SEGMENT
??_R4OGRStyleTool@@6B@ DD 00H				; OGRStyleTool::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRStyleTool@@@8
	DD	FLAT:??_R3OGRStyleTool@@8
rdata$r	ENDS
;	COMDAT ??_7OGRStyleTool@@6B@
CONST	SEGMENT
??_7OGRStyleTool@@6B@ DD FLAT:??_R4OGRStyleTool@@6B@	; OGRStyleTool::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:??_EOGRStyleTool@@UAEPAXI@Z
	DD	FLAT:__purecall
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRStyleTool@@QAE@XZ
_TEXT	SEGMENT
??0OGRStyleTool@@QAE@XZ PROC				; OGRStyleTool::OGRStyleTool, COMDAT
; _this$ = ecx
; Line 178
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleTool@@6B@
	ret	0
??0OGRStyleTool@@QAE@XZ ENDP				; OGRStyleTool::OGRStyleTool
_TEXT	ENDS
PUBLIC	?IsStyleModified@OGRStyleTool@@QAEHXZ		; OGRStyleTool::IsStyleModified
; Function compile flags: /Ogtp
;	COMDAT ?IsStyleModified@OGRStyleTool@@QAEHXZ
_TEXT	SEGMENT
?IsStyleModified@OGRStyleTool@@QAEHXZ PROC		; OGRStyleTool::IsStyleModified, COMDAT
; _this$ = ecx
; Line 186
	mov	eax, DWORD PTR [ecx+8]
	ret	0
?IsStyleModified@OGRStyleTool@@QAEHXZ ENDP		; OGRStyleTool::IsStyleModified
_TEXT	ENDS
PUBLIC	?StyleModified@OGRStyleTool@@QAEXXZ		; OGRStyleTool::StyleModified
; Function compile flags: /Ogtp
;	COMDAT ?StyleModified@OGRStyleTool@@QAEXXZ
_TEXT	SEGMENT
?StyleModified@OGRStyleTool@@QAEXXZ PROC		; OGRStyleTool::StyleModified, COMDAT
; _this$ = ecx
; Line 187
	mov	DWORD PTR [ecx+8], 1
	ret	0
?StyleModified@OGRStyleTool@@QAEXXZ ENDP		; OGRStyleTool::StyleModified
_TEXT	ENDS
PUBLIC	?IsStyleParsed@OGRStyleTool@@QAEHXZ		; OGRStyleTool::IsStyleParsed
; Function compile flags: /Ogtp
;	COMDAT ?IsStyleParsed@OGRStyleTool@@QAEHXZ
_TEXT	SEGMENT
?IsStyleParsed@OGRStyleTool@@QAEHXZ PROC		; OGRStyleTool::IsStyleParsed, COMDAT
; _this$ = ecx
; Line 189
	mov	eax, DWORD PTR [ecx+12]
	ret	0
?IsStyleParsed@OGRStyleTool@@QAEHXZ ENDP		; OGRStyleTool::IsStyleParsed
_TEXT	ENDS
PUBLIC	?StyleParsed@OGRStyleTool@@QAEXXZ		; OGRStyleTool::StyleParsed
; Function compile flags: /Ogtp
;	COMDAT ?StyleParsed@OGRStyleTool@@QAEXXZ
_TEXT	SEGMENT
?StyleParsed@OGRStyleTool@@QAEXXZ PROC			; OGRStyleTool::StyleParsed, COMDAT
; _this$ = ecx
; Line 190
	mov	DWORD PTR [ecx+12], 1
	ret	0
?StyleParsed@OGRStyleTool@@QAEXXZ ENDP			; OGRStyleTool::StyleParsed
_TEXT	ENDS
PUBLIC	?GetUnit@OGRStyleTool@@QAE?AW4ogr_style_tool_units_id@@XZ ; OGRStyleTool::GetUnit
; Function compile flags: /Ogtp
;	COMDAT ?GetUnit@OGRStyleTool@@QAE?AW4ogr_style_tool_units_id@@XZ
_TEXT	SEGMENT
?GetUnit@OGRStyleTool@@QAE?AW4ogr_style_tool_units_id@@XZ PROC ; OGRStyleTool::GetUnit, COMDAT
; _this$ = ecx
; Line 199
	mov	eax, DWORD PTR [ecx+24]
	ret	0
?GetUnit@OGRStyleTool@@QAE?AW4ogr_style_tool_units_id@@XZ ENDP ; OGRStyleTool::GetUnit
_TEXT	ENDS
PUBLIC	??0OGRStyleTool@@QAE@ABV0@@Z			; OGRStyleTool::OGRStyleTool
; Function compile flags: /Ogtp
;	COMDAT ??0OGRStyleTool@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRStyleTool@@QAE@ABV0@@Z PROC			; OGRStyleTool::OGRStyleTool, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleTool@@6B@
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	ecx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], ecx
	pop	ebp
	ret	4
??0OGRStyleTool@@QAE@ABV0@@Z ENDP			; OGRStyleTool::OGRStyleTool
_TEXT	ENDS
PUBLIC	??4OGRStyleTool@@QAEAAV0@ABV0@@Z		; OGRStyleTool::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRStyleTool@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRStyleTool@@QAEAAV0@ABV0@@Z PROC			; OGRStyleTool::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	ecx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], ecx
	pop	ebp
	ret	4
??4OGRStyleTool@@QAEAAV0@ABV0@@Z ENDP			; OGRStyleTool::operator=
_TEXT	ENDS
PUBLIC	??_GOGRStyleTool@@UAEPAXI@Z			; OGRStyleTool::`scalar deleting destructor'
EXTRN	??1OGRStyleTool@@UAE@XZ:PROC			; OGRStyleTool::~OGRStyleTool
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRStyleTool@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRStyleTool@@UAEPAXI@Z PROC			; OGRStyleTool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRStyleTool@@UAE@XZ			; OGRStyleTool::~OGRStyleTool
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@14
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@14:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRStyleTool@@UAEPAXI@Z ENDP			; OGRStyleTool::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRStyleTool@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRStyleTool@@UAEPAXI@Z PROC			; OGRStyleTool::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@14
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRStyleTool@@UAE@XZ		; OGRStyleTool::~OGRStyleTool
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	40					; 00000028H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@14
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@14:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@14:
	call	??1OGRStyleTool@@UAE@XZ			; OGRStyleTool::~OGRStyleTool
	test	bl, 1
	je	SHORT $LN1@vector@14
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@14:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRStyleTool@@UAEPAXI@Z ENDP			; OGRStyleTool::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?Color@OGRStylePen@@QAEPBDAAH@Z			; OGRStylePen::Color
EXTRN	?GetParamStr@OGRStylePen@@QAEPBDW4ogr_style_tool_param_pen_id@@AAH@Z:PROC ; OGRStylePen::GetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?Color@OGRStylePen@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Color@OGRStylePen@@QAEPBDAAH@Z PROC			; OGRStylePen::Color, COMDAT
; _this$ = ecx
; Line 259
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	0
	call	?GetParamStr@OGRStylePen@@QAEPBDW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamStr
	pop	ebp
	ret	4
?Color@OGRStylePen@@QAEPBDAAH@Z ENDP			; OGRStylePen::Color
_TEXT	ENDS
PUBLIC	?SetColor@OGRStylePen@@QAEXPBD@Z		; OGRStylePen::SetColor
EXTRN	?SetParamStr@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@PBD@Z:PROC ; OGRStylePen::SetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?SetColor@OGRStylePen@@QAEXPBD@Z
_TEXT	SEGMENT
_pszColor$ = 8						; size = 4
?SetColor@OGRStylePen@@QAEXPBD@Z PROC			; OGRStylePen::SetColor, COMDAT
; _this$ = ecx
; Line 260
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszColor$[ebp]
	push	eax
	push	0
	call	?SetParamStr@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@PBD@Z ; OGRStylePen::SetParamStr
	pop	ebp
	ret	4
?SetColor@OGRStylePen@@QAEXPBD@Z ENDP			; OGRStylePen::SetColor
_TEXT	ENDS
PUBLIC	?Width@OGRStylePen@@QAENAAH@Z			; OGRStylePen::Width
EXTRN	?GetParamDbl@OGRStylePen@@QAENW4ogr_style_tool_param_pen_id@@AAH@Z:PROC ; OGRStylePen::GetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?Width@OGRStylePen@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Width@OGRStylePen@@QAENAAH@Z PROC			; OGRStylePen::Width, COMDAT
; _this$ = ecx
; Line 261
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	1
	call	?GetParamDbl@OGRStylePen@@QAENW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamDbl
	pop	ebp
	ret	4
?Width@OGRStylePen@@QAENAAH@Z ENDP			; OGRStylePen::Width
_TEXT	ENDS
PUBLIC	?SetWidth@OGRStylePen@@QAEXN@Z			; OGRStylePen::SetWidth
EXTRN	?SetParamDbl@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@N@Z:PROC ; OGRStylePen::SetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?SetWidth@OGRStylePen@@QAEXN@Z
_TEXT	SEGMENT
_dfWidth$ = 8						; size = 8
?SetWidth@OGRStylePen@@QAEXN@Z PROC			; OGRStylePen::SetWidth, COMDAT
; _this$ = ecx
; Line 262
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfWidth$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	1
	call	?SetParamDbl@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@N@Z ; OGRStylePen::SetParamDbl
	pop	ebp
	ret	8
?SetWidth@OGRStylePen@@QAEXN@Z ENDP			; OGRStylePen::SetWidth
_TEXT	ENDS
PUBLIC	?Pattern@OGRStylePen@@QAEPBDAAH@Z		; OGRStylePen::Pattern
; Function compile flags: /Ogtp
;	COMDAT ?Pattern@OGRStylePen@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Pattern@OGRStylePen@@QAEPBDAAH@Z PROC			; OGRStylePen::Pattern, COMDAT
; _this$ = ecx
; Line 263
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	2
	call	?GetParamStr@OGRStylePen@@QAEPBDW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamStr
	pop	ebp
	ret	4
?Pattern@OGRStylePen@@QAEPBDAAH@Z ENDP			; OGRStylePen::Pattern
_TEXT	ENDS
PUBLIC	?SetPattern@OGRStylePen@@QAEXPBD@Z		; OGRStylePen::SetPattern
; Function compile flags: /Ogtp
;	COMDAT ?SetPattern@OGRStylePen@@QAEXPBD@Z
_TEXT	SEGMENT
_pszPattern$ = 8					; size = 4
?SetPattern@OGRStylePen@@QAEXPBD@Z PROC			; OGRStylePen::SetPattern, COMDAT
; _this$ = ecx
; Line 264
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszPattern$[ebp]
	push	eax
	push	2
	call	?SetParamStr@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@PBD@Z ; OGRStylePen::SetParamStr
	pop	ebp
	ret	4
?SetPattern@OGRStylePen@@QAEXPBD@Z ENDP			; OGRStylePen::SetPattern
_TEXT	ENDS
PUBLIC	?Id@OGRStylePen@@QAEPBDAAH@Z			; OGRStylePen::Id
; Function compile flags: /Ogtp
;	COMDAT ?Id@OGRStylePen@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Id@OGRStylePen@@QAEPBDAAH@Z PROC			; OGRStylePen::Id, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	3
	call	?GetParamStr@OGRStylePen@@QAEPBDW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamStr
	pop	ebp
	ret	4
?Id@OGRStylePen@@QAEPBDAAH@Z ENDP			; OGRStylePen::Id
_TEXT	ENDS
PUBLIC	?SetId@OGRStylePen@@QAEXPBD@Z			; OGRStylePen::SetId
; Function compile flags: /Ogtp
;	COMDAT ?SetId@OGRStylePen@@QAEXPBD@Z
_TEXT	SEGMENT
_pszId$ = 8						; size = 4
?SetId@OGRStylePen@@QAEXPBD@Z PROC			; OGRStylePen::SetId, COMDAT
; _this$ = ecx
; Line 266
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszId$[ebp]
	push	eax
	push	3
	call	?SetParamStr@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@PBD@Z ; OGRStylePen::SetParamStr
	pop	ebp
	ret	4
?SetId@OGRStylePen@@QAEXPBD@Z ENDP			; OGRStylePen::SetId
_TEXT	ENDS
PUBLIC	?PerpendicularOffset@OGRStylePen@@QAENAAH@Z	; OGRStylePen::PerpendicularOffset
; Function compile flags: /Ogtp
;	COMDAT ?PerpendicularOffset@OGRStylePen@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?PerpendicularOffset@OGRStylePen@@QAENAAH@Z PROC	; OGRStylePen::PerpendicularOffset, COMDAT
; _this$ = ecx
; Line 267
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	4
	call	?GetParamDbl@OGRStylePen@@QAENW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamDbl
	pop	ebp
	ret	4
?PerpendicularOffset@OGRStylePen@@QAENAAH@Z ENDP	; OGRStylePen::PerpendicularOffset
_TEXT	ENDS
PUBLIC	?SetPerpendicularOffset@OGRStylePen@@QAEXN@Z	; OGRStylePen::SetPerpendicularOffset
; Function compile flags: /Ogtp
;	COMDAT ?SetPerpendicularOffset@OGRStylePen@@QAEXN@Z
_TEXT	SEGMENT
_dfPerp$ = 8						; size = 8
?SetPerpendicularOffset@OGRStylePen@@QAEXN@Z PROC	; OGRStylePen::SetPerpendicularOffset, COMDAT
; _this$ = ecx
; Line 268
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfPerp$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	4
	call	?SetParamDbl@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@N@Z ; OGRStylePen::SetParamDbl
	pop	ebp
	ret	8
?SetPerpendicularOffset@OGRStylePen@@QAEXN@Z ENDP	; OGRStylePen::SetPerpendicularOffset
_TEXT	ENDS
PUBLIC	?Cap@OGRStylePen@@QAEPBDAAH@Z			; OGRStylePen::Cap
; Function compile flags: /Ogtp
;	COMDAT ?Cap@OGRStylePen@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Cap@OGRStylePen@@QAEPBDAAH@Z PROC			; OGRStylePen::Cap, COMDAT
; _this$ = ecx
; Line 269
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	5
	call	?GetParamStr@OGRStylePen@@QAEPBDW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamStr
	pop	ebp
	ret	4
?Cap@OGRStylePen@@QAEPBDAAH@Z ENDP			; OGRStylePen::Cap
_TEXT	ENDS
PUBLIC	?SetCap@OGRStylePen@@QAEXPBD@Z			; OGRStylePen::SetCap
; Function compile flags: /Ogtp
;	COMDAT ?SetCap@OGRStylePen@@QAEXPBD@Z
_TEXT	SEGMENT
_pszCap$ = 8						; size = 4
?SetCap@OGRStylePen@@QAEXPBD@Z PROC			; OGRStylePen::SetCap, COMDAT
; _this$ = ecx
; Line 270
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszCap$[ebp]
	push	eax
	push	5
	call	?SetParamStr@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@PBD@Z ; OGRStylePen::SetParamStr
	pop	ebp
	ret	4
?SetCap@OGRStylePen@@QAEXPBD@Z ENDP			; OGRStylePen::SetCap
_TEXT	ENDS
PUBLIC	?Join@OGRStylePen@@QAEPBDAAH@Z			; OGRStylePen::Join
; Function compile flags: /Ogtp
;	COMDAT ?Join@OGRStylePen@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Join@OGRStylePen@@QAEPBDAAH@Z PROC			; OGRStylePen::Join, COMDAT
; _this$ = ecx
; Line 271
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	6
	call	?GetParamStr@OGRStylePen@@QAEPBDW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamStr
	pop	ebp
	ret	4
?Join@OGRStylePen@@QAEPBDAAH@Z ENDP			; OGRStylePen::Join
_TEXT	ENDS
PUBLIC	?SetJoin@OGRStylePen@@QAEXPBD@Z			; OGRStylePen::SetJoin
; Function compile flags: /Ogtp
;	COMDAT ?SetJoin@OGRStylePen@@QAEXPBD@Z
_TEXT	SEGMENT
_pszJoin$ = 8						; size = 4
?SetJoin@OGRStylePen@@QAEXPBD@Z PROC			; OGRStylePen::SetJoin, COMDAT
; _this$ = ecx
; Line 272
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszJoin$[ebp]
	push	eax
	push	6
	call	?SetParamStr@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@PBD@Z ; OGRStylePen::SetParamStr
	pop	ebp
	ret	4
?SetJoin@OGRStylePen@@QAEXPBD@Z ENDP			; OGRStylePen::SetJoin
_TEXT	ENDS
PUBLIC	?Priority@OGRStylePen@@QAEHAAH@Z		; OGRStylePen::Priority
EXTRN	?GetParamNum@OGRStylePen@@QAEHW4ogr_style_tool_param_pen_id@@AAH@Z:PROC ; OGRStylePen::GetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?Priority@OGRStylePen@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Priority@OGRStylePen@@QAEHAAH@Z PROC			; OGRStylePen::Priority, COMDAT
; _this$ = ecx
; Line 273
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	7
	call	?GetParamNum@OGRStylePen@@QAEHW4ogr_style_tool_param_pen_id@@AAH@Z ; OGRStylePen::GetParamNum
	pop	ebp
	ret	4
?Priority@OGRStylePen@@QAEHAAH@Z ENDP			; OGRStylePen::Priority
_TEXT	ENDS
PUBLIC	?SetPriority@OGRStylePen@@QAEXH@Z		; OGRStylePen::SetPriority
EXTRN	?SetParamNum@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@H@Z:PROC ; OGRStylePen::SetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?SetPriority@OGRStylePen@@QAEXH@Z
_TEXT	SEGMENT
_nPriority$ = 8						; size = 4
?SetPriority@OGRStylePen@@QAEXH@Z PROC			; OGRStylePen::SetPriority, COMDAT
; _this$ = ecx
; Line 274
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nPriority$[ebp]
	push	eax
	push	7
	call	?SetParamNum@OGRStylePen@@QAEXW4ogr_style_tool_param_pen_id@@H@Z ; OGRStylePen::SetParamNum
	pop	ebp
	ret	4
?SetPriority@OGRStylePen@@QAEXH@Z ENDP			; OGRStylePen::SetPriority
_TEXT	ENDS
PUBLIC	??_7OGRStylePen@@6B@				; OGRStylePen::`vftable'
PUBLIC	??0OGRStylePen@@QAE@ABV0@@Z			; OGRStylePen::OGRStylePen
PUBLIC	??_R4OGRStylePen@@6B@				; OGRStylePen::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRStylePen@@@8				; OGRStylePen `RTTI Type Descriptor'
PUBLIC	??_R3OGRStylePen@@8				; OGRStylePen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRStylePen@@8				; OGRStylePen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRStylePen@@8			; OGRStylePen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRStylePen@@UAEPAXI@Z			; OGRStylePen::`vector deleting destructor'
EXTRN	?Parse@OGRStylePen@@EAEHXZ:PROC			; OGRStylePen::Parse
EXTRN	?GetStyleString@OGRStylePen@@UAEPBDXZ:PROC	; OGRStylePen::GetStyleString
;	COMDAT ??_R1A@?0A@EA@OGRStylePen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRStylePen@@8 DD FLAT:??_R0?AVOGRStylePen@@@8 ; OGRStylePen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRStylePen@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRStylePen@@8
rdata$r	SEGMENT
??_R2OGRStylePen@@8 DD FLAT:??_R1A@?0A@EA@OGRStylePen@@8 ; OGRStylePen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRStyleTool@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRStylePen@@8
rdata$r	SEGMENT
??_R3OGRStylePen@@8 DD 00H				; OGRStylePen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRStylePen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRStylePen@@@8
_DATA	SEGMENT
??_R0?AVOGRStylePen@@@8 DD FLAT:??_7type_info@@6B@	; OGRStylePen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRStylePen@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRStylePen@@6B@
rdata$r	SEGMENT
??_R4OGRStylePen@@6B@ DD 00H				; OGRStylePen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRStylePen@@@8
	DD	FLAT:??_R3OGRStylePen@@8
rdata$r	ENDS
;	COMDAT ??_7OGRStylePen@@6B@
CONST	SEGMENT
??_7OGRStylePen@@6B@ DD FLAT:??_R4OGRStylePen@@6B@	; OGRStylePen::`vftable'
	DD	FLAT:?Parse@OGRStylePen@@EAEHXZ
	DD	FLAT:??_EOGRStylePen@@UAEPAXI@Z
	DD	FLAT:?GetStyleString@OGRStylePen@@UAEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRStylePen@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRStylePen@@QAE@ABV0@@Z PROC			; OGRStylePen::OGRStylePen, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleTool@@6B@
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRStylePen@@6B@
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??0OGRStylePen@@QAE@ABV0@@Z ENDP			; OGRStylePen::OGRStylePen
_TEXT	ENDS
PUBLIC	??4OGRStylePen@@QAEAAV0@ABV0@@Z			; OGRStylePen::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRStylePen@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRStylePen@@QAEAAV0@ABV0@@Z PROC			; OGRStylePen::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??4OGRStylePen@@QAEAAV0@ABV0@@Z ENDP			; OGRStylePen::operator=
_TEXT	ENDS
PUBLIC	??_GOGRStylePen@@UAEPAXI@Z			; OGRStylePen::`scalar deleting destructor'
EXTRN	??1OGRStylePen@@UAE@XZ:PROC			; OGRStylePen::~OGRStylePen
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRStylePen@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRStylePen@@UAEPAXI@Z PROC				; OGRStylePen::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRStylePen@@UAE@XZ			; OGRStylePen::~OGRStylePen
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@15
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@15:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRStylePen@@UAEPAXI@Z ENDP				; OGRStylePen::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRStylePen@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRStylePen@@UAEPAXI@Z PROC				; OGRStylePen::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@15
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRStylePen@@UAE@XZ		; OGRStylePen::~OGRStylePen
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	48					; 00000030H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@15
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@15:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@15:
	call	??1OGRStylePen@@UAE@XZ			; OGRStylePen::~OGRStylePen
	test	bl, 1
	je	SHORT $LN1@vector@15
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@15:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRStylePen@@UAEPAXI@Z ENDP				; OGRStylePen::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?ForeColor@OGRStyleBrush@@QAEPBDAAH@Z		; OGRStyleBrush::ForeColor
EXTRN	?GetParamStr@OGRStyleBrush@@QAEPBDW4ogr_style_tool_param_brush_id@@AAH@Z:PROC ; OGRStyleBrush::GetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?ForeColor@OGRStyleBrush@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?ForeColor@OGRStyleBrush@@QAEPBDAAH@Z PROC		; OGRStyleBrush::ForeColor, COMDAT
; _this$ = ecx
; Line 305
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	0
	call	?GetParamStr@OGRStyleBrush@@QAEPBDW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamStr
	pop	ebp
	ret	4
?ForeColor@OGRStyleBrush@@QAEPBDAAH@Z ENDP		; OGRStyleBrush::ForeColor
_TEXT	ENDS
PUBLIC	?SetForeColor@OGRStyleBrush@@QAEXPBD@Z		; OGRStyleBrush::SetForeColor
EXTRN	?SetParamStr@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@PBD@Z:PROC ; OGRStyleBrush::SetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?SetForeColor@OGRStyleBrush@@QAEXPBD@Z
_TEXT	SEGMENT
_pszColor$ = 8						; size = 4
?SetForeColor@OGRStyleBrush@@QAEXPBD@Z PROC		; OGRStyleBrush::SetForeColor, COMDAT
; _this$ = ecx
; Line 306
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszColor$[ebp]
	push	eax
	push	0
	call	?SetParamStr@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@PBD@Z ; OGRStyleBrush::SetParamStr
	pop	ebp
	ret	4
?SetForeColor@OGRStyleBrush@@QAEXPBD@Z ENDP		; OGRStyleBrush::SetForeColor
_TEXT	ENDS
PUBLIC	?BackColor@OGRStyleBrush@@QAEPBDAAH@Z		; OGRStyleBrush::BackColor
; Function compile flags: /Ogtp
;	COMDAT ?BackColor@OGRStyleBrush@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?BackColor@OGRStyleBrush@@QAEPBDAAH@Z PROC		; OGRStyleBrush::BackColor, COMDAT
; _this$ = ecx
; Line 307
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	1
	call	?GetParamStr@OGRStyleBrush@@QAEPBDW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamStr
	pop	ebp
	ret	4
?BackColor@OGRStyleBrush@@QAEPBDAAH@Z ENDP		; OGRStyleBrush::BackColor
_TEXT	ENDS
PUBLIC	?SetBackColor@OGRStyleBrush@@QAEXPBD@Z		; OGRStyleBrush::SetBackColor
; Function compile flags: /Ogtp
;	COMDAT ?SetBackColor@OGRStyleBrush@@QAEXPBD@Z
_TEXT	SEGMENT
_pszColor$ = 8						; size = 4
?SetBackColor@OGRStyleBrush@@QAEXPBD@Z PROC		; OGRStyleBrush::SetBackColor, COMDAT
; _this$ = ecx
; Line 308
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszColor$[ebp]
	push	eax
	push	1
	call	?SetParamStr@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@PBD@Z ; OGRStyleBrush::SetParamStr
	pop	ebp
	ret	4
?SetBackColor@OGRStyleBrush@@QAEXPBD@Z ENDP		; OGRStyleBrush::SetBackColor
_TEXT	ENDS
PUBLIC	?Id@OGRStyleBrush@@QAEPBDAAH@Z			; OGRStyleBrush::Id
; Function compile flags: /Ogtp
;	COMDAT ?Id@OGRStyleBrush@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Id@OGRStyleBrush@@QAEPBDAAH@Z PROC			; OGRStyleBrush::Id, COMDAT
; _this$ = ecx
; Line 309
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	2
	call	?GetParamStr@OGRStyleBrush@@QAEPBDW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamStr
	pop	ebp
	ret	4
?Id@OGRStyleBrush@@QAEPBDAAH@Z ENDP			; OGRStyleBrush::Id
_TEXT	ENDS
PUBLIC	?SetId@OGRStyleBrush@@QAEXPBD@Z			; OGRStyleBrush::SetId
; Function compile flags: /Ogtp
;	COMDAT ?SetId@OGRStyleBrush@@QAEXPBD@Z
_TEXT	SEGMENT
_pszId$ = 8						; size = 4
?SetId@OGRStyleBrush@@QAEXPBD@Z PROC			; OGRStyleBrush::SetId, COMDAT
; _this$ = ecx
; Line 310
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszId$[ebp]
	push	eax
	push	2
	call	?SetParamStr@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@PBD@Z ; OGRStyleBrush::SetParamStr
	pop	ebp
	ret	4
?SetId@OGRStyleBrush@@QAEXPBD@Z ENDP			; OGRStyleBrush::SetId
_TEXT	ENDS
PUBLIC	?Angle@OGRStyleBrush@@QAENAAH@Z			; OGRStyleBrush::Angle
EXTRN	?GetParamDbl@OGRStyleBrush@@QAENW4ogr_style_tool_param_brush_id@@AAH@Z:PROC ; OGRStyleBrush::GetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?Angle@OGRStyleBrush@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Angle@OGRStyleBrush@@QAENAAH@Z PROC			; OGRStyleBrush::Angle, COMDAT
; _this$ = ecx
; Line 311
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	3
	call	?GetParamDbl@OGRStyleBrush@@QAENW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamDbl
	pop	ebp
	ret	4
?Angle@OGRStyleBrush@@QAENAAH@Z ENDP			; OGRStyleBrush::Angle
_TEXT	ENDS
PUBLIC	?SetAngle@OGRStyleBrush@@QAEXN@Z		; OGRStyleBrush::SetAngle
EXTRN	?SetParamDbl@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@N@Z:PROC ; OGRStyleBrush::SetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?SetAngle@OGRStyleBrush@@QAEXN@Z
_TEXT	SEGMENT
_dfAngle$ = 8						; size = 8
?SetAngle@OGRStyleBrush@@QAEXN@Z PROC			; OGRStyleBrush::SetAngle, COMDAT
; _this$ = ecx
; Line 312
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfAngle$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	3
	call	?SetParamDbl@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@N@Z ; OGRStyleBrush::SetParamDbl
	pop	ebp
	ret	8
?SetAngle@OGRStyleBrush@@QAEXN@Z ENDP			; OGRStyleBrush::SetAngle
_TEXT	ENDS
PUBLIC	?Size@OGRStyleBrush@@QAENAAH@Z			; OGRStyleBrush::Size
; Function compile flags: /Ogtp
;	COMDAT ?Size@OGRStyleBrush@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Size@OGRStyleBrush@@QAENAAH@Z PROC			; OGRStyleBrush::Size, COMDAT
; _this$ = ecx
; Line 313
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	4
	call	?GetParamDbl@OGRStyleBrush@@QAENW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamDbl
	pop	ebp
	ret	4
?Size@OGRStyleBrush@@QAENAAH@Z ENDP			; OGRStyleBrush::Size
_TEXT	ENDS
PUBLIC	?SetSize@OGRStyleBrush@@QAEXN@Z			; OGRStyleBrush::SetSize
; Function compile flags: /Ogtp
;	COMDAT ?SetSize@OGRStyleBrush@@QAEXN@Z
_TEXT	SEGMENT
_dfSize$ = 8						; size = 8
?SetSize@OGRStyleBrush@@QAEXN@Z PROC			; OGRStyleBrush::SetSize, COMDAT
; _this$ = ecx
; Line 314
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfSize$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	4
	call	?SetParamDbl@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@N@Z ; OGRStyleBrush::SetParamDbl
	pop	ebp
	ret	8
?SetSize@OGRStyleBrush@@QAEXN@Z ENDP			; OGRStyleBrush::SetSize
_TEXT	ENDS
PUBLIC	?SpacingX@OGRStyleBrush@@QAENAAH@Z		; OGRStyleBrush::SpacingX
; Function compile flags: /Ogtp
;	COMDAT ?SpacingX@OGRStyleBrush@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?SpacingX@OGRStyleBrush@@QAENAAH@Z PROC			; OGRStyleBrush::SpacingX, COMDAT
; _this$ = ecx
; Line 315
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	5
	call	?GetParamDbl@OGRStyleBrush@@QAENW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamDbl
	pop	ebp
	ret	4
?SpacingX@OGRStyleBrush@@QAENAAH@Z ENDP			; OGRStyleBrush::SpacingX
_TEXT	ENDS
PUBLIC	?SetSpacingX@OGRStyleBrush@@QAEXN@Z		; OGRStyleBrush::SetSpacingX
; Function compile flags: /Ogtp
;	COMDAT ?SetSpacingX@OGRStyleBrush@@QAEXN@Z
_TEXT	SEGMENT
_dfX$ = 8						; size = 8
?SetSpacingX@OGRStyleBrush@@QAEXN@Z PROC		; OGRStyleBrush::SetSpacingX, COMDAT
; _this$ = ecx
; Line 316
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfX$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	5
	call	?SetParamDbl@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@N@Z ; OGRStyleBrush::SetParamDbl
	pop	ebp
	ret	8
?SetSpacingX@OGRStyleBrush@@QAEXN@Z ENDP		; OGRStyleBrush::SetSpacingX
_TEXT	ENDS
PUBLIC	?SpacingY@OGRStyleBrush@@QAENAAH@Z		; OGRStyleBrush::SpacingY
; Function compile flags: /Ogtp
;	COMDAT ?SpacingY@OGRStyleBrush@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?SpacingY@OGRStyleBrush@@QAENAAH@Z PROC			; OGRStyleBrush::SpacingY, COMDAT
; _this$ = ecx
; Line 317
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	6
	call	?GetParamDbl@OGRStyleBrush@@QAENW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamDbl
	pop	ebp
	ret	4
?SpacingY@OGRStyleBrush@@QAENAAH@Z ENDP			; OGRStyleBrush::SpacingY
_TEXT	ENDS
PUBLIC	?SetSpacingY@OGRStyleBrush@@QAEXN@Z		; OGRStyleBrush::SetSpacingY
; Function compile flags: /Ogtp
;	COMDAT ?SetSpacingY@OGRStyleBrush@@QAEXN@Z
_TEXT	SEGMENT
_dfY$ = 8						; size = 8
?SetSpacingY@OGRStyleBrush@@QAEXN@Z PROC		; OGRStyleBrush::SetSpacingY, COMDAT
; _this$ = ecx
; Line 318
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfY$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	6
	call	?SetParamDbl@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@N@Z ; OGRStyleBrush::SetParamDbl
	pop	ebp
	ret	8
?SetSpacingY@OGRStyleBrush@@QAEXN@Z ENDP		; OGRStyleBrush::SetSpacingY
_TEXT	ENDS
PUBLIC	?Priority@OGRStyleBrush@@QAEHAAH@Z		; OGRStyleBrush::Priority
EXTRN	?GetParamNum@OGRStyleBrush@@QAEHW4ogr_style_tool_param_brush_id@@AAH@Z:PROC ; OGRStyleBrush::GetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?Priority@OGRStyleBrush@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Priority@OGRStyleBrush@@QAEHAAH@Z PROC			; OGRStyleBrush::Priority, COMDAT
; _this$ = ecx
; Line 319
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	7
	call	?GetParamNum@OGRStyleBrush@@QAEHW4ogr_style_tool_param_brush_id@@AAH@Z ; OGRStyleBrush::GetParamNum
	pop	ebp
	ret	4
?Priority@OGRStyleBrush@@QAEHAAH@Z ENDP			; OGRStyleBrush::Priority
_TEXT	ENDS
PUBLIC	?SetPriority@OGRStyleBrush@@QAEXH@Z		; OGRStyleBrush::SetPriority
EXTRN	?SetParamNum@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@H@Z:PROC ; OGRStyleBrush::SetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?SetPriority@OGRStyleBrush@@QAEXH@Z
_TEXT	SEGMENT
_nPriority$ = 8						; size = 4
?SetPriority@OGRStyleBrush@@QAEXH@Z PROC		; OGRStyleBrush::SetPriority, COMDAT
; _this$ = ecx
; Line 320
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nPriority$[ebp]
	push	eax
	push	7
	call	?SetParamNum@OGRStyleBrush@@QAEXW4ogr_style_tool_param_brush_id@@H@Z ; OGRStyleBrush::SetParamNum
	pop	ebp
	ret	4
?SetPriority@OGRStyleBrush@@QAEXH@Z ENDP		; OGRStyleBrush::SetPriority
_TEXT	ENDS
PUBLIC	??_7OGRStyleBrush@@6B@				; OGRStyleBrush::`vftable'
PUBLIC	??0OGRStyleBrush@@QAE@ABV0@@Z			; OGRStyleBrush::OGRStyleBrush
PUBLIC	??_R4OGRStyleBrush@@6B@				; OGRStyleBrush::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRStyleBrush@@@8			; OGRStyleBrush `RTTI Type Descriptor'
PUBLIC	??_R3OGRStyleBrush@@8				; OGRStyleBrush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRStyleBrush@@8				; OGRStyleBrush::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRStyleBrush@@8			; OGRStyleBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRStyleBrush@@UAEPAXI@Z			; OGRStyleBrush::`vector deleting destructor'
EXTRN	?Parse@OGRStyleBrush@@EAEHXZ:PROC		; OGRStyleBrush::Parse
EXTRN	?GetStyleString@OGRStyleBrush@@UAEPBDXZ:PROC	; OGRStyleBrush::GetStyleString
;	COMDAT ??_R1A@?0A@EA@OGRStyleBrush@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRStyleBrush@@8 DD FLAT:??_R0?AVOGRStyleBrush@@@8 ; OGRStyleBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRStyleBrush@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRStyleBrush@@8
rdata$r	SEGMENT
??_R2OGRStyleBrush@@8 DD FLAT:??_R1A@?0A@EA@OGRStyleBrush@@8 ; OGRStyleBrush::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRStyleTool@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRStyleBrush@@8
rdata$r	SEGMENT
??_R3OGRStyleBrush@@8 DD 00H				; OGRStyleBrush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRStyleBrush@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRStyleBrush@@@8
_DATA	SEGMENT
??_R0?AVOGRStyleBrush@@@8 DD FLAT:??_7type_info@@6B@	; OGRStyleBrush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRStyleBrush@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRStyleBrush@@6B@
rdata$r	SEGMENT
??_R4OGRStyleBrush@@6B@ DD 00H				; OGRStyleBrush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRStyleBrush@@@8
	DD	FLAT:??_R3OGRStyleBrush@@8
rdata$r	ENDS
;	COMDAT ??_7OGRStyleBrush@@6B@
CONST	SEGMENT
??_7OGRStyleBrush@@6B@ DD FLAT:??_R4OGRStyleBrush@@6B@	; OGRStyleBrush::`vftable'
	DD	FLAT:?Parse@OGRStyleBrush@@EAEHXZ
	DD	FLAT:??_EOGRStyleBrush@@UAEPAXI@Z
	DD	FLAT:?GetStyleString@OGRStyleBrush@@UAEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRStyleBrush@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRStyleBrush@@QAE@ABV0@@Z PROC			; OGRStyleBrush::OGRStyleBrush, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleTool@@6B@
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleBrush@@6B@
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??0OGRStyleBrush@@QAE@ABV0@@Z ENDP			; OGRStyleBrush::OGRStyleBrush
_TEXT	ENDS
PUBLIC	??4OGRStyleBrush@@QAEAAV0@ABV0@@Z		; OGRStyleBrush::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRStyleBrush@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRStyleBrush@@QAEAAV0@ABV0@@Z PROC			; OGRStyleBrush::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??4OGRStyleBrush@@QAEAAV0@ABV0@@Z ENDP			; OGRStyleBrush::operator=
_TEXT	ENDS
PUBLIC	??_GOGRStyleBrush@@UAEPAXI@Z			; OGRStyleBrush::`scalar deleting destructor'
EXTRN	??1OGRStyleBrush@@UAE@XZ:PROC			; OGRStyleBrush::~OGRStyleBrush
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRStyleBrush@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRStyleBrush@@UAEPAXI@Z PROC			; OGRStyleBrush::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRStyleBrush@@UAE@XZ		; OGRStyleBrush::~OGRStyleBrush
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@16
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@16:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRStyleBrush@@UAEPAXI@Z ENDP			; OGRStyleBrush::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRStyleBrush@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRStyleBrush@@UAEPAXI@Z PROC			; OGRStyleBrush::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@16
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRStyleBrush@@UAE@XZ		; OGRStyleBrush::~OGRStyleBrush
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	48					; 00000030H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@16
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@16:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@16:
	call	??1OGRStyleBrush@@UAE@XZ		; OGRStyleBrush::~OGRStyleBrush
	test	bl, 1
	je	SHORT $LN1@vector@16
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@16:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRStyleBrush@@UAEPAXI@Z ENDP			; OGRStyleBrush::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?Id@OGRStyleSymbol@@QAEPBDAAH@Z			; OGRStyleSymbol::Id
EXTRN	?GetParamStr@OGRStyleSymbol@@QAEPBDW4ogr_style_tool_param_symbol_id@@AAH@Z:PROC ; OGRStyleSymbol::GetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?Id@OGRStyleSymbol@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Id@OGRStyleSymbol@@QAEPBDAAH@Z PROC			; OGRStyleSymbol::Id, COMDAT
; _this$ = ecx
; Line 354
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	0
	call	?GetParamStr@OGRStyleSymbol@@QAEPBDW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamStr
	pop	ebp
	ret	4
?Id@OGRStyleSymbol@@QAEPBDAAH@Z ENDP			; OGRStyleSymbol::Id
_TEXT	ENDS
PUBLIC	?SetId@OGRStyleSymbol@@QAEXPBD@Z		; OGRStyleSymbol::SetId
EXTRN	?SetParamStr@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@PBD@Z:PROC ; OGRStyleSymbol::SetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?SetId@OGRStyleSymbol@@QAEXPBD@Z
_TEXT	SEGMENT
_pszId$ = 8						; size = 4
?SetId@OGRStyleSymbol@@QAEXPBD@Z PROC			; OGRStyleSymbol::SetId, COMDAT
; _this$ = ecx
; Line 355
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszId$[ebp]
	push	eax
	push	0
	call	?SetParamStr@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@PBD@Z ; OGRStyleSymbol::SetParamStr
	pop	ebp
	ret	4
?SetId@OGRStyleSymbol@@QAEXPBD@Z ENDP			; OGRStyleSymbol::SetId
_TEXT	ENDS
PUBLIC	?Angle@OGRStyleSymbol@@QAENAAH@Z		; OGRStyleSymbol::Angle
EXTRN	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z:PROC ; OGRStyleSymbol::GetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?Angle@OGRStyleSymbol@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Angle@OGRStyleSymbol@@QAENAAH@Z PROC			; OGRStyleSymbol::Angle, COMDAT
; _this$ = ecx
; Line 356
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	1
	call	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamDbl
	pop	ebp
	ret	4
?Angle@OGRStyleSymbol@@QAENAAH@Z ENDP			; OGRStyleSymbol::Angle
_TEXT	ENDS
PUBLIC	?SetAngle@OGRStyleSymbol@@QAEXN@Z		; OGRStyleSymbol::SetAngle
EXTRN	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z:PROC ; OGRStyleSymbol::SetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?SetAngle@OGRStyleSymbol@@QAEXN@Z
_TEXT	SEGMENT
_dfAngle$ = 8						; size = 8
?SetAngle@OGRStyleSymbol@@QAEXN@Z PROC			; OGRStyleSymbol::SetAngle, COMDAT
; _this$ = ecx
; Line 357
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfAngle$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	1
	call	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z ; OGRStyleSymbol::SetParamDbl
	pop	ebp
	ret	8
?SetAngle@OGRStyleSymbol@@QAEXN@Z ENDP			; OGRStyleSymbol::SetAngle
_TEXT	ENDS
PUBLIC	?Color@OGRStyleSymbol@@QAEPBDAAH@Z		; OGRStyleSymbol::Color
; Function compile flags: /Ogtp
;	COMDAT ?Color@OGRStyleSymbol@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Color@OGRStyleSymbol@@QAEPBDAAH@Z PROC			; OGRStyleSymbol::Color, COMDAT
; _this$ = ecx
; Line 358
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	2
	call	?GetParamStr@OGRStyleSymbol@@QAEPBDW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamStr
	pop	ebp
	ret	4
?Color@OGRStyleSymbol@@QAEPBDAAH@Z ENDP			; OGRStyleSymbol::Color
_TEXT	ENDS
PUBLIC	?SetColor@OGRStyleSymbol@@QAEXPBD@Z		; OGRStyleSymbol::SetColor
; Function compile flags: /Ogtp
;	COMDAT ?SetColor@OGRStyleSymbol@@QAEXPBD@Z
_TEXT	SEGMENT
_pszColor$ = 8						; size = 4
?SetColor@OGRStyleSymbol@@QAEXPBD@Z PROC		; OGRStyleSymbol::SetColor, COMDAT
; _this$ = ecx
; Line 359
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszColor$[ebp]
	push	eax
	push	2
	call	?SetParamStr@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@PBD@Z ; OGRStyleSymbol::SetParamStr
	pop	ebp
	ret	4
?SetColor@OGRStyleSymbol@@QAEXPBD@Z ENDP		; OGRStyleSymbol::SetColor
_TEXT	ENDS
PUBLIC	?Size@OGRStyleSymbol@@QAENAAH@Z			; OGRStyleSymbol::Size
; Function compile flags: /Ogtp
;	COMDAT ?Size@OGRStyleSymbol@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Size@OGRStyleSymbol@@QAENAAH@Z PROC			; OGRStyleSymbol::Size, COMDAT
; _this$ = ecx
; Line 360
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	3
	call	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamDbl
	pop	ebp
	ret	4
?Size@OGRStyleSymbol@@QAENAAH@Z ENDP			; OGRStyleSymbol::Size
_TEXT	ENDS
PUBLIC	?SetSize@OGRStyleSymbol@@QAEXN@Z		; OGRStyleSymbol::SetSize
; Function compile flags: /Ogtp
;	COMDAT ?SetSize@OGRStyleSymbol@@QAEXN@Z
_TEXT	SEGMENT
_dfSize$ = 8						; size = 8
?SetSize@OGRStyleSymbol@@QAEXN@Z PROC			; OGRStyleSymbol::SetSize, COMDAT
; _this$ = ecx
; Line 361
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfSize$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	3
	call	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z ; OGRStyleSymbol::SetParamDbl
	pop	ebp
	ret	8
?SetSize@OGRStyleSymbol@@QAEXN@Z ENDP			; OGRStyleSymbol::SetSize
_TEXT	ENDS
PUBLIC	?SpacingX@OGRStyleSymbol@@QAENAAH@Z		; OGRStyleSymbol::SpacingX
; Function compile flags: /Ogtp
;	COMDAT ?SpacingX@OGRStyleSymbol@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?SpacingX@OGRStyleSymbol@@QAENAAH@Z PROC		; OGRStyleSymbol::SpacingX, COMDAT
; _this$ = ecx
; Line 362
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	4
	call	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamDbl
	pop	ebp
	ret	4
?SpacingX@OGRStyleSymbol@@QAENAAH@Z ENDP		; OGRStyleSymbol::SpacingX
_TEXT	ENDS
PUBLIC	?SetSpacingX@OGRStyleSymbol@@QAEXN@Z		; OGRStyleSymbol::SetSpacingX
; Function compile flags: /Ogtp
;	COMDAT ?SetSpacingX@OGRStyleSymbol@@QAEXN@Z
_TEXT	SEGMENT
_dfX$ = 8						; size = 8
?SetSpacingX@OGRStyleSymbol@@QAEXN@Z PROC		; OGRStyleSymbol::SetSpacingX, COMDAT
; _this$ = ecx
; Line 363
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfX$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	4
	call	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z ; OGRStyleSymbol::SetParamDbl
	pop	ebp
	ret	8
?SetSpacingX@OGRStyleSymbol@@QAEXN@Z ENDP		; OGRStyleSymbol::SetSpacingX
_TEXT	ENDS
PUBLIC	?SpacingY@OGRStyleSymbol@@QAENAAH@Z		; OGRStyleSymbol::SpacingY
; Function compile flags: /Ogtp
;	COMDAT ?SpacingY@OGRStyleSymbol@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?SpacingY@OGRStyleSymbol@@QAENAAH@Z PROC		; OGRStyleSymbol::SpacingY, COMDAT
; _this$ = ecx
; Line 364
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	5
	call	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamDbl
	pop	ebp
	ret	4
?SpacingY@OGRStyleSymbol@@QAENAAH@Z ENDP		; OGRStyleSymbol::SpacingY
_TEXT	ENDS
PUBLIC	?SetSpacingY@OGRStyleSymbol@@QAEXN@Z		; OGRStyleSymbol::SetSpacingY
; Function compile flags: /Ogtp
;	COMDAT ?SetSpacingY@OGRStyleSymbol@@QAEXN@Z
_TEXT	SEGMENT
_dfY$ = 8						; size = 8
?SetSpacingY@OGRStyleSymbol@@QAEXN@Z PROC		; OGRStyleSymbol::SetSpacingY, COMDAT
; _this$ = ecx
; Line 365
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfY$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	5
	call	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z ; OGRStyleSymbol::SetParamDbl
	pop	ebp
	ret	8
?SetSpacingY@OGRStyleSymbol@@QAEXN@Z ENDP		; OGRStyleSymbol::SetSpacingY
_TEXT	ENDS
PUBLIC	?Step@OGRStyleSymbol@@QAENAAH@Z			; OGRStyleSymbol::Step
; Function compile flags: /Ogtp
;	COMDAT ?Step@OGRStyleSymbol@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Step@OGRStyleSymbol@@QAENAAH@Z PROC			; OGRStyleSymbol::Step, COMDAT
; _this$ = ecx
; Line 366
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	6
	call	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamDbl
	pop	ebp
	ret	4
?Step@OGRStyleSymbol@@QAENAAH@Z ENDP			; OGRStyleSymbol::Step
_TEXT	ENDS
PUBLIC	?SetStep@OGRStyleSymbol@@QAEXN@Z		; OGRStyleSymbol::SetStep
; Function compile flags: /Ogtp
;	COMDAT ?SetStep@OGRStyleSymbol@@QAEXN@Z
_TEXT	SEGMENT
_dfStep$ = 8						; size = 8
?SetStep@OGRStyleSymbol@@QAEXN@Z PROC			; OGRStyleSymbol::SetStep, COMDAT
; _this$ = ecx
; Line 367
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfStep$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	6
	call	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z ; OGRStyleSymbol::SetParamDbl
	pop	ebp
	ret	8
?SetStep@OGRStyleSymbol@@QAEXN@Z ENDP			; OGRStyleSymbol::SetStep
_TEXT	ENDS
PUBLIC	?Offset@OGRStyleSymbol@@QAENAAH@Z		; OGRStyleSymbol::Offset
; Function compile flags: /Ogtp
;	COMDAT ?Offset@OGRStyleSymbol@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Offset@OGRStyleSymbol@@QAENAAH@Z PROC			; OGRStyleSymbol::Offset, COMDAT
; _this$ = ecx
; Line 368
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	8
	call	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamDbl
	pop	ebp
	ret	4
?Offset@OGRStyleSymbol@@QAENAAH@Z ENDP			; OGRStyleSymbol::Offset
_TEXT	ENDS
PUBLIC	?SetOffset@OGRStyleSymbol@@QAEXN@Z		; OGRStyleSymbol::SetOffset
; Function compile flags: /Ogtp
;	COMDAT ?SetOffset@OGRStyleSymbol@@QAEXN@Z
_TEXT	SEGMENT
_dfOffset$ = 8						; size = 8
?SetOffset@OGRStyleSymbol@@QAEXN@Z PROC			; OGRStyleSymbol::SetOffset, COMDAT
; _this$ = ecx
; Line 369
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfOffset$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	8
	call	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z ; OGRStyleSymbol::SetParamDbl
	pop	ebp
	ret	8
?SetOffset@OGRStyleSymbol@@QAEXN@Z ENDP			; OGRStyleSymbol::SetOffset
_TEXT	ENDS
PUBLIC	?Perp@OGRStyleSymbol@@QAENAAH@Z			; OGRStyleSymbol::Perp
; Function compile flags: /Ogtp
;	COMDAT ?Perp@OGRStyleSymbol@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Perp@OGRStyleSymbol@@QAENAAH@Z PROC			; OGRStyleSymbol::Perp, COMDAT
; _this$ = ecx
; Line 370
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	7
	call	?GetParamDbl@OGRStyleSymbol@@QAENW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamDbl
	pop	ebp
	ret	4
?Perp@OGRStyleSymbol@@QAENAAH@Z ENDP			; OGRStyleSymbol::Perp
_TEXT	ENDS
PUBLIC	?SetPerp@OGRStyleSymbol@@QAEXN@Z		; OGRStyleSymbol::SetPerp
; Function compile flags: /Ogtp
;	COMDAT ?SetPerp@OGRStyleSymbol@@QAEXN@Z
_TEXT	SEGMENT
_dfPerp$ = 8						; size = 8
?SetPerp@OGRStyleSymbol@@QAEXN@Z PROC			; OGRStyleSymbol::SetPerp, COMDAT
; _this$ = ecx
; Line 371
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfPerp$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	7
	call	?SetParamDbl@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@N@Z ; OGRStyleSymbol::SetParamDbl
	pop	ebp
	ret	8
?SetPerp@OGRStyleSymbol@@QAEXN@Z ENDP			; OGRStyleSymbol::SetPerp
_TEXT	ENDS
PUBLIC	?Priority@OGRStyleSymbol@@QAEHAAH@Z		; OGRStyleSymbol::Priority
EXTRN	?GetParamNum@OGRStyleSymbol@@QAEHW4ogr_style_tool_param_symbol_id@@AAH@Z:PROC ; OGRStyleSymbol::GetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?Priority@OGRStyleSymbol@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Priority@OGRStyleSymbol@@QAEHAAH@Z PROC		; OGRStyleSymbol::Priority, COMDAT
; _this$ = ecx
; Line 372
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	9
	call	?GetParamNum@OGRStyleSymbol@@QAEHW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamNum
	pop	ebp
	ret	4
?Priority@OGRStyleSymbol@@QAEHAAH@Z ENDP		; OGRStyleSymbol::Priority
_TEXT	ENDS
PUBLIC	?SetPriority@OGRStyleSymbol@@QAEXH@Z		; OGRStyleSymbol::SetPriority
EXTRN	?SetParamNum@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@H@Z:PROC ; OGRStyleSymbol::SetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?SetPriority@OGRStyleSymbol@@QAEXH@Z
_TEXT	SEGMENT
_nPriority$ = 8						; size = 4
?SetPriority@OGRStyleSymbol@@QAEXH@Z PROC		; OGRStyleSymbol::SetPriority, COMDAT
; _this$ = ecx
; Line 373
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nPriority$[ebp]
	push	eax
	push	9
	call	?SetParamNum@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@H@Z ; OGRStyleSymbol::SetParamNum
	pop	ebp
	ret	4
?SetPriority@OGRStyleSymbol@@QAEXH@Z ENDP		; OGRStyleSymbol::SetPriority
_TEXT	ENDS
PUBLIC	?FontName@OGRStyleSymbol@@QAEPBDAAH@Z		; OGRStyleSymbol::FontName
; Function compile flags: /Ogtp
;	COMDAT ?FontName@OGRStyleSymbol@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?FontName@OGRStyleSymbol@@QAEPBDAAH@Z PROC		; OGRStyleSymbol::FontName, COMDAT
; _this$ = ecx
; Line 375
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	10					; 0000000aH
	call	?GetParamStr@OGRStyleSymbol@@QAEPBDW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamStr
	pop	ebp
	ret	4
?FontName@OGRStyleSymbol@@QAEPBDAAH@Z ENDP		; OGRStyleSymbol::FontName
_TEXT	ENDS
PUBLIC	?SetFontName@OGRStyleSymbol@@QAEXPBD@Z		; OGRStyleSymbol::SetFontName
; Function compile flags: /Ogtp
;	COMDAT ?SetFontName@OGRStyleSymbol@@QAEXPBD@Z
_TEXT	SEGMENT
_pszFontName$ = 8					; size = 4
?SetFontName@OGRStyleSymbol@@QAEXPBD@Z PROC		; OGRStyleSymbol::SetFontName, COMDAT
; _this$ = ecx
; Line 377
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszFontName$[ebp]
	push	eax
	push	10					; 0000000aH
	call	?SetParamStr@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@PBD@Z ; OGRStyleSymbol::SetParamStr
	pop	ebp
	ret	4
?SetFontName@OGRStyleSymbol@@QAEXPBD@Z ENDP		; OGRStyleSymbol::SetFontName
_TEXT	ENDS
PUBLIC	?OColor@OGRStyleSymbol@@QAEPBDAAH@Z		; OGRStyleSymbol::OColor
; Function compile flags: /Ogtp
;	COMDAT ?OColor@OGRStyleSymbol@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?OColor@OGRStyleSymbol@@QAEPBDAAH@Z PROC		; OGRStyleSymbol::OColor, COMDAT
; _this$ = ecx
; Line 378
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	11					; 0000000bH
	call	?GetParamStr@OGRStyleSymbol@@QAEPBDW4ogr_style_tool_param_symbol_id@@AAH@Z ; OGRStyleSymbol::GetParamStr
	pop	ebp
	ret	4
?OColor@OGRStyleSymbol@@QAEPBDAAH@Z ENDP		; OGRStyleSymbol::OColor
_TEXT	ENDS
PUBLIC	?SetOColor@OGRStyleSymbol@@QAEXPBD@Z		; OGRStyleSymbol::SetOColor
; Function compile flags: /Ogtp
;	COMDAT ?SetOColor@OGRStyleSymbol@@QAEXPBD@Z
_TEXT	SEGMENT
_pszColor$ = 8						; size = 4
?SetOColor@OGRStyleSymbol@@QAEXPBD@Z PROC		; OGRStyleSymbol::SetOColor, COMDAT
; _this$ = ecx
; Line 379
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszColor$[ebp]
	push	eax
	push	11					; 0000000bH
	call	?SetParamStr@OGRStyleSymbol@@QAEXW4ogr_style_tool_param_symbol_id@@PBD@Z ; OGRStyleSymbol::SetParamStr
	pop	ebp
	ret	4
?SetOColor@OGRStyleSymbol@@QAEXPBD@Z ENDP		; OGRStyleSymbol::SetOColor
_TEXT	ENDS
PUBLIC	??_7OGRStyleSymbol@@6B@				; OGRStyleSymbol::`vftable'
PUBLIC	??0OGRStyleSymbol@@QAE@ABV0@@Z			; OGRStyleSymbol::OGRStyleSymbol
PUBLIC	??_R4OGRStyleSymbol@@6B@			; OGRStyleSymbol::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRStyleSymbol@@@8			; OGRStyleSymbol `RTTI Type Descriptor'
PUBLIC	??_R3OGRStyleSymbol@@8				; OGRStyleSymbol::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRStyleSymbol@@8				; OGRStyleSymbol::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRStyleSymbol@@8			; OGRStyleSymbol::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRStyleSymbol@@UAEPAXI@Z			; OGRStyleSymbol::`vector deleting destructor'
EXTRN	?Parse@OGRStyleSymbol@@EAEHXZ:PROC		; OGRStyleSymbol::Parse
EXTRN	?GetStyleString@OGRStyleSymbol@@UAEPBDXZ:PROC	; OGRStyleSymbol::GetStyleString
;	COMDAT ??_R1A@?0A@EA@OGRStyleSymbol@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRStyleSymbol@@8 DD FLAT:??_R0?AVOGRStyleSymbol@@@8 ; OGRStyleSymbol::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRStyleSymbol@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRStyleSymbol@@8
rdata$r	SEGMENT
??_R2OGRStyleSymbol@@8 DD FLAT:??_R1A@?0A@EA@OGRStyleSymbol@@8 ; OGRStyleSymbol::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRStyleTool@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRStyleSymbol@@8
rdata$r	SEGMENT
??_R3OGRStyleSymbol@@8 DD 00H				; OGRStyleSymbol::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRStyleSymbol@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRStyleSymbol@@@8
_DATA	SEGMENT
??_R0?AVOGRStyleSymbol@@@8 DD FLAT:??_7type_info@@6B@	; OGRStyleSymbol `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRStyleSymbol@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRStyleSymbol@@6B@
rdata$r	SEGMENT
??_R4OGRStyleSymbol@@6B@ DD 00H				; OGRStyleSymbol::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRStyleSymbol@@@8
	DD	FLAT:??_R3OGRStyleSymbol@@8
rdata$r	ENDS
;	COMDAT ??_7OGRStyleSymbol@@6B@
CONST	SEGMENT
??_7OGRStyleSymbol@@6B@ DD FLAT:??_R4OGRStyleSymbol@@6B@ ; OGRStyleSymbol::`vftable'
	DD	FLAT:?Parse@OGRStyleSymbol@@EAEHXZ
	DD	FLAT:??_EOGRStyleSymbol@@UAEPAXI@Z
	DD	FLAT:?GetStyleString@OGRStyleSymbol@@UAEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRStyleSymbol@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRStyleSymbol@@QAE@ABV0@@Z PROC			; OGRStyleSymbol::OGRStyleSymbol, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleTool@@6B@
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleSymbol@@6B@
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??0OGRStyleSymbol@@QAE@ABV0@@Z ENDP			; OGRStyleSymbol::OGRStyleSymbol
_TEXT	ENDS
PUBLIC	??4OGRStyleSymbol@@QAEAAV0@ABV0@@Z		; OGRStyleSymbol::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRStyleSymbol@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRStyleSymbol@@QAEAAV0@ABV0@@Z PROC			; OGRStyleSymbol::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??4OGRStyleSymbol@@QAEAAV0@ABV0@@Z ENDP			; OGRStyleSymbol::operator=
_TEXT	ENDS
PUBLIC	??_GOGRStyleSymbol@@UAEPAXI@Z			; OGRStyleSymbol::`scalar deleting destructor'
EXTRN	??1OGRStyleSymbol@@UAE@XZ:PROC			; OGRStyleSymbol::~OGRStyleSymbol
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRStyleSymbol@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRStyleSymbol@@UAEPAXI@Z PROC			; OGRStyleSymbol::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRStyleSymbol@@UAE@XZ		; OGRStyleSymbol::~OGRStyleSymbol
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@17
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@17:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRStyleSymbol@@UAEPAXI@Z ENDP			; OGRStyleSymbol::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRStyleSymbol@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRStyleSymbol@@UAEPAXI@Z PROC			; OGRStyleSymbol::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@17
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRStyleSymbol@@UAE@XZ	; OGRStyleSymbol::~OGRStyleSymbol
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	48					; 00000030H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@17
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@17:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@17:
	call	??1OGRStyleSymbol@@UAE@XZ		; OGRStyleSymbol::~OGRStyleSymbol
	test	bl, 1
	je	SHORT $LN1@vector@17
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@17:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRStyleSymbol@@UAEPAXI@Z ENDP			; OGRStyleSymbol::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?FontName@OGRStyleLabel@@QAEPBDAAH@Z		; OGRStyleLabel::FontName
EXTRN	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z:PROC ; OGRStyleLabel::GetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?FontName@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?FontName@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::FontName, COMDAT
; _this$ = ecx
; Line 412
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	0
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?FontName@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::FontName
_TEXT	ENDS
PUBLIC	?SetFontName@OGRStyleLabel@@QAEXPBD@Z		; OGRStyleLabel::SetFontName
EXTRN	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z:PROC ; OGRStyleLabel::SetParamStr
; Function compile flags: /Ogtp
;	COMDAT ?SetFontName@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszFontName$ = 8					; size = 4
?SetFontName@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetFontName, COMDAT
; _this$ = ecx
; Line 413
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszFontName$[ebp]
	push	eax
	push	0
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetFontName@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetFontName
_TEXT	ENDS
PUBLIC	?Size@OGRStyleLabel@@QAENAAH@Z			; OGRStyleLabel::Size
EXTRN	?GetParamDbl@OGRStyleLabel@@QAENW4ogr_style_tool_param_label_id@@AAH@Z:PROC ; OGRStyleLabel::GetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?Size@OGRStyleLabel@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Size@OGRStyleLabel@@QAENAAH@Z PROC			; OGRStyleLabel::Size, COMDAT
; _this$ = ecx
; Line 414
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	1
	call	?GetParamDbl@OGRStyleLabel@@QAENW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamDbl
	pop	ebp
	ret	4
?Size@OGRStyleLabel@@QAENAAH@Z ENDP			; OGRStyleLabel::Size
_TEXT	ENDS
PUBLIC	?SetSize@OGRStyleLabel@@QAEXN@Z			; OGRStyleLabel::SetSize
EXTRN	?SetParamDbl@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@N@Z:PROC ; OGRStyleLabel::SetParamDbl
; Function compile flags: /Ogtp
;	COMDAT ?SetSize@OGRStyleLabel@@QAEXN@Z
_TEXT	SEGMENT
_dfSize$ = 8						; size = 8
?SetSize@OGRStyleLabel@@QAEXN@Z PROC			; OGRStyleLabel::SetSize, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfSize$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	1
	call	?SetParamDbl@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@N@Z ; OGRStyleLabel::SetParamDbl
	pop	ebp
	ret	8
?SetSize@OGRStyleLabel@@QAEXN@Z ENDP			; OGRStyleLabel::SetSize
_TEXT	ENDS
PUBLIC	?TextString@OGRStyleLabel@@QAEPBDAAH@Z		; OGRStyleLabel::TextString
; Function compile flags: /Ogtp
;	COMDAT ?TextString@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?TextString@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::TextString, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	2
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?TextString@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::TextString
_TEXT	ENDS
PUBLIC	?SetTextString@OGRStyleLabel@@QAEXPBD@Z		; OGRStyleLabel::SetTextString
; Function compile flags: /Ogtp
;	COMDAT ?SetTextString@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszTextString$ = 8					; size = 4
?SetTextString@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetTextString, COMDAT
; _this$ = ecx
; Line 417
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszTextString$[ebp]
	push	eax
	push	2
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetTextString@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetTextString
_TEXT	ENDS
PUBLIC	?Angle@OGRStyleLabel@@QAENAAH@Z			; OGRStyleLabel::Angle
; Function compile flags: /Ogtp
;	COMDAT ?Angle@OGRStyleLabel@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Angle@OGRStyleLabel@@QAENAAH@Z PROC			; OGRStyleLabel::Angle, COMDAT
; _this$ = ecx
; Line 418
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	3
	call	?GetParamDbl@OGRStyleLabel@@QAENW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamDbl
	pop	ebp
	ret	4
?Angle@OGRStyleLabel@@QAENAAH@Z ENDP			; OGRStyleLabel::Angle
_TEXT	ENDS
PUBLIC	?SetAngle@OGRStyleLabel@@QAEXN@Z		; OGRStyleLabel::SetAngle
; Function compile flags: /Ogtp
;	COMDAT ?SetAngle@OGRStyleLabel@@QAEXN@Z
_TEXT	SEGMENT
_dfAngle$ = 8						; size = 8
?SetAngle@OGRStyleLabel@@QAEXN@Z PROC			; OGRStyleLabel::SetAngle, COMDAT
; _this$ = ecx
; Line 419
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfAngle$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	3
	call	?SetParamDbl@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@N@Z ; OGRStyleLabel::SetParamDbl
	pop	ebp
	ret	8
?SetAngle@OGRStyleLabel@@QAEXN@Z ENDP			; OGRStyleLabel::SetAngle
_TEXT	ENDS
PUBLIC	?ForeColor@OGRStyleLabel@@QAEPBDAAH@Z		; OGRStyleLabel::ForeColor
; Function compile flags: /Ogtp
;	COMDAT ?ForeColor@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?ForeColor@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::ForeColor, COMDAT
; _this$ = ecx
; Line 420
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	4
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?ForeColor@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::ForeColor
_TEXT	ENDS
PUBLIC	?SetForColor@OGRStyleLabel@@QAEXPBD@Z		; OGRStyleLabel::SetForColor
; Function compile flags: /Ogtp
;	COMDAT ?SetForColor@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszForColor$ = 8					; size = 4
?SetForColor@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetForColor, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszForColor$[ebp]
	push	eax
	push	4
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetForColor@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetForColor
_TEXT	ENDS
PUBLIC	?BackColor@OGRStyleLabel@@QAEPBDAAH@Z		; OGRStyleLabel::BackColor
; Function compile flags: /Ogtp
;	COMDAT ?BackColor@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?BackColor@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::BackColor, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	5
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?BackColor@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::BackColor
_TEXT	ENDS
PUBLIC	?SetBackColor@OGRStyleLabel@@QAEXPBD@Z		; OGRStyleLabel::SetBackColor
; Function compile flags: /Ogtp
;	COMDAT ?SetBackColor@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszBackColor$ = 8					; size = 4
?SetBackColor@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetBackColor, COMDAT
; _this$ = ecx
; Line 423
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszBackColor$[ebp]
	push	eax
	push	5
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetBackColor@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetBackColor
_TEXT	ENDS
PUBLIC	?Placement@OGRStyleLabel@@QAEPBDAAH@Z		; OGRStyleLabel::Placement
; Function compile flags: /Ogtp
;	COMDAT ?Placement@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Placement@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::Placement, COMDAT
; _this$ = ecx
; Line 424
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	6
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?Placement@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::Placement
_TEXT	ENDS
PUBLIC	?SetPlacement@OGRStyleLabel@@QAEXPBD@Z		; OGRStyleLabel::SetPlacement
; Function compile flags: /Ogtp
;	COMDAT ?SetPlacement@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszPlacement$ = 8					; size = 4
?SetPlacement@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetPlacement, COMDAT
; _this$ = ecx
; Line 425
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszPlacement$[ebp]
	push	eax
	push	6
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetPlacement@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetPlacement
_TEXT	ENDS
PUBLIC	?Anchor@OGRStyleLabel@@QAEHAAH@Z		; OGRStyleLabel::Anchor
EXTRN	?GetParamNum@OGRStyleLabel@@QAEHW4ogr_style_tool_param_label_id@@AAH@Z:PROC ; OGRStyleLabel::GetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?Anchor@OGRStyleLabel@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Anchor@OGRStyleLabel@@QAEHAAH@Z PROC			; OGRStyleLabel::Anchor, COMDAT
; _this$ = ecx
; Line 426
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	7
	call	?GetParamNum@OGRStyleLabel@@QAEHW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamNum
	pop	ebp
	ret	4
?Anchor@OGRStyleLabel@@QAEHAAH@Z ENDP			; OGRStyleLabel::Anchor
_TEXT	ENDS
PUBLIC	?SetAnchor@OGRStyleLabel@@QAEXH@Z		; OGRStyleLabel::SetAnchor
EXTRN	?SetParamNum@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@H@Z:PROC ; OGRStyleLabel::SetParamNum
; Function compile flags: /Ogtp
;	COMDAT ?SetAnchor@OGRStyleLabel@@QAEXH@Z
_TEXT	SEGMENT
_nAnchor$ = 8						; size = 4
?SetAnchor@OGRStyleLabel@@QAEXH@Z PROC			; OGRStyleLabel::SetAnchor, COMDAT
; _this$ = ecx
; Line 427
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nAnchor$[ebp]
	push	eax
	push	7
	call	?SetParamNum@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@H@Z ; OGRStyleLabel::SetParamNum
	pop	ebp
	ret	4
?SetAnchor@OGRStyleLabel@@QAEXH@Z ENDP			; OGRStyleLabel::SetAnchor
_TEXT	ENDS
PUBLIC	?SpacingX@OGRStyleLabel@@QAENAAH@Z		; OGRStyleLabel::SpacingX
; Function compile flags: /Ogtp
;	COMDAT ?SpacingX@OGRStyleLabel@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?SpacingX@OGRStyleLabel@@QAENAAH@Z PROC			; OGRStyleLabel::SpacingX, COMDAT
; _this$ = ecx
; Line 428
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	8
	call	?GetParamDbl@OGRStyleLabel@@QAENW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamDbl
	pop	ebp
	ret	4
?SpacingX@OGRStyleLabel@@QAENAAH@Z ENDP			; OGRStyleLabel::SpacingX
_TEXT	ENDS
PUBLIC	?SetSpacingX@OGRStyleLabel@@QAEXN@Z		; OGRStyleLabel::SetSpacingX
; Function compile flags: /Ogtp
;	COMDAT ?SetSpacingX@OGRStyleLabel@@QAEXN@Z
_TEXT	SEGMENT
_dfX$ = 8						; size = 8
?SetSpacingX@OGRStyleLabel@@QAEXN@Z PROC		; OGRStyleLabel::SetSpacingX, COMDAT
; _this$ = ecx
; Line 429
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfX$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	8
	call	?SetParamDbl@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@N@Z ; OGRStyleLabel::SetParamDbl
	pop	ebp
	ret	8
?SetSpacingX@OGRStyleLabel@@QAEXN@Z ENDP		; OGRStyleLabel::SetSpacingX
_TEXT	ENDS
PUBLIC	?SpacingY@OGRStyleLabel@@QAENAAH@Z		; OGRStyleLabel::SpacingY
; Function compile flags: /Ogtp
;	COMDAT ?SpacingY@OGRStyleLabel@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?SpacingY@OGRStyleLabel@@QAENAAH@Z PROC			; OGRStyleLabel::SpacingY, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	9
	call	?GetParamDbl@OGRStyleLabel@@QAENW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamDbl
	pop	ebp
	ret	4
?SpacingY@OGRStyleLabel@@QAENAAH@Z ENDP			; OGRStyleLabel::SpacingY
_TEXT	ENDS
PUBLIC	?SetSpacingY@OGRStyleLabel@@QAEXN@Z		; OGRStyleLabel::SetSpacingY
; Function compile flags: /Ogtp
;	COMDAT ?SetSpacingY@OGRStyleLabel@@QAEXN@Z
_TEXT	SEGMENT
_dfY$ = 8						; size = 8
?SetSpacingY@OGRStyleLabel@@QAEXN@Z PROC		; OGRStyleLabel::SetSpacingY, COMDAT
; _this$ = ecx
; Line 431
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfY$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	9
	call	?SetParamDbl@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@N@Z ; OGRStyleLabel::SetParamDbl
	pop	ebp
	ret	8
?SetSpacingY@OGRStyleLabel@@QAEXN@Z ENDP		; OGRStyleLabel::SetSpacingY
_TEXT	ENDS
PUBLIC	?Perp@OGRStyleLabel@@QAENAAH@Z			; OGRStyleLabel::Perp
; Function compile flags: /Ogtp
;	COMDAT ?Perp@OGRStyleLabel@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Perp@OGRStyleLabel@@QAENAAH@Z PROC			; OGRStyleLabel::Perp, COMDAT
; _this$ = ecx
; Line 432
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	10					; 0000000aH
	call	?GetParamDbl@OGRStyleLabel@@QAENW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamDbl
	pop	ebp
	ret	4
?Perp@OGRStyleLabel@@QAENAAH@Z ENDP			; OGRStyleLabel::Perp
_TEXT	ENDS
PUBLIC	?SetPerp@OGRStyleLabel@@QAEXN@Z			; OGRStyleLabel::SetPerp
; Function compile flags: /Ogtp
;	COMDAT ?SetPerp@OGRStyleLabel@@QAEXN@Z
_TEXT	SEGMENT
_dfPerp$ = 8						; size = 8
?SetPerp@OGRStyleLabel@@QAEXN@Z PROC			; OGRStyleLabel::SetPerp, COMDAT
; _this$ = ecx
; Line 433
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfPerp$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	10					; 0000000aH
	call	?SetParamDbl@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@N@Z ; OGRStyleLabel::SetParamDbl
	pop	ebp
	ret	8
?SetPerp@OGRStyleLabel@@QAEXN@Z ENDP			; OGRStyleLabel::SetPerp
_TEXT	ENDS
PUBLIC	?Bold@OGRStyleLabel@@QAEHAAH@Z			; OGRStyleLabel::Bold
; Function compile flags: /Ogtp
;	COMDAT ?Bold@OGRStyleLabel@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Bold@OGRStyleLabel@@QAEHAAH@Z PROC			; OGRStyleLabel::Bold, COMDAT
; _this$ = ecx
; Line 434
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	11					; 0000000bH
	call	?GetParamNum@OGRStyleLabel@@QAEHW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamNum
	pop	ebp
	ret	4
?Bold@OGRStyleLabel@@QAEHAAH@Z ENDP			; OGRStyleLabel::Bold
_TEXT	ENDS
PUBLIC	?SetBold@OGRStyleLabel@@QAEXH@Z			; OGRStyleLabel::SetBold
; Function compile flags: /Ogtp
;	COMDAT ?SetBold@OGRStyleLabel@@QAEXH@Z
_TEXT	SEGMENT
_bBold$ = 8						; size = 4
?SetBold@OGRStyleLabel@@QAEXH@Z PROC			; OGRStyleLabel::SetBold, COMDAT
; _this$ = ecx
; Line 435
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bBold$[ebp]
	push	eax
	push	11					; 0000000bH
	call	?SetParamNum@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@H@Z ; OGRStyleLabel::SetParamNum
	pop	ebp
	ret	4
?SetBold@OGRStyleLabel@@QAEXH@Z ENDP			; OGRStyleLabel::SetBold
_TEXT	ENDS
PUBLIC	?Italic@OGRStyleLabel@@QAEHAAH@Z		; OGRStyleLabel::Italic
; Function compile flags: /Ogtp
;	COMDAT ?Italic@OGRStyleLabel@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Italic@OGRStyleLabel@@QAEHAAH@Z PROC			; OGRStyleLabel::Italic, COMDAT
; _this$ = ecx
; Line 436
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	12					; 0000000cH
	call	?GetParamNum@OGRStyleLabel@@QAEHW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamNum
	pop	ebp
	ret	4
?Italic@OGRStyleLabel@@QAEHAAH@Z ENDP			; OGRStyleLabel::Italic
_TEXT	ENDS
PUBLIC	?SetItalic@OGRStyleLabel@@QAEXH@Z		; OGRStyleLabel::SetItalic
; Function compile flags: /Ogtp
;	COMDAT ?SetItalic@OGRStyleLabel@@QAEXH@Z
_TEXT	SEGMENT
_bItalic$ = 8						; size = 4
?SetItalic@OGRStyleLabel@@QAEXH@Z PROC			; OGRStyleLabel::SetItalic, COMDAT
; _this$ = ecx
; Line 437
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bItalic$[ebp]
	push	eax
	push	12					; 0000000cH
	call	?SetParamNum@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@H@Z ; OGRStyleLabel::SetParamNum
	pop	ebp
	ret	4
?SetItalic@OGRStyleLabel@@QAEXH@Z ENDP			; OGRStyleLabel::SetItalic
_TEXT	ENDS
PUBLIC	?Underline@OGRStyleLabel@@QAEHAAH@Z		; OGRStyleLabel::Underline
; Function compile flags: /Ogtp
;	COMDAT ?Underline@OGRStyleLabel@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Underline@OGRStyleLabel@@QAEHAAH@Z PROC		; OGRStyleLabel::Underline, COMDAT
; _this$ = ecx
; Line 438
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	13					; 0000000dH
	call	?GetParamNum@OGRStyleLabel@@QAEHW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamNum
	pop	ebp
	ret	4
?Underline@OGRStyleLabel@@QAEHAAH@Z ENDP		; OGRStyleLabel::Underline
_TEXT	ENDS
PUBLIC	?SetUnderline@OGRStyleLabel@@QAEXH@Z		; OGRStyleLabel::SetUnderline
; Function compile flags: /Ogtp
;	COMDAT ?SetUnderline@OGRStyleLabel@@QAEXH@Z
_TEXT	SEGMENT
_bUnderline$ = 8					; size = 4
?SetUnderline@OGRStyleLabel@@QAEXH@Z PROC		; OGRStyleLabel::SetUnderline, COMDAT
; _this$ = ecx
; Line 439
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bUnderline$[ebp]
	push	eax
	push	13					; 0000000dH
	call	?SetParamNum@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@H@Z ; OGRStyleLabel::SetParamNum
	pop	ebp
	ret	4
?SetUnderline@OGRStyleLabel@@QAEXH@Z ENDP		; OGRStyleLabel::SetUnderline
_TEXT	ENDS
PUBLIC	?Priority@OGRStyleLabel@@QAEHAAH@Z		; OGRStyleLabel::Priority
; Function compile flags: /Ogtp
;	COMDAT ?Priority@OGRStyleLabel@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Priority@OGRStyleLabel@@QAEHAAH@Z PROC			; OGRStyleLabel::Priority, COMDAT
; _this$ = ecx
; Line 440
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	14					; 0000000eH
	call	?GetParamNum@OGRStyleLabel@@QAEHW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamNum
	pop	ebp
	ret	4
?Priority@OGRStyleLabel@@QAEHAAH@Z ENDP			; OGRStyleLabel::Priority
_TEXT	ENDS
PUBLIC	?SetPriority@OGRStyleLabel@@QAEXH@Z		; OGRStyleLabel::SetPriority
; Function compile flags: /Ogtp
;	COMDAT ?SetPriority@OGRStyleLabel@@QAEXH@Z
_TEXT	SEGMENT
_nPriority$ = 8						; size = 4
?SetPriority@OGRStyleLabel@@QAEXH@Z PROC		; OGRStyleLabel::SetPriority, COMDAT
; _this$ = ecx
; Line 441
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nPriority$[ebp]
	push	eax
	push	14					; 0000000eH
	call	?SetParamNum@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@H@Z ; OGRStyleLabel::SetParamNum
	pop	ebp
	ret	4
?SetPriority@OGRStyleLabel@@QAEXH@Z ENDP		; OGRStyleLabel::SetPriority
_TEXT	ENDS
PUBLIC	?Strikeout@OGRStyleLabel@@QAEHAAH@Z		; OGRStyleLabel::Strikeout
; Function compile flags: /Ogtp
;	COMDAT ?Strikeout@OGRStyleLabel@@QAEHAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Strikeout@OGRStyleLabel@@QAEHAAH@Z PROC		; OGRStyleLabel::Strikeout, COMDAT
; _this$ = ecx
; Line 442
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	15					; 0000000fH
	call	?GetParamNum@OGRStyleLabel@@QAEHW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamNum
	pop	ebp
	ret	4
?Strikeout@OGRStyleLabel@@QAEHAAH@Z ENDP		; OGRStyleLabel::Strikeout
_TEXT	ENDS
PUBLIC	?SetStrikeout@OGRStyleLabel@@QAEXH@Z		; OGRStyleLabel::SetStrikeout
; Function compile flags: /Ogtp
;	COMDAT ?SetStrikeout@OGRStyleLabel@@QAEXH@Z
_TEXT	SEGMENT
_bStrikeout$ = 8					; size = 4
?SetStrikeout@OGRStyleLabel@@QAEXH@Z PROC		; OGRStyleLabel::SetStrikeout, COMDAT
; _this$ = ecx
; Line 443
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bStrikeout$[ebp]
	push	eax
	push	15					; 0000000fH
	call	?SetParamNum@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@H@Z ; OGRStyleLabel::SetParamNum
	pop	ebp
	ret	4
?SetStrikeout@OGRStyleLabel@@QAEXH@Z ENDP		; OGRStyleLabel::SetStrikeout
_TEXT	ENDS
PUBLIC	?Stretch@OGRStyleLabel@@QAENAAH@Z		; OGRStyleLabel::Stretch
; Function compile flags: /Ogtp
;	COMDAT ?Stretch@OGRStyleLabel@@QAENAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?Stretch@OGRStyleLabel@@QAENAAH@Z PROC			; OGRStyleLabel::Stretch, COMDAT
; _this$ = ecx
; Line 444
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	16					; 00000010H
	call	?GetParamDbl@OGRStyleLabel@@QAENW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamDbl
	pop	ebp
	ret	4
?Stretch@OGRStyleLabel@@QAENAAH@Z ENDP			; OGRStyleLabel::Stretch
_TEXT	ENDS
PUBLIC	?SetStretch@OGRStyleLabel@@QAEXN@Z		; OGRStyleLabel::SetStretch
; Function compile flags: /Ogtp
;	COMDAT ?SetStretch@OGRStyleLabel@@QAEXN@Z
_TEXT	SEGMENT
_dfStretch$ = 8						; size = 8
?SetStretch@OGRStyleLabel@@QAEXN@Z PROC			; OGRStyleLabel::SetStretch, COMDAT
; _this$ = ecx
; Line 445
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfStretch$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	16					; 00000010H
	call	?SetParamDbl@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@N@Z ; OGRStyleLabel::SetParamDbl
	pop	ebp
	ret	8
?SetStretch@OGRStyleLabel@@QAEXN@Z ENDP			; OGRStyleLabel::SetStretch
_TEXT	ENDS
PUBLIC	?AdjustmentHor@OGRStyleLabel@@QAEPBDAAH@Z	; OGRStyleLabel::AdjustmentHor
; Function compile flags: /Ogtp
;	COMDAT ?AdjustmentHor@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?AdjustmentHor@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::AdjustmentHor, COMDAT
; _this$ = ecx
; Line 446
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	17					; 00000011H
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?AdjustmentHor@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::AdjustmentHor
_TEXT	ENDS
PUBLIC	?SetAdjustmentHor@OGRStyleLabel@@QAEXPBD@Z	; OGRStyleLabel::SetAdjustmentHor
; Function compile flags: /Ogtp
;	COMDAT ?SetAdjustmentHor@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszAdjustmentHor$ = 8					; size = 4
?SetAdjustmentHor@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetAdjustmentHor, COMDAT
; _this$ = ecx
; Line 447
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszAdjustmentHor$[ebp]
	push	eax
	push	17					; 00000011H
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetAdjustmentHor@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetAdjustmentHor
_TEXT	ENDS
PUBLIC	?AdjustmentVert@OGRStyleLabel@@QAEPBDAAH@Z	; OGRStyleLabel::AdjustmentVert
; Function compile flags: /Ogtp
;	COMDAT ?AdjustmentVert@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?AdjustmentVert@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::AdjustmentVert, COMDAT
; _this$ = ecx
; Line 448
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	18					; 00000012H
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?AdjustmentVert@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::AdjustmentVert
_TEXT	ENDS
PUBLIC	?SetAdjustmentVert@OGRStyleLabel@@QAEXPBD@Z	; OGRStyleLabel::SetAdjustmentVert
; Function compile flags: /Ogtp
;	COMDAT ?SetAdjustmentVert@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszAdjustmentVert$ = 8					; size = 4
?SetAdjustmentVert@OGRStyleLabel@@QAEXPBD@Z PROC	; OGRStyleLabel::SetAdjustmentVert, COMDAT
; _this$ = ecx
; Line 449
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszAdjustmentVert$[ebp]
	push	eax
	push	17					; 00000011H
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetAdjustmentVert@OGRStyleLabel@@QAEXPBD@Z ENDP	; OGRStyleLabel::SetAdjustmentVert
_TEXT	ENDS
PUBLIC	?ShadowColor@OGRStyleLabel@@QAEPBDAAH@Z		; OGRStyleLabel::ShadowColor
; Function compile flags: /Ogtp
;	COMDAT ?ShadowColor@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?ShadowColor@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::ShadowColor, COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	19					; 00000013H
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?ShadowColor@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::ShadowColor
_TEXT	ENDS
PUBLIC	?SetShadowColor@OGRStyleLabel@@QAEXPBD@Z	; OGRStyleLabel::SetShadowColor
; Function compile flags: /Ogtp
;	COMDAT ?SetShadowColor@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszShadowColor$ = 8					; size = 4
?SetShadowColor@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetShadowColor, COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszShadowColor$[ebp]
	push	eax
	push	19					; 00000013H
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetShadowColor@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetShadowColor
_TEXT	ENDS
PUBLIC	?OutlineColor@OGRStyleLabel@@QAEPBDAAH@Z	; OGRStyleLabel::OutlineColor
; Function compile flags: /Ogtp
;	COMDAT ?OutlineColor@OGRStyleLabel@@QAEPBDAAH@Z
_TEXT	SEGMENT
_bDefault$ = 8						; size = 4
?OutlineColor@OGRStyleLabel@@QAEPBDAAH@Z PROC		; OGRStyleLabel::OutlineColor, COMDAT
; _this$ = ecx
; Line 452
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bDefault$[ebp]
	push	eax
	push	20					; 00000014H
	call	?GetParamStr@OGRStyleLabel@@QAEPBDW4ogr_style_tool_param_label_id@@AAH@Z ; OGRStyleLabel::GetParamStr
	pop	ebp
	ret	4
?OutlineColor@OGRStyleLabel@@QAEPBDAAH@Z ENDP		; OGRStyleLabel::OutlineColor
_TEXT	ENDS
PUBLIC	?SetOutlineColor@OGRStyleLabel@@QAEXPBD@Z	; OGRStyleLabel::SetOutlineColor
; Function compile flags: /Ogtp
;	COMDAT ?SetOutlineColor@OGRStyleLabel@@QAEXPBD@Z
_TEXT	SEGMENT
_pszOutlineColor$ = 8					; size = 4
?SetOutlineColor@OGRStyleLabel@@QAEXPBD@Z PROC		; OGRStyleLabel::SetOutlineColor, COMDAT
; _this$ = ecx
; Line 453
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszOutlineColor$[ebp]
	push	eax
	push	20					; 00000014H
	call	?SetParamStr@OGRStyleLabel@@QAEXW4ogr_style_tool_param_label_id@@PBD@Z ; OGRStyleLabel::SetParamStr
	pop	ebp
	ret	4
?SetOutlineColor@OGRStyleLabel@@QAEXPBD@Z ENDP		; OGRStyleLabel::SetOutlineColor
_TEXT	ENDS
PUBLIC	??_7OGRStyleLabel@@6B@				; OGRStyleLabel::`vftable'
PUBLIC	??0OGRStyleLabel@@QAE@ABV0@@Z			; OGRStyleLabel::OGRStyleLabel
PUBLIC	??_R4OGRStyleLabel@@6B@				; OGRStyleLabel::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRStyleLabel@@@8			; OGRStyleLabel `RTTI Type Descriptor'
PUBLIC	??_R3OGRStyleLabel@@8				; OGRStyleLabel::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRStyleLabel@@8				; OGRStyleLabel::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRStyleLabel@@8			; OGRStyleLabel::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRStyleLabel@@UAEPAXI@Z			; OGRStyleLabel::`vector deleting destructor'
EXTRN	?Parse@OGRStyleLabel@@EAEHXZ:PROC		; OGRStyleLabel::Parse
EXTRN	?GetStyleString@OGRStyleLabel@@UAEPBDXZ:PROC	; OGRStyleLabel::GetStyleString
;	COMDAT ??_R1A@?0A@EA@OGRStyleLabel@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRStyleLabel@@8 DD FLAT:??_R0?AVOGRStyleLabel@@@8 ; OGRStyleLabel::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRStyleLabel@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRStyleLabel@@8
rdata$r	SEGMENT
??_R2OGRStyleLabel@@8 DD FLAT:??_R1A@?0A@EA@OGRStyleLabel@@8 ; OGRStyleLabel::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@OGRStyleTool@@8
rdata$r	ENDS
;	COMDAT ??_R3OGRStyleLabel@@8
rdata$r	SEGMENT
??_R3OGRStyleLabel@@8 DD 00H				; OGRStyleLabel::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2OGRStyleLabel@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRStyleLabel@@@8
_DATA	SEGMENT
??_R0?AVOGRStyleLabel@@@8 DD FLAT:??_7type_info@@6B@	; OGRStyleLabel `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRStyleLabel@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRStyleLabel@@6B@
rdata$r	SEGMENT
??_R4OGRStyleLabel@@6B@ DD 00H				; OGRStyleLabel::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRStyleLabel@@@8
	DD	FLAT:??_R3OGRStyleLabel@@8
rdata$r	ENDS
;	COMDAT ??_7OGRStyleLabel@@6B@
CONST	SEGMENT
??_7OGRStyleLabel@@6B@ DD FLAT:??_R4OGRStyleLabel@@6B@	; OGRStyleLabel::`vftable'
	DD	FLAT:?Parse@OGRStyleLabel@@EAEHXZ
	DD	FLAT:??_EOGRStyleLabel@@UAEPAXI@Z
	DD	FLAT:?GetStyleString@OGRStyleLabel@@UAEPBDXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRStyleLabel@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRStyleLabel@@QAE@ABV0@@Z PROC			; OGRStyleLabel::OGRStyleLabel, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleTool@@6B@
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax], OFFSET ??_7OGRStyleLabel@@6B@
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??0OGRStyleLabel@@QAE@ABV0@@Z ENDP			; OGRStyleLabel::OGRStyleLabel
_TEXT	ENDS
PUBLIC	??4OGRStyleLabel@@QAEAAV0@ABV0@@Z		; OGRStyleLabel::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRStyleLabel@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRStyleLabel@@QAEAAV0@ABV0@@Z PROC			; OGRStyleLabel::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	fld	QWORD PTR [ecx+16]
	fstp	QWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	ebp
	ret	4
??4OGRStyleLabel@@QAEAAV0@ABV0@@Z ENDP			; OGRStyleLabel::operator=
_TEXT	ENDS
PUBLIC	??_GOGRStyleLabel@@UAEPAXI@Z			; OGRStyleLabel::`scalar deleting destructor'
EXTRN	??1OGRStyleLabel@@UAE@XZ:PROC			; OGRStyleLabel::~OGRStyleLabel
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRStyleLabel@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRStyleLabel@@UAEPAXI@Z PROC			; OGRStyleLabel::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRStyleLabel@@UAE@XZ		; OGRStyleLabel::~OGRStyleLabel
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@18
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@18:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRStyleLabel@@UAEPAXI@Z ENDP			; OGRStyleLabel::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRStyleLabel@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRStyleLabel@@UAEPAXI@Z PROC			; OGRStyleLabel::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@18
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRStyleLabel@@UAE@XZ		; OGRStyleLabel::~OGRStyleLabel
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	48					; 00000030H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@18
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@18:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@18:
	call	??1OGRStyleLabel@@UAE@XZ		; OGRStyleLabel::~OGRStyleLabel
	test	bl, 1
	je	SHORT $LN1@vector@18
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@18:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRStyleLabel@@UAEPAXI@Z ENDP			; OGRStyleLabel::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	_CPLAtomicInc
EXTRN	_CPLAtomicAdd:PROC
; Function compile flags: /Ogtp
;	COMDAT _CPLAtomicInc
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_CPLAtomicInc PROC					; COMDAT
; File c:\osgeo4w\include\cpl_atomic_ops.h
; Line 74
	push	ebp
	mov	ebp, esp
; Line 75
	mov	eax, DWORD PTR _ptr$[ebp]
	push	1
	push	eax
	call	_CPLAtomicAdd
	add	esp, 8
; Line 76
	pop	ebp
	ret	0
_CPLAtomicInc ENDP
_TEXT	ENDS
PUBLIC	_CPLAtomicDec
; Function compile flags: /Ogtp
;	COMDAT _CPLAtomicDec
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_CPLAtomicDec PROC					; COMDAT
; Line 92
	push	ebp
	mov	ebp, esp
; Line 93
	mov	eax, DWORD PTR _ptr$[ebp]
	push	-1
	push	eax
	call	_CPLAtomicAdd
	add	esp, 8
; Line 94
	pop	ebp
	ret	0
_CPLAtomicDec ENDP
_TEXT	ENDS
PUBLIC	?GetNameRef@OGRFieldDefn@@QAEPBDXZ		; OGRFieldDefn::GetNameRef
; Function compile flags: /Ogtp
;	COMDAT ?GetNameRef@OGRFieldDefn@@QAEPBDXZ
_TEXT	SEGMENT
?GetNameRef@OGRFieldDefn@@QAEPBDXZ PROC			; OGRFieldDefn::GetNameRef, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogr_feature.h
; Line 71
	mov	eax, DWORD PTR [ecx]
	ret	0
?GetNameRef@OGRFieldDefn@@QAEPBDXZ ENDP			; OGRFieldDefn::GetNameRef
_TEXT	ENDS
PUBLIC	?GetType@OGRFieldDefn@@QAE?AW4OGRFieldType@@XZ	; OGRFieldDefn::GetType
; Function compile flags: /Ogtp
;	COMDAT ?GetType@OGRFieldDefn@@QAE?AW4OGRFieldType@@XZ
_TEXT	SEGMENT
?GetType@OGRFieldDefn@@QAE?AW4OGRFieldType@@XZ PROC	; OGRFieldDefn::GetType, COMDAT
; _this$ = ecx
; Line 73
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetType@OGRFieldDefn@@QAE?AW4OGRFieldType@@XZ ENDP	; OGRFieldDefn::GetType
_TEXT	ENDS
PUBLIC	?SetType@OGRFieldDefn@@QAEXW4OGRFieldType@@@Z	; OGRFieldDefn::SetType
; Function compile flags: /Ogtp
;	COMDAT ?SetType@OGRFieldDefn@@QAEXW4OGRFieldType@@@Z
_TEXT	SEGMENT
_eTypeIn$ = 8						; size = 4
?SetType@OGRFieldDefn@@QAEXW4OGRFieldType@@@Z PROC	; OGRFieldDefn::SetType, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _eTypeIn$[ebp]
	mov	DWORD PTR [ecx+4], eax
	pop	ebp
	ret	4
?SetType@OGRFieldDefn@@QAEXW4OGRFieldType@@@Z ENDP	; OGRFieldDefn::SetType
_TEXT	ENDS
PUBLIC	?GetJustify@OGRFieldDefn@@QAE?AW4OGRJustification@@XZ ; OGRFieldDefn::GetJustify
; Function compile flags: /Ogtp
;	COMDAT ?GetJustify@OGRFieldDefn@@QAE?AW4OGRJustification@@XZ
_TEXT	SEGMENT
?GetJustify@OGRFieldDefn@@QAE?AW4OGRJustification@@XZ PROC ; OGRFieldDefn::GetJustify, COMDAT
; _this$ = ecx
; Line 77
	mov	eax, DWORD PTR [ecx+8]
	ret	0
?GetJustify@OGRFieldDefn@@QAE?AW4OGRJustification@@XZ ENDP ; OGRFieldDefn::GetJustify
_TEXT	ENDS
PUBLIC	?SetJustify@OGRFieldDefn@@QAEXW4OGRJustification@@@Z ; OGRFieldDefn::SetJustify
; Function compile flags: /Ogtp
;	COMDAT ?SetJustify@OGRFieldDefn@@QAEXW4OGRJustification@@@Z
_TEXT	SEGMENT
_eJustifyIn$ = 8					; size = 4
?SetJustify@OGRFieldDefn@@QAEXW4OGRJustification@@@Z PROC ; OGRFieldDefn::SetJustify, COMDAT
; _this$ = ecx
; Line 79
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _eJustifyIn$[ebp]
	mov	DWORD PTR [ecx+8], eax
	pop	ebp
	ret	4
?SetJustify@OGRFieldDefn@@QAEXW4OGRJustification@@@Z ENDP ; OGRFieldDefn::SetJustify
_TEXT	ENDS
PUBLIC	?GetWidth@OGRFieldDefn@@QAEHXZ			; OGRFieldDefn::GetWidth
; Function compile flags: /Ogtp
;	COMDAT ?GetWidth@OGRFieldDefn@@QAEHXZ
_TEXT	SEGMENT
?GetWidth@OGRFieldDefn@@QAEHXZ PROC			; OGRFieldDefn::GetWidth, COMDAT
; _this$ = ecx
; Line 81
	mov	eax, DWORD PTR [ecx+12]
	ret	0
?GetWidth@OGRFieldDefn@@QAEHXZ ENDP			; OGRFieldDefn::GetWidth
_TEXT	ENDS
PUBLIC	?SetWidth@OGRFieldDefn@@QAEXH@Z			; OGRFieldDefn::SetWidth
; Function compile flags: /Ogtp
;	COMDAT ?SetWidth@OGRFieldDefn@@QAEXH@Z
_TEXT	SEGMENT
_nWidthIn$ = 8						; size = 4
?SetWidth@OGRFieldDefn@@QAEXH@Z PROC			; OGRFieldDefn::SetWidth, COMDAT
; _this$ = ecx
; Line 82
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nWidthIn$[ebp]
	xor	edx, edx
	test	eax, eax
	sets	dl
	dec	edx
	and	edx, eax
	mov	DWORD PTR [ecx+12], edx
	pop	ebp
	ret	4
?SetWidth@OGRFieldDefn@@QAEXH@Z ENDP			; OGRFieldDefn::SetWidth
_TEXT	ENDS
PUBLIC	?GetPrecision@OGRFieldDefn@@QAEHXZ		; OGRFieldDefn::GetPrecision
; Function compile flags: /Ogtp
;	COMDAT ?GetPrecision@OGRFieldDefn@@QAEHXZ
_TEXT	SEGMENT
?GetPrecision@OGRFieldDefn@@QAEHXZ PROC			; OGRFieldDefn::GetPrecision, COMDAT
; _this$ = ecx
; Line 84
	mov	eax, DWORD PTR [ecx+16]
	ret	0
?GetPrecision@OGRFieldDefn@@QAEHXZ ENDP			; OGRFieldDefn::GetPrecision
_TEXT	ENDS
PUBLIC	?SetPrecision@OGRFieldDefn@@QAEXH@Z		; OGRFieldDefn::SetPrecision
; Function compile flags: /Ogtp
;	COMDAT ?SetPrecision@OGRFieldDefn@@QAEXH@Z
_TEXT	SEGMENT
_nPrecisionIn$ = 8					; size = 4
?SetPrecision@OGRFieldDefn@@QAEXH@Z PROC		; OGRFieldDefn::SetPrecision, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nPrecisionIn$[ebp]
	mov	DWORD PTR [ecx+16], eax
	pop	ebp
	ret	4
?SetPrecision@OGRFieldDefn@@QAEXH@Z ENDP		; OGRFieldDefn::SetPrecision
_TEXT	ENDS
PUBLIC	?GetDefaultRef@OGRFieldDefn@@QAEPBTOGRField@@XZ	; OGRFieldDefn::GetDefaultRef
; Function compile flags: /Ogtp
;	COMDAT ?GetDefaultRef@OGRFieldDefn@@QAEPBTOGRField@@XZ
_TEXT	SEGMENT
?GetDefaultRef@OGRFieldDefn@@QAEPBTOGRField@@XZ PROC	; OGRFieldDefn::GetDefaultRef, COMDAT
; _this$ = ecx
; Line 92
	lea	eax, DWORD PTR [ecx+24]
	ret	0
?GetDefaultRef@OGRFieldDefn@@QAEPBTOGRField@@XZ ENDP	; OGRFieldDefn::GetDefaultRef
_TEXT	ENDS
PUBLIC	?IsIgnored@OGRFieldDefn@@QAEHXZ			; OGRFieldDefn::IsIgnored
; Function compile flags: /Ogtp
;	COMDAT ?IsIgnored@OGRFieldDefn@@QAEHXZ
_TEXT	SEGMENT
?IsIgnored@OGRFieldDefn@@QAEHXZ PROC			; OGRFieldDefn::IsIgnored, COMDAT
; _this$ = ecx
; Line 94
	mov	eax, DWORD PTR [ecx+32]
	ret	0
?IsIgnored@OGRFieldDefn@@QAEHXZ ENDP			; OGRFieldDefn::IsIgnored
_TEXT	ENDS
PUBLIC	?SetIgnored@OGRFieldDefn@@QAEXH@Z		; OGRFieldDefn::SetIgnored
; Function compile flags: /Ogtp
;	COMDAT ?SetIgnored@OGRFieldDefn@@QAEXH@Z
_TEXT	SEGMENT
_bIgnore$ = 8						; size = 4
?SetIgnored@OGRFieldDefn@@QAEXH@Z PROC			; OGRFieldDefn::SetIgnored, COMDAT
; _this$ = ecx
; Line 95
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bIgnore$[ebp]
	mov	DWORD PTR [ecx+32], eax
	pop	ebp
	ret	4
?SetIgnored@OGRFieldDefn@@QAEXH@Z ENDP			; OGRFieldDefn::SetIgnored
_TEXT	ENDS
PUBLIC	??4OGRFieldDefn@@QAEAAV0@ABV0@@Z		; OGRFieldDefn::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRFieldDefn@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRFieldDefn@@QAEAAV0@ABV0@@Z PROC			; OGRFieldDefn::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	push	edi
	mov	eax, ecx
	mov	ecx, 10					; 0000000aH
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4OGRFieldDefn@@QAEAAV0@ABV0@@Z ENDP			; OGRFieldDefn::operator=
_TEXT	ENDS
PUBLIC	?GetName@OGRFeatureDefn@@QAEPBDXZ		; OGRFeatureDefn::GetName
; Function compile flags: /Ogtp
;	COMDAT ?GetName@OGRFeatureDefn@@QAEPBDXZ
_TEXT	SEGMENT
?GetName@OGRFeatureDefn@@QAEPBDXZ PROC			; OGRFeatureDefn::GetName, COMDAT
; _this$ = ecx
; Line 137
	mov	eax, DWORD PTR [ecx+20]
	ret	0
?GetName@OGRFeatureDefn@@QAEPBDXZ ENDP			; OGRFeatureDefn::GetName
_TEXT	ENDS
PUBLIC	?GetFieldCount@OGRFeatureDefn@@QAEHXZ		; OGRFeatureDefn::GetFieldCount
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldCount@OGRFeatureDefn@@QAEHXZ
_TEXT	SEGMENT
?GetFieldCount@OGRFeatureDefn@@QAEHXZ PROC		; OGRFeatureDefn::GetFieldCount, COMDAT
; _this$ = ecx
; Line 139
	mov	eax, DWORD PTR [ecx+8]
	ret	0
?GetFieldCount@OGRFeatureDefn@@QAEHXZ ENDP		; OGRFeatureDefn::GetFieldCount
_TEXT	ENDS
PUBLIC	?GetGeomType@OGRFeatureDefn@@QAE?AW4OGRwkbGeometryType@@XZ ; OGRFeatureDefn::GetGeomType
; Function compile flags: /Ogtp
;	COMDAT ?GetGeomType@OGRFeatureDefn@@QAE?AW4OGRwkbGeometryType@@XZ
_TEXT	SEGMENT
?GetGeomType@OGRFeatureDefn@@QAE?AW4OGRwkbGeometryType@@XZ PROC ; OGRFeatureDefn::GetGeomType, COMDAT
; _this$ = ecx
; Line 147
	mov	eax, DWORD PTR [ecx+16]
	ret	0
?GetGeomType@OGRFeatureDefn@@QAE?AW4OGRwkbGeometryType@@XZ ENDP ; OGRFeatureDefn::GetGeomType
_TEXT	ENDS
PUBLIC	?Reference@OGRFeatureDefn@@QAEHXZ		; OGRFeatureDefn::Reference
; Function compile flags: /Ogtp
;	COMDAT ?Reference@OGRFeatureDefn@@QAEHXZ
_TEXT	SEGMENT
?Reference@OGRFeatureDefn@@QAEHXZ PROC			; OGRFeatureDefn::Reference, COMDAT
; _this$ = ecx
; Line 152
	add	ecx, 4
	push	1
	push	ecx
	call	_CPLAtomicAdd
	add	esp, 8
	ret	0
?Reference@OGRFeatureDefn@@QAEHXZ ENDP			; OGRFeatureDefn::Reference
_TEXT	ENDS
PUBLIC	?Dereference@OGRFeatureDefn@@QAEHXZ		; OGRFeatureDefn::Dereference
; Function compile flags: /Ogtp
;	COMDAT ?Dereference@OGRFeatureDefn@@QAEHXZ
_TEXT	SEGMENT
?Dereference@OGRFeatureDefn@@QAEHXZ PROC		; OGRFeatureDefn::Dereference, COMDAT
; _this$ = ecx
; Line 153
	add	ecx, 4
	push	-1
	push	ecx
	call	_CPLAtomicAdd
	add	esp, 8
	ret	0
?Dereference@OGRFeatureDefn@@QAEHXZ ENDP		; OGRFeatureDefn::Dereference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@OGRFeatureDefn@@QAEHXZ	; OGRFeatureDefn::GetReferenceCount
; Function compile flags: /Ogtp
;	COMDAT ?GetReferenceCount@OGRFeatureDefn@@QAEHXZ
_TEXT	SEGMENT
?GetReferenceCount@OGRFeatureDefn@@QAEHXZ PROC		; OGRFeatureDefn::GetReferenceCount, COMDAT
; _this$ = ecx
; Line 154
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetReferenceCount@OGRFeatureDefn@@QAEHXZ ENDP		; OGRFeatureDefn::GetReferenceCount
_TEXT	ENDS
PUBLIC	?IsGeometryIgnored@OGRFeatureDefn@@QAEHXZ	; OGRFeatureDefn::IsGeometryIgnored
; Function compile flags: /Ogtp
;	COMDAT ?IsGeometryIgnored@OGRFeatureDefn@@QAEHXZ
_TEXT	SEGMENT
?IsGeometryIgnored@OGRFeatureDefn@@QAEHXZ PROC		; OGRFeatureDefn::IsGeometryIgnored, COMDAT
; _this$ = ecx
; Line 157
	mov	eax, DWORD PTR [ecx+24]
	ret	0
?IsGeometryIgnored@OGRFeatureDefn@@QAEHXZ ENDP		; OGRFeatureDefn::IsGeometryIgnored
_TEXT	ENDS
PUBLIC	?SetGeometryIgnored@OGRFeatureDefn@@QAEXH@Z	; OGRFeatureDefn::SetGeometryIgnored
; Function compile flags: /Ogtp
;	COMDAT ?SetGeometryIgnored@OGRFeatureDefn@@QAEXH@Z
_TEXT	SEGMENT
_bIgnore$ = 8						; size = 4
?SetGeometryIgnored@OGRFeatureDefn@@QAEXH@Z PROC	; OGRFeatureDefn::SetGeometryIgnored, COMDAT
; _this$ = ecx
; Line 158
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bIgnore$[ebp]
	mov	DWORD PTR [ecx+24], eax
	pop	ebp
	ret	4
?SetGeometryIgnored@OGRFeatureDefn@@QAEXH@Z ENDP	; OGRFeatureDefn::SetGeometryIgnored
_TEXT	ENDS
PUBLIC	?IsStyleIgnored@OGRFeatureDefn@@QAEHXZ		; OGRFeatureDefn::IsStyleIgnored
; Function compile flags: /Ogtp
;	COMDAT ?IsStyleIgnored@OGRFeatureDefn@@QAEHXZ
_TEXT	SEGMENT
?IsStyleIgnored@OGRFeatureDefn@@QAEHXZ PROC		; OGRFeatureDefn::IsStyleIgnored, COMDAT
; _this$ = ecx
; Line 159
	mov	eax, DWORD PTR [ecx+28]
	ret	0
?IsStyleIgnored@OGRFeatureDefn@@QAEHXZ ENDP		; OGRFeatureDefn::IsStyleIgnored
_TEXT	ENDS
PUBLIC	?SetStyleIgnored@OGRFeatureDefn@@QAEXH@Z	; OGRFeatureDefn::SetStyleIgnored
; Function compile flags: /Ogtp
;	COMDAT ?SetStyleIgnored@OGRFeatureDefn@@QAEXH@Z
_TEXT	SEGMENT
_bIgnore$ = 8						; size = 4
?SetStyleIgnored@OGRFeatureDefn@@QAEXH@Z PROC		; OGRFeatureDefn::SetStyleIgnored, COMDAT
; _this$ = ecx
; Line 160
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _bIgnore$[ebp]
	mov	DWORD PTR [ecx+28], eax
	pop	ebp
	ret	4
?SetStyleIgnored@OGRFeatureDefn@@QAEXH@Z ENDP		; OGRFeatureDefn::SetStyleIgnored
_TEXT	ENDS
PUBLIC	??_7OGRFeatureDefn@@6B@				; OGRFeatureDefn::`vftable'
PUBLIC	??0OGRFeatureDefn@@QAE@ABV0@@Z			; OGRFeatureDefn::OGRFeatureDefn
PUBLIC	??_R4OGRFeatureDefn@@6B@			; OGRFeatureDefn::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRFeatureDefn@@@8			; OGRFeatureDefn `RTTI Type Descriptor'
PUBLIC	??_R3OGRFeatureDefn@@8				; OGRFeatureDefn::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRFeatureDefn@@8				; OGRFeatureDefn::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRFeatureDefn@@8			; OGRFeatureDefn::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRFeatureDefn@@UAEPAXI@Z			; OGRFeatureDefn::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@OGRFeatureDefn@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRFeatureDefn@@8 DD FLAT:??_R0?AVOGRFeatureDefn@@@8 ; OGRFeatureDefn::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRFeatureDefn@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRFeatureDefn@@8
rdata$r	SEGMENT
??_R2OGRFeatureDefn@@8 DD FLAT:??_R1A@?0A@EA@OGRFeatureDefn@@8 ; OGRFeatureDefn::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRFeatureDefn@@8
rdata$r	SEGMENT
??_R3OGRFeatureDefn@@8 DD 00H				; OGRFeatureDefn::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRFeatureDefn@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRFeatureDefn@@@8
_DATA	SEGMENT
??_R0?AVOGRFeatureDefn@@@8 DD FLAT:??_7type_info@@6B@	; OGRFeatureDefn `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRFeatureDefn@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRFeatureDefn@@6B@
rdata$r	SEGMENT
??_R4OGRFeatureDefn@@6B@ DD 00H				; OGRFeatureDefn::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRFeatureDefn@@@8
	DD	FLAT:??_R3OGRFeatureDefn@@8
rdata$r	ENDS
;	COMDAT ??_7OGRFeatureDefn@@6B@
CONST	SEGMENT
??_7OGRFeatureDefn@@6B@ DD FLAT:??_R4OGRFeatureDefn@@6B@ ; OGRFeatureDefn::`vftable'
	DD	FLAT:??_EOGRFeatureDefn@@UAEPAXI@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRFeatureDefn@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRFeatureDefn@@QAE@ABV0@@Z PROC			; OGRFeatureDefn::OGRFeatureDefn, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRFeatureDefn@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	pop	ebp
	ret	4
??0OGRFeatureDefn@@QAE@ABV0@@Z ENDP			; OGRFeatureDefn::OGRFeatureDefn
_TEXT	ENDS
PUBLIC	??4OGRFeatureDefn@@QAEAAV0@ABV0@@Z		; OGRFeatureDefn::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRFeatureDefn@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRFeatureDefn@@QAEAAV0@ABV0@@Z PROC			; OGRFeatureDefn::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	pop	ebp
	ret	4
??4OGRFeatureDefn@@QAEAAV0@ABV0@@Z ENDP			; OGRFeatureDefn::operator=
_TEXT	ENDS
PUBLIC	??_FOGRFeatureDefn@@QAEXXZ			; OGRFeatureDefn::`default constructor closure'
EXTRN	??0OGRFeatureDefn@@QAE@PBD@Z:PROC		; OGRFeatureDefn::OGRFeatureDefn
; Function compile flags: /Ogtp
;	COMDAT ??_FOGRFeatureDefn@@QAEXXZ
_TEXT	SEGMENT
??_FOGRFeatureDefn@@QAEXXZ PROC				; OGRFeatureDefn::`default constructor closure', COMDAT
; _this$ = ecx
	push	0
	call	??0OGRFeatureDefn@@QAE@PBD@Z		; OGRFeatureDefn::OGRFeatureDefn
	ret	0
??_FOGRFeatureDefn@@QAEXXZ ENDP				; OGRFeatureDefn::`default constructor closure'
_TEXT	ENDS
PUBLIC	??_GOGRFeatureDefn@@UAEPAXI@Z			; OGRFeatureDefn::`scalar deleting destructor'
EXTRN	??1OGRFeatureDefn@@UAE@XZ:PROC			; OGRFeatureDefn::~OGRFeatureDefn
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRFeatureDefn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRFeatureDefn@@UAEPAXI@Z PROC			; OGRFeatureDefn::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRFeatureDefn@@UAE@XZ		; OGRFeatureDefn::~OGRFeatureDefn
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@19
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@19:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRFeatureDefn@@UAEPAXI@Z ENDP			; OGRFeatureDefn::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRFeatureDefn@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRFeatureDefn@@UAEPAXI@Z PROC			; OGRFeatureDefn::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@19
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRFeatureDefn@@UAE@XZ	; OGRFeatureDefn::~OGRFeatureDefn
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	32					; 00000020H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@19
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@19:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@19:
	call	??1OGRFeatureDefn@@UAE@XZ		; OGRFeatureDefn::~OGRFeatureDefn
	test	bl, 1
	je	SHORT $LN1@vector@19
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@19:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRFeatureDefn@@UAEPAXI@Z ENDP			; OGRFeatureDefn::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?GetDefnRef@OGRFeature@@QAEPAVOGRFeatureDefn@@XZ ; OGRFeature::GetDefnRef
; Function compile flags: /Ogtp
;	COMDAT ?GetDefnRef@OGRFeature@@QAEPAVOGRFeatureDefn@@XZ
_TEXT	SEGMENT
?GetDefnRef@OGRFeature@@QAEPAVOGRFeatureDefn@@XZ PROC	; OGRFeature::GetDefnRef, COMDAT
; _this$ = ecx
; Line 192
	mov	eax, DWORD PTR [ecx+8]
	ret	0
?GetDefnRef@OGRFeature@@QAEPAVOGRFeatureDefn@@XZ ENDP	; OGRFeature::GetDefnRef
_TEXT	ENDS
PUBLIC	?GetGeometryRef@OGRFeature@@QAEPAVOGRGeometry@@XZ ; OGRFeature::GetGeometryRef
; Function compile flags: /Ogtp
;	COMDAT ?GetGeometryRef@OGRFeature@@QAEPAVOGRGeometry@@XZ
_TEXT	SEGMENT
?GetGeometryRef@OGRFeature@@QAEPAVOGRGeometry@@XZ PROC	; OGRFeature::GetGeometryRef, COMDAT
; _this$ = ecx
; Line 196
	mov	eax, DWORD PTR [ecx+12]
	ret	0
?GetGeometryRef@OGRFeature@@QAEPAVOGRGeometry@@XZ ENDP	; OGRFeature::GetGeometryRef
_TEXT	ENDS
PUBLIC	?GetFieldCount@OGRFeature@@QAEHXZ		; OGRFeature::GetFieldCount
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldCount@OGRFeature@@QAEHXZ
_TEXT	SEGMENT
?GetFieldCount@OGRFeature@@QAEHXZ PROC			; OGRFeature::GetFieldCount, COMDAT
; _this$ = ecx
; Line 202
	mov	eax, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+8]
	ret	0
?GetFieldCount@OGRFeature@@QAEHXZ ENDP			; OGRFeature::GetFieldCount
_TEXT	ENDS
PUBLIC	?GetFieldDefnRef@OGRFeature@@QAEPAVOGRFieldDefn@@H@Z ; OGRFeature::GetFieldDefnRef
EXTRN	?GetFieldDefn@OGRFeatureDefn@@QAEPAVOGRFieldDefn@@H@Z:PROC ; OGRFeatureDefn::GetFieldDefn
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldDefnRef@OGRFeature@@QAEPAVOGRFieldDefn@@H@Z
_TEXT	SEGMENT
_iField$ = 8						; size = 4
?GetFieldDefnRef@OGRFeature@@QAEPAVOGRFieldDefn@@H@Z PROC ; OGRFeature::GetFieldDefnRef, COMDAT
; _this$ = ecx
; Line 204
	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR [ecx+8]
	pop	ebp
	jmp	?GetFieldDefn@OGRFeatureDefn@@QAEPAVOGRFieldDefn@@H@Z ; OGRFeatureDefn::GetFieldDefn
?GetFieldDefnRef@OGRFeature@@QAEPAVOGRFieldDefn@@H@Z ENDP ; OGRFeature::GetFieldDefnRef
_TEXT	ENDS
PUBLIC	?GetFieldIndex@OGRFeature@@QAEHPBD@Z		; OGRFeature::GetFieldIndex
EXTRN	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z:PROC	; OGRFeatureDefn::GetFieldIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldIndex@OGRFeature@@QAEHPBD@Z
_TEXT	SEGMENT
_pszName$ = 8						; size = 4
?GetFieldIndex@OGRFeature@@QAEHPBD@Z PROC		; OGRFeature::GetFieldIndex, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR [ecx+8]
	pop	ebp
	jmp	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
?GetFieldIndex@OGRFeature@@QAEHPBD@Z ENDP		; OGRFeature::GetFieldIndex
_TEXT	ENDS
PUBLIC	?GetRawFieldRef@OGRFeature@@QAEPATOGRField@@H@Z	; OGRFeature::GetRawFieldRef
; Function compile flags: /Ogtp
;	COMDAT ?GetRawFieldRef@OGRFeature@@QAEPATOGRField@@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?GetRawFieldRef@OGRFeature@@QAEPATOGRField@@H@Z PROC	; OGRFeature::GetRawFieldRef, COMDAT
; _this$ = ecx
; Line 212
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
	pop	ebp
	ret	4
?GetRawFieldRef@OGRFeature@@QAEPATOGRField@@H@Z ENDP	; OGRFeature::GetRawFieldRef
_TEXT	ENDS
PUBLIC	?GetFieldAsInteger@OGRFeature@@QAEHPBD@Z	; OGRFeature::GetFieldAsInteger
EXTRN	?GetFieldAsInteger@OGRFeature@@QAEHH@Z:PROC	; OGRFeature::GetFieldAsInteger
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldAsInteger@OGRFeature@@QAEHPBD@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
?GetFieldAsInteger@OGRFeature@@QAEHPBD@Z PROC		; OGRFeature::GetFieldAsInteger, COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?GetFieldAsInteger@OGRFeature@@QAEHH@Z	; OGRFeature::GetFieldAsInteger
	pop	esi
	pop	ebp
	ret	4
?GetFieldAsInteger@OGRFeature@@QAEHPBD@Z ENDP		; OGRFeature::GetFieldAsInteger
_TEXT	ENDS
PUBLIC	?GetFieldAsDouble@OGRFeature@@QAENPBD@Z		; OGRFeature::GetFieldAsDouble
EXTRN	?GetFieldAsDouble@OGRFeature@@QAENH@Z:PROC	; OGRFeature::GetFieldAsDouble
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldAsDouble@OGRFeature@@QAENPBD@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
?GetFieldAsDouble@OGRFeature@@QAENPBD@Z PROC		; OGRFeature::GetFieldAsDouble, COMDAT
; _this$ = ecx
; Line 229
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?GetFieldAsDouble@OGRFeature@@QAENH@Z	; OGRFeature::GetFieldAsDouble
	pop	esi
	pop	ebp
	ret	4
?GetFieldAsDouble@OGRFeature@@QAENPBD@Z ENDP		; OGRFeature::GetFieldAsDouble
_TEXT	ENDS
PUBLIC	?GetFieldAsString@OGRFeature@@QAEPBDPBD@Z	; OGRFeature::GetFieldAsString
EXTRN	?GetFieldAsString@OGRFeature@@QAEPBDH@Z:PROC	; OGRFeature::GetFieldAsString
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldAsString@OGRFeature@@QAEPBDPBD@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
?GetFieldAsString@OGRFeature@@QAEPBDPBD@Z PROC		; OGRFeature::GetFieldAsString, COMDAT
; _this$ = ecx
; Line 231
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?GetFieldAsString@OGRFeature@@QAEPBDH@Z	; OGRFeature::GetFieldAsString
	pop	esi
	pop	ebp
	ret	4
?GetFieldAsString@OGRFeature@@QAEPBDPBD@Z ENDP		; OGRFeature::GetFieldAsString
_TEXT	ENDS
PUBLIC	?GetFieldAsIntegerList@OGRFeature@@QAEPBHPBDPAH@Z ; OGRFeature::GetFieldAsIntegerList
EXTRN	?GetFieldAsIntegerList@OGRFeature@@QAEPBHHPAH@Z:PROC ; OGRFeature::GetFieldAsIntegerList
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldAsIntegerList@OGRFeature@@QAEPBHPBDPAH@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_pnCount$ = 12						; size = 4
?GetFieldAsIntegerList@OGRFeature@@QAEPBHPBDPAH@Z PROC	; OGRFeature::GetFieldAsIntegerList, COMDAT
; _this$ = ecx
; Line 234
	push	ebp
	mov	ebp, esp
; Line 235
	mov	eax, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	mov	ecx, DWORD PTR _pnCount$[ebp]
	push	ecx
	push	eax
	mov	ecx, esi
	call	?GetFieldAsIntegerList@OGRFeature@@QAEPBHHPAH@Z ; OGRFeature::GetFieldAsIntegerList
	pop	esi
	pop	ebp
	ret	8
?GetFieldAsIntegerList@OGRFeature@@QAEPBHPBDPAH@Z ENDP	; OGRFeature::GetFieldAsIntegerList
_TEXT	ENDS
PUBLIC	?GetFieldAsDoubleList@OGRFeature@@QAEPBNPBDPAH@Z ; OGRFeature::GetFieldAsDoubleList
EXTRN	?GetFieldAsDoubleList@OGRFeature@@QAEPBNHPAH@Z:PROC ; OGRFeature::GetFieldAsDoubleList
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldAsDoubleList@OGRFeature@@QAEPBNPBDPAH@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_pnCount$ = 12						; size = 4
?GetFieldAsDoubleList@OGRFeature@@QAEPBNPBDPAH@Z PROC	; OGRFeature::GetFieldAsDoubleList, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
; Line 239
	mov	eax, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	mov	ecx, DWORD PTR _pnCount$[ebp]
	push	ecx
	push	eax
	mov	ecx, esi
	call	?GetFieldAsDoubleList@OGRFeature@@QAEPBNHPAH@Z ; OGRFeature::GetFieldAsDoubleList
	pop	esi
	pop	ebp
	ret	8
?GetFieldAsDoubleList@OGRFeature@@QAEPBNPBDPAH@Z ENDP	; OGRFeature::GetFieldAsDoubleList
_TEXT	ENDS
PUBLIC	?GetFieldAsStringList@OGRFeature@@QAEPAPADPBD@Z	; OGRFeature::GetFieldAsStringList
EXTRN	?GetFieldAsStringList@OGRFeature@@QBEPAPADH@Z:PROC ; OGRFeature::GetFieldAsStringList
; Function compile flags: /Ogtp
;	COMDAT ?GetFieldAsStringList@OGRFeature@@QAEPAPADPBD@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
?GetFieldAsStringList@OGRFeature@@QAEPAPADPBD@Z PROC	; OGRFeature::GetFieldAsStringList, COMDAT
; _this$ = ecx
; Line 241
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?GetFieldAsStringList@OGRFeature@@QBEPAPADH@Z ; OGRFeature::GetFieldAsStringList
	pop	esi
	pop	ebp
	ret	4
?GetFieldAsStringList@OGRFeature@@QAEPAPADPBD@Z ENDP	; OGRFeature::GetFieldAsStringList
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBDH@Z		; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHH@Z:PROC		; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBDH@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_nValue$ = 12						; size = 4
?SetField@OGRFeature@@QAEXPBDH@Z PROC			; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 256
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _nValue$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _pszFName$[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHH@Z		; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	8
?SetField@OGRFeature@@QAEXPBDH@Z ENDP			; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBDN@Z		; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHN@Z:PROC		; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBDN@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_dfValue$ = 12						; size = 8
?SetField@OGRFeature@@QAEXPBDN@Z PROC			; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 258
	push	ebp
	mov	ebp, esp
	fld	QWORD PTR _dfValue$[ebp]
	mov	eax, DWORD PTR _pszFName$[ebp]
	push	esi
	sub	esp, 8
	mov	esi, ecx
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR [esi+8]
	push	eax
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHN@Z		; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
?SetField@OGRFeature@@QAEXPBDN@Z ENDP			; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBD0@Z		; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHPBD@Z:PROC		; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBD0@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_pszValue$ = 12						; size = 4
?SetField@OGRFeature@@QAEXPBD0@Z PROC			; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 260
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pszValue$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _pszFName$[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHPBD@Z	; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	8
?SetField@OGRFeature@@QAEXPBD0@Z ENDP			; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBDHPAH@Z		; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHHPAH@Z:PROC		; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBDHPAH@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_nCount$ = 12						; size = 4
_panValues$ = 16					; size = 4
?SetField@OGRFeature@@QAEXPBDHPAH@Z PROC		; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 263
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _panValues$[ebp]
	mov	edx, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _nCount$[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	push	edx
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHHPAH@Z	; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
?SetField@OGRFeature@@QAEXPBDHPAH@Z ENDP		; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBDHPAN@Z		; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHHPAN@Z:PROC		; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBDHPAN@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_nCount$ = 12						; size = 4
_padfValues$ = 16					; size = 4
?SetField@OGRFeature@@QAEXPBDHPAN@Z PROC		; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 266
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _padfValues$[ebp]
	mov	edx, DWORD PTR _pszFName$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _nCount$[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	push	edx
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHHPAN@Z	; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
?SetField@OGRFeature@@QAEXPBDHPAN@Z ENDP		; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBDPAPAD@Z		; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHPAPAD@Z:PROC		; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBDPAPAD@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_papszValues$ = 12					; size = 4
?SetField@OGRFeature@@QAEXPBDPAPAD@Z PROC		; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 268
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _papszValues$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _pszFName$[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHPAPAD@Z	; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	8
?SetField@OGRFeature@@QAEXPBDPAPAD@Z ENDP		; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBDPATOGRField@@@Z	; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHPATOGRField@@@Z:PROC	; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBDPATOGRField@@@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_puValue$ = 12						; size = 4
?SetField@OGRFeature@@QAEXPBDPATOGRField@@@Z PROC	; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 270
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _puValue$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _pszFName$[ebp]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHPATOGRField@@@Z ; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	8
?SetField@OGRFeature@@QAEXPBDPATOGRField@@@Z ENDP	; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?SetField@OGRFeature@@QAEXPBDHHHHHHH@Z		; OGRFeature::SetField
EXTRN	?SetField@OGRFeature@@QAEXHHHHHHHH@Z:PROC	; OGRFeature::SetField
; Function compile flags: /Ogtp
;	COMDAT ?SetField@OGRFeature@@QAEXPBDHHHHHHH@Z
_TEXT	SEGMENT
_pszFName$ = 8						; size = 4
_nYear$ = 12						; size = 4
_nMonth$ = 16						; size = 4
_nDay$ = 20						; size = 4
_nHour$ = 24						; size = 4
_nMinute$ = 28						; size = 4
_nSecond$ = 32						; size = 4
_nTZFlag$ = 36						; size = 4
?SetField@OGRFeature@@QAEXPBDHHHHHHH@Z PROC		; OGRFeature::SetField, COMDAT
; _this$ = ecx
; Line 275
	push	ebp
	mov	ebp, esp
; Line 277
	mov	eax, DWORD PTR _nTZFlag$[ebp]
	mov	edx, DWORD PTR _nMinute$[ebp]
	push	esi
	push	eax
	mov	eax, DWORD PTR _nHour$[ebp]
	mov	esi, ecx
	mov	ecx, DWORD PTR _nSecond$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _nDay$[ebp]
	push	edx
	mov	edx, DWORD PTR _nMonth$[ebp]
	push	eax
	mov	eax, DWORD PTR _nYear$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pszFName$[ebp]
	push	edx
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	call	?GetFieldIndex@OGRFeatureDefn@@QAEHPBD@Z ; OGRFeatureDefn::GetFieldIndex
	push	eax
	mov	ecx, esi
	call	?SetField@OGRFeature@@QAEXHHHHHHHH@Z	; OGRFeature::SetField
	pop	esi
	pop	ebp
	ret	32					; 00000020H
?SetField@OGRFeature@@QAEXPBDHHHHHHH@Z ENDP		; OGRFeature::SetField
_TEXT	ENDS
PUBLIC	?GetFID@OGRFeature@@QAEJXZ			; OGRFeature::GetFID
; Function compile flags: /Ogtp
;	COMDAT ?GetFID@OGRFeature@@QAEJXZ
_TEXT	SEGMENT
?GetFID@OGRFeature@@QAEJXZ PROC				; OGRFeature::GetFID, COMDAT
; _this$ = ecx
; Line 279
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetFID@OGRFeature@@QAEJXZ ENDP				; OGRFeature::GetFID
_TEXT	ENDS
PUBLIC	?GetStyleTable@OGRFeature@@UAEPAVOGRStyleTable@@XZ ; OGRFeature::GetStyleTable
; Function compile flags: /Ogtp
;	COMDAT ?GetStyleTable@OGRFeature@@UAEPAVOGRStyleTable@@XZ
_TEXT	SEGMENT
?GetStyleTable@OGRFeature@@UAEPAVOGRStyleTable@@XZ PROC	; OGRFeature::GetStyleTable, COMDAT
; _this$ = ecx
; Line 293
	mov	eax, DWORD PTR [ecx+24]
	ret	0
?GetStyleTable@OGRFeature@@UAEPAVOGRStyleTable@@XZ ENDP	; OGRFeature::GetStyleTable
_TEXT	ENDS
PUBLIC	??_7OGRFeature@@6B@				; OGRFeature::`vftable'
PUBLIC	??0OGRFeature@@QAE@ABV0@@Z			; OGRFeature::OGRFeature
PUBLIC	??_R4OGRFeature@@6B@				; OGRFeature::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRFeature@@@8				; OGRFeature `RTTI Type Descriptor'
PUBLIC	??_R3OGRFeature@@8				; OGRFeature::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRFeature@@8				; OGRFeature::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRFeature@@8			; OGRFeature::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRFeature@@UAEPAXI@Z			; OGRFeature::`vector deleting destructor'
PUBLIC	?SetStyleTableDirectly@OGRFeature@@UAEXPAVOGRStyleTable@@@Z ; OGRFeature::SetStyleTableDirectly
EXTRN	?Equal@OGRFeature@@UAEHPAV1@@Z:PROC		; OGRFeature::Equal
EXTRN	?SetFID@OGRFeature@@UAEHJ@Z:PROC		; OGRFeature::SetFID
EXTRN	?GetStyleString@OGRFeature@@UAEPBDXZ:PROC	; OGRFeature::GetStyleString
EXTRN	?SetStyleString@OGRFeature@@UAEXPBD@Z:PROC	; OGRFeature::SetStyleString
EXTRN	?SetStyleStringDirectly@OGRFeature@@UAEXPAD@Z:PROC ; OGRFeature::SetStyleStringDirectly
EXTRN	?SetStyleTable@OGRFeature@@UAEXPAVOGRStyleTable@@@Z:PROC ; OGRFeature::SetStyleTable
;	COMDAT ??_R1A@?0A@EA@OGRFeature@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRFeature@@8 DD FLAT:??_R0?AVOGRFeature@@@8 ; OGRFeature::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRFeature@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRFeature@@8
rdata$r	SEGMENT
??_R2OGRFeature@@8 DD FLAT:??_R1A@?0A@EA@OGRFeature@@8	; OGRFeature::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRFeature@@8
rdata$r	SEGMENT
??_R3OGRFeature@@8 DD 00H				; OGRFeature::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRFeature@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRFeature@@@8
_DATA	SEGMENT
??_R0?AVOGRFeature@@@8 DD FLAT:??_7type_info@@6B@	; OGRFeature `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRFeature@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRFeature@@6B@
rdata$r	SEGMENT
??_R4OGRFeature@@6B@ DD 00H				; OGRFeature::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRFeature@@@8
	DD	FLAT:??_R3OGRFeature@@8
rdata$r	ENDS
;	COMDAT ??_7OGRFeature@@6B@
CONST	SEGMENT
??_7OGRFeature@@6B@ DD FLAT:??_R4OGRFeature@@6B@	; OGRFeature::`vftable'
	DD	FLAT:??_EOGRFeature@@UAEPAXI@Z
	DD	FLAT:?Equal@OGRFeature@@UAEHPAV1@@Z
	DD	FLAT:?SetFID@OGRFeature@@UAEHJ@Z
	DD	FLAT:?GetStyleString@OGRFeature@@UAEPBDXZ
	DD	FLAT:?SetStyleString@OGRFeature@@UAEXPBD@Z
	DD	FLAT:?SetStyleStringDirectly@OGRFeature@@UAEXPAD@Z
	DD	FLAT:?GetStyleTable@OGRFeature@@UAEPAVOGRStyleTable@@XZ
	DD	FLAT:?SetStyleTable@OGRFeature@@UAEXPAVOGRStyleTable@@@Z
	DD	FLAT:?SetStyleTableDirectly@OGRFeature@@UAEXPAVOGRStyleTable@@@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRFeature@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRFeature@@QAE@ABV0@@Z PROC				; OGRFeature::OGRFeature, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRFeature@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	pop	ebp
	ret	4
??0OGRFeature@@QAE@ABV0@@Z ENDP				; OGRFeature::OGRFeature
_TEXT	ENDS
PUBLIC	??4OGRFeature@@QAEAAV0@ABV0@@Z			; OGRFeature::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRFeature@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRFeature@@QAEAAV0@ABV0@@Z PROC			; OGRFeature::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], ecx
	pop	ebp
	ret	4
??4OGRFeature@@QAEAAV0@ABV0@@Z ENDP			; OGRFeature::operator=
_TEXT	ENDS
PUBLIC	??_GOGRFeature@@UAEPAXI@Z			; OGRFeature::`scalar deleting destructor'
EXTRN	??1OGRFeature@@UAE@XZ:PROC			; OGRFeature::~OGRFeature
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRFeature@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRFeature@@UAEPAXI@Z PROC				; OGRFeature::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRFeature@@UAE@XZ			; OGRFeature::~OGRFeature
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@20
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@20:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRFeature@@UAEPAXI@Z ENDP				; OGRFeature::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRFeature@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRFeature@@UAEPAXI@Z PROC				; OGRFeature::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@20
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRFeature@@UAE@XZ		; OGRFeature::~OGRFeature
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	32					; 00000020H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@20
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@20:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@20:
	call	??1OGRFeature@@UAE@XZ			; OGRFeature::~OGRFeature
	test	bl, 1
	je	SHORT $LN1@vector@20
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@20:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRFeature@@UAEPAXI@Z ENDP				; OGRFeature::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_GOGRStyleTable@@QAEPAXI@Z			; OGRStyleTable::`scalar deleting destructor'
EXTRN	??1OGRStyleTable@@QAE@XZ:PROC			; OGRStyleTable::~OGRStyleTable
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRStyleTable@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRStyleTable@@QAEPAXI@Z PROC			; OGRStyleTable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRStyleTable@@QAE@XZ		; OGRStyleTable::~OGRStyleTable
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@21
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@21:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRStyleTable@@QAEPAXI@Z ENDP			; OGRStyleTable::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetSWGExpr@OGRFeatureQuery@@QAEPAXXZ		; OGRFeatureQuery::GetSWGExpr
; Function compile flags: /Ogtp
;	COMDAT ?GetSWGExpr@OGRFeatureQuery@@QAEPAXXZ
_TEXT	SEGMENT
?GetSWGExpr@OGRFeatureQuery@@QAEPAXXZ PROC		; OGRFeatureQuery::GetSWGExpr, COMDAT
; _this$ = ecx
; Line 328
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetSWGExpr@OGRFeatureQuery@@QAEPAXXZ ENDP		; OGRFeatureQuery::GetSWGExpr
_TEXT	ENDS
PUBLIC	??4OGRFeatureQuery@@QAEAAV0@ABV0@@Z		; OGRFeatureQuery::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRFeatureQuery@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRFeatureQuery@@QAEAAV0@ABV0@@Z PROC		; OGRFeatureQuery::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	pop	ebp
	ret	4
??4OGRFeatureQuery@@QAEAAV0@ABV0@@Z ENDP		; OGRFeatureQuery::operator=
_TEXT	ENDS
PUBLIC	?GetSpatialRef@OGRLayer@@UAEPAVOGRSpatialReference@@XZ ; OGRLayer::GetSpatialRef
; Function compile flags: /Ogtp
;	COMDAT ?GetSpatialRef@OGRLayer@@UAEPAVOGRSpatialReference@@XZ
_TEXT	SEGMENT
?GetSpatialRef@OGRLayer@@UAEPAVOGRSpatialReference@@XZ PROC ; OGRLayer::GetSpatialRef, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogrsf_frmts.h
; Line 87
	xor	eax, eax
	ret	0
?GetSpatialRef@OGRLayer@@UAEPAVOGRSpatialReference@@XZ ENDP ; OGRLayer::GetSpatialRef
_TEXT	ENDS
PUBLIC	?GetIndex@OGRLayer@@QAEPAVOGRLayerAttrIndex@@XZ	; OGRLayer::GetIndex
; Function compile flags: /Ogtp
;	COMDAT ?GetIndex@OGRLayer@@QAEPAVOGRLayerAttrIndex@@XZ
_TEXT	SEGMENT
?GetIndex@OGRLayer@@QAEPAVOGRLayerAttrIndex@@XZ PROC	; OGRLayer::GetIndex, COMDAT
; _this$ = ecx
; Line 131
	mov	eax, DWORD PTR [ecx+56]
	ret	0
?GetIndex@OGRLayer@@QAEPAVOGRLayerAttrIndex@@XZ ENDP	; OGRLayer::GetIndex
_TEXT	ENDS
PUBLIC	??_7OGRLayer@@6B@				; OGRLayer::`vftable'
PUBLIC	??0OGRLayer@@QAE@ABV0@@Z			; OGRLayer::OGRLayer
PUBLIC	??_R4OGRLayer@@6B@				; OGRLayer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRLayer@@@8				; OGRLayer `RTTI Type Descriptor'
PUBLIC	??_R3OGRLayer@@8				; OGRLayer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRLayer@@8				; OGRLayer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRLayer@@8			; OGRLayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRLayer@@UAEPAXI@Z				; OGRLayer::`vector deleting destructor'
EXTRN	?GetSpatialFilter@OGRLayer@@UAEPAVOGRGeometry@@XZ:PROC ; OGRLayer::GetSpatialFilter
EXTRN	?SetSpatialFilter@OGRLayer@@UAEXPAVOGRGeometry@@@Z:PROC ; OGRLayer::SetSpatialFilter
EXTRN	?SetSpatialFilterRect@OGRLayer@@UAEXNNNN@Z:PROC	; OGRLayer::SetSpatialFilterRect
EXTRN	?SetAttributeFilter@OGRLayer@@UAEHPBD@Z:PROC	; OGRLayer::SetAttributeFilter
EXTRN	?SetNextByIndex@OGRLayer@@UAEHJ@Z:PROC		; OGRLayer::SetNextByIndex
EXTRN	?GetFeature@OGRLayer@@UAEPAVOGRFeature@@J@Z:PROC ; OGRLayer::GetFeature
EXTRN	?SetFeature@OGRLayer@@UAEHPAVOGRFeature@@@Z:PROC ; OGRLayer::SetFeature
EXTRN	?CreateFeature@OGRLayer@@UAEHPAVOGRFeature@@@Z:PROC ; OGRLayer::CreateFeature
EXTRN	?DeleteFeature@OGRLayer@@UAEHJ@Z:PROC		; OGRLayer::DeleteFeature
EXTRN	?GetName@OGRLayer@@UAEPBDXZ:PROC		; OGRLayer::GetName
EXTRN	?GetGeomType@OGRLayer@@UAE?AW4OGRwkbGeometryType@@XZ:PROC ; OGRLayer::GetGeomType
EXTRN	?GetFeatureCount@OGRLayer@@UAEHH@Z:PROC		; OGRLayer::GetFeatureCount
EXTRN	?GetExtent@OGRLayer@@UAEHPAVOGREnvelope@@H@Z:PROC ; OGRLayer::GetExtent
EXTRN	?GetInfo@OGRLayer@@UAEPBDPBD@Z:PROC		; OGRLayer::GetInfo
EXTRN	?CreateField@OGRLayer@@UAEHPAVOGRFieldDefn@@H@Z:PROC ; OGRLayer::CreateField
EXTRN	?DeleteField@OGRLayer@@UAEHH@Z:PROC		; OGRLayer::DeleteField
EXTRN	?ReorderFields@OGRLayer@@UAEHPAH@Z:PROC		; OGRLayer::ReorderFields
EXTRN	?AlterFieldDefn@OGRLayer@@UAEHHPAVOGRFieldDefn@@H@Z:PROC ; OGRLayer::AlterFieldDefn
EXTRN	?SyncToDisk@OGRLayer@@UAEHXZ:PROC		; OGRLayer::SyncToDisk
EXTRN	?GetStyleTable@OGRLayer@@UAEPAVOGRStyleTable@@XZ:PROC ; OGRLayer::GetStyleTable
EXTRN	?SetStyleTableDirectly@OGRLayer@@UAEXPAVOGRStyleTable@@@Z:PROC ; OGRLayer::SetStyleTableDirectly
EXTRN	?SetStyleTable@OGRLayer@@UAEXPAVOGRStyleTable@@@Z:PROC ; OGRLayer::SetStyleTable
EXTRN	?StartTransaction@OGRLayer@@UAEHXZ:PROC		; OGRLayer::StartTransaction
EXTRN	?CommitTransaction@OGRLayer@@UAEHXZ:PROC	; OGRLayer::CommitTransaction
EXTRN	?RollbackTransaction@OGRLayer@@UAEHXZ:PROC	; OGRLayer::RollbackTransaction
EXTRN	?GetFIDColumn@OGRLayer@@UAEPBDXZ:PROC		; OGRLayer::GetFIDColumn
EXTRN	?GetGeometryColumn@OGRLayer@@UAEPBDXZ:PROC	; OGRLayer::GetGeometryColumn
EXTRN	?SetIgnoredFields@OGRLayer@@UAEHPAPBD@Z:PROC	; OGRLayer::SetIgnoredFields
;	COMDAT ??_R1A@?0A@EA@OGRLayer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRLayer@@8 DD FLAT:??_R0?AVOGRLayer@@@8	; OGRLayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRLayer@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRLayer@@8
rdata$r	SEGMENT
??_R2OGRLayer@@8 DD FLAT:??_R1A@?0A@EA@OGRLayer@@8	; OGRLayer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRLayer@@8
rdata$r	SEGMENT
??_R3OGRLayer@@8 DD 00H					; OGRLayer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRLayer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRLayer@@@8
_DATA	SEGMENT
??_R0?AVOGRLayer@@@8 DD FLAT:??_7type_info@@6B@		; OGRLayer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRLayer@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRLayer@@6B@
rdata$r	SEGMENT
??_R4OGRLayer@@6B@ DD 00H				; OGRLayer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRLayer@@@8
	DD	FLAT:??_R3OGRLayer@@8
rdata$r	ENDS
;	COMDAT ??_7OGRLayer@@6B@
CONST	SEGMENT
??_7OGRLayer@@6B@ DD FLAT:??_R4OGRLayer@@6B@		; OGRLayer::`vftable'
	DD	FLAT:??_EOGRLayer@@UAEPAXI@Z
	DD	FLAT:?GetSpatialFilter@OGRLayer@@UAEPAVOGRGeometry@@XZ
	DD	FLAT:?SetSpatialFilter@OGRLayer@@UAEXPAVOGRGeometry@@@Z
	DD	FLAT:?SetSpatialFilterRect@OGRLayer@@UAEXNNNN@Z
	DD	FLAT:?SetAttributeFilter@OGRLayer@@UAEHPBD@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?SetNextByIndex@OGRLayer@@UAEHJ@Z
	DD	FLAT:?GetFeature@OGRLayer@@UAEPAVOGRFeature@@J@Z
	DD	FLAT:?SetFeature@OGRLayer@@UAEHPAVOGRFeature@@@Z
	DD	FLAT:?CreateFeature@OGRLayer@@UAEHPAVOGRFeature@@@Z
	DD	FLAT:?DeleteFeature@OGRLayer@@UAEHJ@Z
	DD	FLAT:?GetName@OGRLayer@@UAEPBDXZ
	DD	FLAT:?GetGeomType@OGRLayer@@UAE?AW4OGRwkbGeometryType@@XZ
	DD	FLAT:__purecall
	DD	FLAT:?GetSpatialRef@OGRLayer@@UAEPAVOGRSpatialReference@@XZ
	DD	FLAT:?GetFeatureCount@OGRLayer@@UAEHH@Z
	DD	FLAT:?GetExtent@OGRLayer@@UAEHPAVOGREnvelope@@H@Z
	DD	FLAT:__purecall
	DD	FLAT:?GetInfo@OGRLayer@@UAEPBDPBD@Z
	DD	FLAT:?CreateField@OGRLayer@@UAEHPAVOGRFieldDefn@@H@Z
	DD	FLAT:?DeleteField@OGRLayer@@UAEHH@Z
	DD	FLAT:?ReorderFields@OGRLayer@@UAEHPAH@Z
	DD	FLAT:?AlterFieldDefn@OGRLayer@@UAEHHPAVOGRFieldDefn@@H@Z
	DD	FLAT:?SyncToDisk@OGRLayer@@UAEHXZ
	DD	FLAT:?GetStyleTable@OGRLayer@@UAEPAVOGRStyleTable@@XZ
	DD	FLAT:?SetStyleTableDirectly@OGRLayer@@UAEXPAVOGRStyleTable@@@Z
	DD	FLAT:?SetStyleTable@OGRLayer@@UAEXPAVOGRStyleTable@@@Z
	DD	FLAT:?StartTransaction@OGRLayer@@UAEHXZ
	DD	FLAT:?CommitTransaction@OGRLayer@@UAEHXZ
	DD	FLAT:?RollbackTransaction@OGRLayer@@UAEHXZ
	DD	FLAT:?GetFIDColumn@OGRLayer@@UAEPBDXZ
	DD	FLAT:?GetGeometryColumn@OGRLayer@@UAEPBDXZ
	DD	FLAT:?SetIgnoredFields@OGRLayer@@UAEHPAPBD@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRLayer@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRLayer@@QAE@ABV0@@Z PROC				; OGRLayer::OGRLayer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRLayer@@6B@
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	push	esi
	push	edi
	lea	esi, DWORD PTR [edx+16]
	lea	edi, DWORD PTR [eax+16]
	mov	ecx, 8
	rep movsd
	mov	ecx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+48], ecx
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR [eax+52], ecx
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+56], ecx
	mov	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR [eax+60], ecx
	mov	ecx, DWORD PTR [edx+64]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR [edx+68]
	pop	edi
	mov	DWORD PTR [eax+68], edx
	pop	esi
	pop	ebp
	ret	4
??0OGRLayer@@QAE@ABV0@@Z ENDP				; OGRLayer::OGRLayer
_TEXT	ENDS
PUBLIC	??4OGRLayer@@QAEAAV0@ABV0@@Z			; OGRLayer::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRLayer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRLayer@@QAEAAV0@ABV0@@Z PROC			; OGRLayer::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	push	esi
	push	edi
	lea	esi, DWORD PTR [edx+16]
	lea	edi, DWORD PTR [eax+16]
	mov	ecx, 8
	rep movsd
	mov	ecx, DWORD PTR [edx+48]
	mov	DWORD PTR [eax+48], ecx
	mov	ecx, DWORD PTR [edx+52]
	mov	DWORD PTR [eax+52], ecx
	mov	ecx, DWORD PTR [edx+56]
	mov	DWORD PTR [eax+56], ecx
	mov	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR [eax+60], ecx
	mov	ecx, DWORD PTR [edx+64]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR [edx+68]
	pop	edi
	mov	DWORD PTR [eax+68], edx
	pop	esi
	pop	ebp
	ret	4
??4OGRLayer@@QAEAAV0@ABV0@@Z ENDP			; OGRLayer::operator=
_TEXT	ENDS
PUBLIC	??_GOGRLayer@@UAEPAXI@Z				; OGRLayer::`scalar deleting destructor'
EXTRN	??1OGRLayer@@UAE@XZ:PROC			; OGRLayer::~OGRLayer
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRLayer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRLayer@@UAEPAXI@Z PROC				; OGRLayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRLayer@@UAE@XZ			; OGRLayer::~OGRLayer
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@22
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@22:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRLayer@@UAEPAXI@Z ENDP				; OGRLayer::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRLayer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRLayer@@UAEPAXI@Z PROC				; OGRLayer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@21
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRLayer@@UAE@XZ		; OGRLayer::~OGRLayer
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	72					; 00000048H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@21
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@21:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@21:
	call	??1OGRLayer@@UAE@XZ			; OGRLayer::~OGRLayer
	test	bl, 1
	je	SHORT $LN1@vector@21
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@21:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRLayer@@UAEPAXI@Z ENDP				; OGRLayer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRDataSource@@6B@				; OGRDataSource::`vftable'
PUBLIC	??0OGRDataSource@@QAE@ABV0@@Z			; OGRDataSource::OGRDataSource
PUBLIC	??_R4OGRDataSource@@6B@				; OGRDataSource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRDataSource@@@8			; OGRDataSource `RTTI Type Descriptor'
PUBLIC	??_R3OGRDataSource@@8				; OGRDataSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRDataSource@@8				; OGRDataSource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRDataSource@@8			; OGRDataSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRDataSource@@UAEPAXI@Z			; OGRDataSource::`vector deleting destructor'
EXTRN	?GetLayerByName@OGRDataSource@@UAEPAVOGRLayer@@PBD@Z:PROC ; OGRDataSource::GetLayerByName
EXTRN	?DeleteLayer@OGRDataSource@@UAEHH@Z:PROC	; OGRDataSource::DeleteLayer
EXTRN	?CreateLayer@OGRDataSource@@UAEPAVOGRLayer@@PBDPAVOGRSpatialReference@@W4OGRwkbGeometryType@@PAPAD@Z:PROC ; OGRDataSource::CreateLayer
EXTRN	?CopyLayer@OGRDataSource@@UAEPAVOGRLayer@@PAV2@PBDPAPAD@Z:PROC ; OGRDataSource::CopyLayer
EXTRN	?GetStyleTable@OGRDataSource@@UAEPAVOGRStyleTable@@XZ:PROC ; OGRDataSource::GetStyleTable
EXTRN	?SetStyleTableDirectly@OGRDataSource@@UAEXPAVOGRStyleTable@@@Z:PROC ; OGRDataSource::SetStyleTableDirectly
EXTRN	?SetStyleTable@OGRDataSource@@UAEXPAVOGRStyleTable@@@Z:PROC ; OGRDataSource::SetStyleTable
EXTRN	?ExecuteSQL@OGRDataSource@@UAEPAVOGRLayer@@PBDPAVOGRGeometry@@0@Z:PROC ; OGRDataSource::ExecuteSQL
EXTRN	?ReleaseResultSet@OGRDataSource@@UAEXPAVOGRLayer@@@Z:PROC ; OGRDataSource::ReleaseResultSet
EXTRN	?SyncToDisk@OGRDataSource@@UAEHXZ:PROC		; OGRDataSource::SyncToDisk
;	COMDAT ??_R1A@?0A@EA@OGRDataSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRDataSource@@8 DD FLAT:??_R0?AVOGRDataSource@@@8 ; OGRDataSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRDataSource@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRDataSource@@8
rdata$r	SEGMENT
??_R2OGRDataSource@@8 DD FLAT:??_R1A@?0A@EA@OGRDataSource@@8 ; OGRDataSource::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRDataSource@@8
rdata$r	SEGMENT
??_R3OGRDataSource@@8 DD 00H				; OGRDataSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRDataSource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRDataSource@@@8
_DATA	SEGMENT
??_R0?AVOGRDataSource@@@8 DD FLAT:??_7type_info@@6B@	; OGRDataSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRDataSource@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRDataSource@@6B@
rdata$r	SEGMENT
??_R4OGRDataSource@@6B@ DD 00H				; OGRDataSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRDataSource@@@8
	DD	FLAT:??_R3OGRDataSource@@8
rdata$r	ENDS
;	COMDAT ??_7OGRDataSource@@6B@
CONST	SEGMENT
??_7OGRDataSource@@6B@ DD FLAT:??_R4OGRDataSource@@6B@	; OGRDataSource::`vftable'
	DD	FLAT:??_EOGRDataSource@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetLayerByName@OGRDataSource@@UAEPAVOGRLayer@@PBD@Z
	DD	FLAT:?DeleteLayer@OGRDataSource@@UAEHH@Z
	DD	FLAT:__purecall
	DD	FLAT:?CreateLayer@OGRDataSource@@UAEPAVOGRLayer@@PBDPAVOGRSpatialReference@@W4OGRwkbGeometryType@@PAPAD@Z
	DD	FLAT:?CopyLayer@OGRDataSource@@UAEPAVOGRLayer@@PAV2@PBDPAPAD@Z
	DD	FLAT:?GetStyleTable@OGRDataSource@@UAEPAVOGRStyleTable@@XZ
	DD	FLAT:?SetStyleTableDirectly@OGRDataSource@@UAEXPAVOGRStyleTable@@@Z
	DD	FLAT:?SetStyleTable@OGRDataSource@@UAEXPAVOGRStyleTable@@@Z
	DD	FLAT:?ExecuteSQL@OGRDataSource@@UAEPAVOGRLayer@@PBDPAVOGRGeometry@@0@Z
	DD	FLAT:?ReleaseResultSet@OGRDataSource@@UAEXPAVOGRLayer@@@Z
	DD	FLAT:?SyncToDisk@OGRDataSource@@UAEHXZ
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRDataSource@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRDataSource@@QAE@ABV0@@Z PROC			; OGRDataSource::OGRDataSource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7OGRDataSource@@6B@
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??0OGRDataSource@@QAE@ABV0@@Z ENDP			; OGRDataSource::OGRDataSource
_TEXT	ENDS
PUBLIC	??4OGRDataSource@@QAEAAV0@ABV0@@Z		; OGRDataSource::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRDataSource@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRDataSource@@QAEAAV0@ABV0@@Z PROC			; OGRDataSource::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
	ret	4
??4OGRDataSource@@QAEAAV0@ABV0@@Z ENDP			; OGRDataSource::operator=
_TEXT	ENDS
PUBLIC	??_GOGRDataSource@@UAEPAXI@Z			; OGRDataSource::`scalar deleting destructor'
EXTRN	??1OGRDataSource@@UAE@XZ:PROC			; OGRDataSource::~OGRDataSource
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRDataSource@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRDataSource@@UAEPAXI@Z PROC			; OGRDataSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRDataSource@@UAE@XZ		; OGRDataSource::~OGRDataSource
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@23
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@23:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRDataSource@@UAEPAXI@Z ENDP			; OGRDataSource::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRDataSource@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRDataSource@@UAEPAXI@Z PROC			; OGRDataSource::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@22
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRDataSource@@UAE@XZ		; OGRDataSource::~OGRDataSource
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@22
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@22:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@22:
	call	??1OGRDataSource@@UAE@XZ		; OGRDataSource::~OGRDataSource
	test	bl, 1
	je	SHORT $LN1@vector@22
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@22:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRDataSource@@UAEPAXI@Z ENDP			; OGRDataSource::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??_7OGRSFDriver@@6B@				; OGRSFDriver::`vftable'
PUBLIC	??0OGRSFDriver@@QAE@XZ				; OGRSFDriver::OGRSFDriver
PUBLIC	??_R4OGRSFDriver@@6B@				; OGRSFDriver::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVOGRSFDriver@@@8				; OGRSFDriver `RTTI Type Descriptor'
PUBLIC	??_R3OGRSFDriver@@8				; OGRSFDriver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OGRSFDriver@@8				; OGRSFDriver::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OGRSFDriver@@8			; OGRSFDriver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_EOGRSFDriver@@UAEPAXI@Z			; OGRSFDriver::`vector deleting destructor'
EXTRN	?CreateDataSource@OGRSFDriver@@UAEPAVOGRDataSource@@PBDPAPAD@Z:PROC ; OGRSFDriver::CreateDataSource
EXTRN	?DeleteDataSource@OGRSFDriver@@UAEHPBD@Z:PROC	; OGRSFDriver::DeleteDataSource
EXTRN	?CopyDataSource@OGRSFDriver@@UAEPAVOGRDataSource@@PAV2@PBDPAPAD@Z:PROC ; OGRSFDriver::CopyDataSource
;	COMDAT ??_R1A@?0A@EA@OGRSFDriver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OGRSFDriver@@8 DD FLAT:??_R0?AVOGRSFDriver@@@8 ; OGRSFDriver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OGRSFDriver@@8
rdata$r	ENDS
;	COMDAT ??_R2OGRSFDriver@@8
rdata$r	SEGMENT
??_R2OGRSFDriver@@8 DD FLAT:??_R1A@?0A@EA@OGRSFDriver@@8 ; OGRSFDriver::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3OGRSFDriver@@8
rdata$r	SEGMENT
??_R3OGRSFDriver@@8 DD 00H				; OGRSFDriver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2OGRSFDriver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVOGRSFDriver@@@8
_DATA	SEGMENT
??_R0?AVOGRSFDriver@@@8 DD FLAT:??_7type_info@@6B@	; OGRSFDriver `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOGRSFDriver@@', 00H
_DATA	ENDS
;	COMDAT ??_R4OGRSFDriver@@6B@
rdata$r	SEGMENT
??_R4OGRSFDriver@@6B@ DD 00H				; OGRSFDriver::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOGRSFDriver@@@8
	DD	FLAT:??_R3OGRSFDriver@@8
rdata$r	ENDS
;	COMDAT ??_7OGRSFDriver@@6B@
CONST	SEGMENT
??_7OGRSFDriver@@6B@ DD FLAT:??_R4OGRSFDriver@@6B@	; OGRSFDriver::`vftable'
	DD	FLAT:??_EOGRSFDriver@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?CreateDataSource@OGRSFDriver@@UAEPAVOGRDataSource@@PBDPAPAD@Z
	DD	FLAT:?DeleteDataSource@OGRSFDriver@@UAEHPBD@Z
	DD	FLAT:?CopyDataSource@OGRSFDriver@@UAEPAVOGRDataSource@@PAV2@PBDPAPAD@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0OGRSFDriver@@QAE@XZ
_TEXT	SEGMENT
??0OGRSFDriver@@QAE@XZ PROC				; OGRSFDriver::OGRSFDriver, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRSFDriver@@6B@
	ret	0
??0OGRSFDriver@@QAE@XZ ENDP				; OGRSFDriver::OGRSFDriver
_TEXT	ENDS
PUBLIC	??0OGRSFDriver@@QAE@ABV0@@Z			; OGRSFDriver::OGRSFDriver
; Function compile flags: /Ogtp
;	COMDAT ??0OGRSFDriver@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRSFDriver@@QAE@ABV0@@Z PROC			; OGRSFDriver::OGRSFDriver, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7OGRSFDriver@@6B@
	ret	4
??0OGRSFDriver@@QAE@ABV0@@Z ENDP			; OGRSFDriver::OGRSFDriver
_TEXT	ENDS
PUBLIC	??4OGRSFDriver@@QAEAAV0@ABV0@@Z			; OGRSFDriver::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRSFDriver@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRSFDriver@@QAEAAV0@ABV0@@Z PROC			; OGRSFDriver::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	ret	4
??4OGRSFDriver@@QAEAAV0@ABV0@@Z ENDP			; OGRSFDriver::operator=
_TEXT	ENDS
PUBLIC	??_GOGRSFDriver@@UAEPAXI@Z			; OGRSFDriver::`scalar deleting destructor'
EXTRN	??1OGRSFDriver@@UAE@XZ:PROC			; OGRSFDriver::~OGRSFDriver
; Function compile flags: /Ogtp
;	COMDAT ??_GOGRSFDriver@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GOGRSFDriver@@UAEPAXI@Z PROC				; OGRSFDriver::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1OGRSFDriver@@UAE@XZ			; OGRSFDriver::~OGRSFDriver
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@24
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@24:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GOGRSFDriver@@UAEPAXI@Z ENDP				; OGRSFDriver::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_EOGRSFDriver@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_EOGRSFDriver@@UAEPAXI@Z PROC				; OGRSFDriver::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@23
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1OGRSFDriver@@UAE@XZ		; OGRSFDriver::~OGRSFDriver
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	4
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@23
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@23:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@23:
	call	??1OGRSFDriver@@UAE@XZ			; OGRSFDriver::~OGRSFDriver
	test	bl, 1
	je	SHORT $LN1@vector@23
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@23:
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_EOGRSFDriver@@UAEPAXI@Z ENDP				; OGRSFDriver::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?GetOpenDSCount@OGRSFDriverRegistrar@@QAEHXZ	; OGRSFDriverRegistrar::GetOpenDSCount
; Function compile flags: /Ogtp
;	COMDAT ?GetOpenDSCount@OGRSFDriverRegistrar@@QAEHXZ
_TEXT	SEGMENT
?GetOpenDSCount@OGRSFDriverRegistrar@@QAEHXZ PROC	; OGRSFDriverRegistrar::GetOpenDSCount, COMDAT
; _this$ = ecx
; Line 301
	mov	eax, DWORD PTR [ecx+8]
	ret	0
?GetOpenDSCount@OGRSFDriverRegistrar@@QAEHXZ ENDP	; OGRSFDriverRegistrar::GetOpenDSCount
_TEXT	ENDS
PUBLIC	??4OGRSFDriverRegistrar@@QAEAAV0@ABV0@@Z	; OGRSFDriverRegistrar::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRSFDriverRegistrar@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRSFDriverRegistrar@@QAEAAV0@ABV0@@Z PROC		; OGRSFDriverRegistrar::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___that$[ebp]
	push	edi
	mov	eax, ecx
	mov	ecx, 7
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	ret	4
??4OGRSFDriverRegistrar@@QAEAAV0@ABV0@@Z ENDP		; OGRSFDriverRegistrar::operator=
_TEXT	ENDS
PUBLIC	?GetStructureLodGrid@vtTerrain@@QAEPAVvtPagedStructureLodGrid@@XZ ; vtTerrain::GetStructureLodGrid
; Function compile flags: /Ogtp
;	COMDAT ?GetStructureLodGrid@vtTerrain@@QAEPAVvtPagedStructureLodGrid@@XZ
_TEXT	SEGMENT
?GetStructureLodGrid@vtTerrain@@QAEPAVvtPagedStructureLodGrid@@XZ PROC ; vtTerrain::GetStructureLodGrid, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\terrain.h
; Line 251
	mov	eax, DWORD PTR [ecx+464]
	ret	0
?GetStructureLodGrid@vtTerrain@@QAEPAVvtPagedStructureLodGrid@@XZ ENDP ; vtTerrain::GetStructureLodGrid
_TEXT	ENDS
PUBLIC	?ColorDiff@@YAMABVRGBi@@0@Z			; ColorDiff
; Function compile flags: /Ogtp
;	COMDAT ?ColorDiff@@YAMABVRGBi@@0@Z
_TEXT	SEGMENT
_diff$ = -12						; size = 12
tv221 = 8						; size = 4
tv218 = 8						; size = 4
tv216 = 8						; size = 4
tv208 = 8						; size = 4
tv201 = 8						; size = 4
_c1$ = 8						; size = 4
_c2$ = 12						; size = 4
?ColorDiff@@YAMABVRGBi@@0@Z PROC			; ColorDiff, COMDAT
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 30
	mov	eax, DWORD PTR _c1$[ebp]
	mov	ecx, DWORD PTR _c2$[ebp]
	movsx	edx, WORD PTR [eax]
	push	esi
	movsx	esi, WORD PTR [ecx]
	sub	edx, esi
; Line 31
	movsx	esi, WORD PTR [ecx+2]
; Line 32
	movsx	ecx, WORD PTR [ecx+4]
	mov	DWORD PTR tv221[ebp], edx
	movsx	edx, WORD PTR [eax+2]
	fild	DWORD PTR tv221[ebp]
	movsx	eax, WORD PTR [eax+4]
	fstp	DWORD PTR _diff$[ebp]
	sub	edx, esi
	mov	DWORD PTR tv218[ebp], edx
	sub	eax, ecx
	fild	DWORD PTR tv218[ebp]
	mov	DWORD PTR tv216[ebp], eax
	fstp	DWORD PTR _diff$[ebp+4]
	fild	DWORD PTR tv216[ebp]
	fstp	DWORD PTR _diff$[ebp+8]
	fld	DWORD PTR _diff$[ebp+4]
; Line 33
	fld	DWORD PTR _diff$[ebp]
	fld	DWORD PTR _diff$[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv208[ebp]
	fld	DWORD PTR tv208[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv201[ebp]
	fld	DWORD PTR tv201[ebp]
	pop	esi
; Line 34
	mov	esp, ebp
	pop	ebp
	ret	0
?ColorDiff@@YAMABVRGBi@@0@Z ENDP			; ColorDiff
_TEXT	ENDS
PUBLIC	??1vtStructInstance@@UAE@XZ			; vtStructInstance::~vtStructInstance
EXTRN	??1vtStructure@@UAE@XZ:PROC			; vtStructure::~vtStructure
; Function compile flags: /Ogtp
;	COMDAT ??1vtStructInstance@@UAE@XZ
_TEXT	SEGMENT
??1vtStructInstance@@UAE@XZ PROC			; vtStructInstance::~vtStructInstance, COMDAT
; _this$ = ecx
	jmp	??1vtStructure@@UAE@XZ			; vtStructure::~vtStructure
??1vtStructInstance@@UAE@XZ ENDP			; vtStructInstance::~vtStructInstance
_TEXT	ENDS
PUBLIC	?Reload@vtStructInstance3d@@QAEXXZ		; vtStructInstance3d::Reload
; Function compile flags: /Ogtp
;	COMDAT ?Reload@vtStructInstance3d@@QAEXXZ
_TEXT	SEGMENT
?Reload@vtStructInstance3d@@QAEXXZ PROC			; vtStructInstance3d::Reload, COMDAT
; _this$ = ecx
; Line 92
	ret	0
?Reload@vtStructInstance3d@@QAEXXZ ENDP			; vtStructInstance3d::Reload
_TEXT	ENDS
PUBLIC	?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ ; vtStructureArray3d::NewBuilding
EXTRN	??0vtBuilding3d@@QAE@XZ:PROC			; vtBuilding3d::vtBuilding3d
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ$0
__ehfuncinfo$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ
_TEXT	SEGMENT
$T364152 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ PROC ; vtStructureArray3d::NewBuilding, COMDAT
; _this$ = ecx
; Line 270
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 271
	push	100					; 00000064H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T364152[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN3@NewBuildin
	mov	ecx, eax
	call	??0vtBuilding3d@@QAE@XZ			; vtBuilding3d::vtBuilding3d
; Line 272
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@NewBuildin:
; Line 271
	xor	eax, eax
; Line 272
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ$0:
	mov	eax, DWORD PTR $T364152[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ ENDP ; vtStructureArray3d::NewBuilding
PUBLIC	?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ	; vtStructureArray3d::NewFence
EXTRN	??0vtFence3d@@QAE@XZ:PROC			; vtFence3d::vtFence3d
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ$0
__ehfuncinfo$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ
_TEXT	SEGMENT
$T364169 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ PROC	; vtStructureArray3d::NewFence, COMDAT
; _this$ = ecx
; Line 275
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 276
	push	164					; 000000a4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T364169[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN3@NewFence
	mov	ecx, eax
	call	??0vtFence3d@@QAE@XZ			; vtFence3d::vtFence3d
; Line 277
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@NewFence:
; Line 276
	xor	eax, eax
; Line 277
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ$0:
	mov	eax, DWORD PTR $T364169[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ ENDP	; vtStructureArray3d::NewFence
PUBLIC	?ConstructStructure@vtStructureArray3d@@QAE_NPAVvtStructure3d@@@Z ; vtStructureArray3d::ConstructStructure
; Function compile flags: /Ogtp
;	COMDAT ?ConstructStructure@vtStructureArray3d@@QAE_NPAVvtStructure3d@@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?ConstructStructure@vtStructureArray3d@@QAE_NPAVvtStructure3d@@@Z PROC ; vtStructureArray3d::ConstructStructure, COMDAT
; _this$ = ecx
; Line 309
	push	ebp
	mov	ebp, esp
; Line 310
	mov	eax, DWORD PTR [ecx+104]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+4]
	push	eax
	call	edx
; Line 311
	pop	ebp
	ret	4
?ConstructStructure@vtStructureArray3d@@QAE_NPAVvtStructure3d@@@Z ENDP ; vtStructureArray3d::ConstructStructure
_TEXT	ENDS
PUBLIC	??_C@_04IJFJNCMM@edge?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	?SetEditedEdge@vtStructureArray3d@@UAEXPAVvtBuilding@@HH@Z ; vtStructureArray3d::SetEditedEdge
EXTRN	?SetValueInt@vtTagArray@@QAEXPBDH_N@Z:PROC	; vtTagArray::SetValueInt
EXTRN	?SetEditedEdge@vtStructureArray@@UAEXPAVvtBuilding@@HH@Z:PROC ; vtStructureArray::SetEditedEdge
EXTRN	?RemoveTag@vtTagArray@@QAEXPBD@Z:PROC		; vtTagArray::RemoveTag
;	COMDAT ??_C@_04IJFJNCMM@edge?$AA@
CONST	SEGMENT
??_C@_04IJFJNCMM@edge?$AA@ DB 'edge', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?SetEditedEdge@vtStructureArray3d@@UAEXPAVvtBuilding@@HH@Z
_TEXT	SEGMENT
_bld$ = 8						; size = 4
_lev$ = 12						; size = 4
_edge$ = 16						; size = 4
?SetEditedEdge@vtStructureArray3d@@UAEXPAVvtBuilding@@HH@Z PROC ; vtStructureArray3d::SetEditedEdge, COMDAT
; _this$ = ecx
; Line 443
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 446
	mov	ecx, DWORD PTR [esi+76]
	push	edi
	mov	edi, DWORD PTR _bld$[ebp]
	test	ecx, ecx
	je	SHORT $LN9@SetEditedE
	cmp	ecx, edi
	je	SHORT $LN9@SetEditedE
; Line 448
	push	OFFSET ??_C@_05KJNJLLGA@level?$AA@
	call	?RemoveTag@vtTagArray@@QAEXPBD@Z	; vtTagArray::RemoveTag
; Line 449
	mov	ecx, DWORD PTR [esi+76]
	push	OFFSET ??_C@_04IJFJNCMM@edge?$AA@
	call	?RemoveTag@vtTagArray@@QAEXPBD@Z	; vtTagArray::RemoveTag
; Line 450
	mov	eax, DWORD PTR [esi+76]
	test	eax, eax
	je	SHORT $LN5@SetEditedE
	lea	ecx, DWORD PTR [eax+52]
	jmp	SHORT $LN6@SetEditedE
$LN5@SetEditedE:
	xor	ecx, ecx
$LN6@SetEditedE:
; Line 451
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [eax+4]
	push	edx
	call	eax
$LN9@SetEditedE:
; Line 454
	mov	ecx, DWORD PTR _edge$[ebp]
	mov	edx, DWORD PTR _lev$[ebp]
	push	ecx
	push	edx
	push	edi
	mov	ecx, esi
	call	?SetEditedEdge@vtStructureArray@@UAEXPAVvtBuilding@@HH@Z ; vtStructureArray::SetEditedEdge
; Line 456
	mov	ecx, DWORD PTR [esi+76]
	test	ecx, ecx
	je	SHORT $LN11@SetEditedE
; Line 458
	mov	eax, DWORD PTR [esi+80]
	push	0
	push	eax
	push	OFFSET ??_C@_05KJNJLLGA@level?$AA@
	call	?SetValueInt@vtTagArray@@QAEXPBDH_N@Z	; vtTagArray::SetValueInt
; Line 459
	mov	ecx, DWORD PTR [esi+84]
	push	0
	push	ecx
	mov	ecx, DWORD PTR [esi+76]
	push	OFFSET ??_C@_04IJFJNCMM@edge?$AA@
	call	?SetValueInt@vtTagArray@@QAEXPBDH_N@Z	; vtTagArray::SetValueInt
; Line 460
	mov	eax, DWORD PTR [esi+76]
	test	eax, eax
	je	SHORT $LN7@SetEditedE
; Line 461
	mov	edx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [esi+104]
	push	eax
	call	edx
	pop	edi
	pop	esi
; Line 463
	pop	ebp
	ret	12					; 0000000cH
$LN7@SetEditedE:
; Line 461
	mov	eax, DWORD PTR [esi+104]
	xor	ecx, ecx
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+4]
	push	eax
	call	edx
$LN11@SetEditedE:
	pop	edi
	pop	esi
; Line 463
	pop	ebp
	ret	12					; 0000000cH
?SetEditedEdge@vtStructureArray3d@@UAEXPAVvtBuilding@@HH@Z ENDP ; vtStructureArray3d::SetEditedEdge
_TEXT	ENDS
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
; Function compile flags: /Ogtp
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1506
	mov	eax, DWORD PTR [ecx+16]
; Line 1507
	ret	0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx
; Line 1511
	mov	eax, DWORD PTR [ecx+16]
; Line 1512
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity, COMDAT
; _this$ = ecx
; Line 1535
	mov	eax, DWORD PTR [ecx+20]
; Line 1536
	ret	0
?capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::capacity
_TEXT	ENDS
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
; Function compile flags: /Ogtp
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx
; Line 1550
	xor	eax, eax
	cmp	DWORD PTR [ecx+16], eax
	sete	al
; Line 1551
	ret	0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx
; Line 2002
	mov	eax, ecx
; Line 2004
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN4@Myptr
	mov	eax, DWORD PTR [eax]
$LN4@Myptr:
; Line 2005
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogtp
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx
; Line 2008
	mov	eax, ecx
; Line 2010
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN4@Myptr@2
	mov	eax, DWORD PTR [eax]
$LN4@Myptr@2:
; Line 2011
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx
; Line 2015
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlen:
	int	3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx
; Line 2020
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN3@Xran:
	int	3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 459
	ret	0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 161
	mov	eax, ecx
; Line 163
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx
; Line 165
	mov	eax, ecx
; Line 167
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$ref_ptr@VNode@osg@@@osg@@QAE@XZ		; osg::ref_ptr<osg::Node>::ref_ptr<osg::Node>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ref_ptr@VNode@osg@@@osg@@QAE@XZ
_TEXT	SEGMENT
??0?$ref_ptr@VNode@osg@@@osg@@QAE@XZ PROC		; osg::ref_ptr<osg::Node>::ref_ptr<osg::Node>, COMDAT
; _this$ = ecx
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\ref_ptr
; Line 30
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0?$ref_ptr@VNode@osg@@@osg@@QAE@XZ ENDP		; osg::ref_ptr<osg::Node>::ref_ptr<osg::Node>
_TEXT	ENDS
PUBLIC	??1?$ref_ptr@VNode@osg@@@osg@@QAE@XZ		; osg::ref_ptr<osg::Node>::~ref_ptr<osg::Node>
EXTRN	__imp_?unref@Referenced@osg@@QBEHXZ:PROC
; Function compile flags: /Ogtp
;	COMDAT ??1?$ref_ptr@VNode@osg@@@osg@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_ptr@VNode@osg@@@osg@@QAE@XZ PROC		; osg::ref_ptr<osg::Node>::~ref_ptr<osg::Node>, COMDAT
; _this$ = ecx
; Line 35
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN7@ref_ptr
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN7@ref_ptr:
	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$ref_ptr@VNode@osg@@@osg@@QAE@XZ ENDP		; osg::ref_ptr<osg::Node>::~ref_ptr<osg::Node>
_TEXT	ENDS
PUBLIC	??4?$ref_ptr@VNode@osg@@@osg@@QAEAAV01@PAVNode@1@@Z ; osg::ref_ptr<osg::Node>::operator=
EXTRN	__imp_??EAtomic@OpenThreads@@QAEIXZ:PROC
; Function compile flags: /Ogtp
;	COMDAT ??4?$ref_ptr@VNode@osg@@@osg@@QAEAAV01@PAVNode@1@@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??4?$ref_ptr@VNode@osg@@@osg@@QAEAAV01@PAVNode@1@@Z PROC ; osg::ref_ptr<osg::Node>::operator=, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
; Line 51
	mov	eax, DWORD PTR _ptr$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [esi]
	cmp	edi, eax
	je	SHORT $LN1@operator@3
; Line 53
	mov	DWORD PTR [esi], eax
; Line 54
	test	eax, eax
	je	SHORT $LN6@operator@3
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN6@operator@3:
; Line 58
	test	edi, edi
	je	SHORT $LN1@operator@3
	mov	ecx, edi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN1@operator@3:
; Line 59
	pop	edi
	mov	eax, esi
	pop	esi
; Line 60
	pop	ebp
	ret	4
??4?$ref_ptr@VNode@osg@@@osg@@QAEAAV01@PAVNode@1@@Z ENDP ; osg::ref_ptr<osg::Node>::operator=
_TEXT	ENDS
PUBLIC	??B?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ	; osg::ref_ptr<osg::Node>::operator osg::Node *
; Function compile flags: /Ogtp
;	COMDAT ??B?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ
_TEXT	SEGMENT
??B?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ PROC	; osg::ref_ptr<osg::Node>::operator osg::Node *, COMDAT
; _this$ = ecx
; Line 64
	mov	eax, DWORD PTR [ecx]
	ret	0
??B?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ ENDP	; osg::ref_ptr<osg::Node>::operator osg::Node *
_TEXT	ENDS
PUBLIC	??C?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ	; osg::ref_ptr<osg::Node>::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ
_TEXT	SEGMENT
??C?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ PROC	; osg::ref_ptr<osg::Node>::operator->, COMDAT
; _this$ = ecx
; Line 91
	mov	eax, DWORD PTR [ecx]
	ret	0
??C?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@1@XZ ENDP	; osg::ref_ptr<osg::Node>::operator->
_TEXT	ENDS
PUBLIC	??7?$ref_ptr@VNode@osg@@@osg@@QBE_NXZ		; osg::ref_ptr<osg::Node>::operator!
; Function compile flags: /Ogtp
;	COMDAT ??7?$ref_ptr@VNode@osg@@@osg@@QBE_NXZ
_TEXT	SEGMENT
??7?$ref_ptr@VNode@osg@@@osg@@QBE_NXZ PROC		; osg::ref_ptr<osg::Node>::operator!, COMDAT
; _this$ = ecx
; Line 94
	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	sete	al
	ret	0
??7?$ref_ptr@VNode@osg@@@osg@@QBE_NXZ ENDP		; osg::ref_ptr<osg::Node>::operator!
_TEXT	ENDS
PUBLIC	??0?$ref_ptr@VImage@osg@@@osg@@QAE@PAVImage@1@@Z ; osg::ref_ptr<osg::Image>::ref_ptr<osg::Image>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ref_ptr@VImage@osg@@@osg@@QAE@PAVImage@1@@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??0?$ref_ptr@VImage@osg@@@osg@@QAE@PAVImage@1@@Z PROC	; osg::ref_ptr<osg::Image>::ref_ptr<osg::Image>, COMDAT
; _this$ = ecx
; Line 31
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], eax
	test	eax, eax
	je	SHORT $LN6@ref_ptr@2
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN6@ref_ptr@2:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$ref_ptr@VImage@osg@@@osg@@QAE@PAVImage@1@@Z ENDP	; osg::ref_ptr<osg::Image>::ref_ptr<osg::Image>
_TEXT	ENDS
PUBLIC	??1?$ref_ptr@VImage@osg@@@osg@@QAE@XZ		; osg::ref_ptr<osg::Image>::~ref_ptr<osg::Image>
; Function compile flags: /Ogtp
;	COMDAT ??1?$ref_ptr@VImage@osg@@@osg@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_ptr@VImage@osg@@@osg@@QAE@XZ PROC		; osg::ref_ptr<osg::Image>::~ref_ptr<osg::Image>, COMDAT
; _this$ = ecx
; Line 35
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN7@ref_ptr@3
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN7@ref_ptr@3:
	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$ref_ptr@VImage@osg@@@osg@@QAE@XZ ENDP		; osg::ref_ptr<osg::Image>::~ref_ptr<osg::Image>
_TEXT	ENDS
PUBLIC	??B?$ref_ptr@VImage@osg@@@osg@@QBEPAVImage@1@XZ	; osg::ref_ptr<osg::Image>::operator osg::Image *
; Function compile flags: /Ogtp
;	COMDAT ??B?$ref_ptr@VImage@osg@@@osg@@QBEPAVImage@1@XZ
_TEXT	SEGMENT
??B?$ref_ptr@VImage@osg@@@osg@@QBEPAVImage@1@XZ PROC	; osg::ref_ptr<osg::Image>::operator osg::Image *, COMDAT
; _this$ = ecx
; Line 64
	mov	eax, DWORD PTR [ecx]
	ret	0
??B?$ref_ptr@VImage@osg@@@osg@@QBEPAVImage@1@XZ ENDP	; osg::ref_ptr<osg::Image>::operator osg::Image *
_TEXT	ENDS
PUBLIC	??0?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ	; osg::ref_ptr<vtMaterialArray>::ref_ptr<vtMaterialArray>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ
_TEXT	SEGMENT
??0?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ PROC	; osg::ref_ptr<vtMaterialArray>::ref_ptr<vtMaterialArray>, COMDAT
; _this$ = ecx
; Line 30
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ ENDP	; osg::ref_ptr<vtMaterialArray>::ref_ptr<vtMaterialArray>
_TEXT	ENDS
PUBLIC	??1?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ	; osg::ref_ptr<vtMaterialArray>::~ref_ptr<vtMaterialArray>
; Function compile flags: /Ogtp
;	COMDAT ??1?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ PROC	; osg::ref_ptr<vtMaterialArray>::~ref_ptr<vtMaterialArray>, COMDAT
; _this$ = ecx
; Line 35
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN7@ref_ptr@4
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN7@ref_ptr@4:
	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ ENDP	; osg::ref_ptr<vtMaterialArray>::~ref_ptr<vtMaterialArray>
_TEXT	ENDS
PUBLIC	??4?$ref_ptr@VvtMaterialArray@@@osg@@QAEAAV01@PAVvtMaterialArray@@@Z ; osg::ref_ptr<vtMaterialArray>::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$ref_ptr@VvtMaterialArray@@@osg@@QAEAAV01@PAVvtMaterialArray@@@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??4?$ref_ptr@VvtMaterialArray@@@osg@@QAEAAV01@PAVvtMaterialArray@@@Z PROC ; osg::ref_ptr<vtMaterialArray>::operator=, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
; Line 51
	mov	eax, DWORD PTR _ptr$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [esi]
	cmp	edi, eax
	je	SHORT $LN1@operator@4
; Line 53
	mov	DWORD PTR [esi], eax
; Line 54
	test	eax, eax
	je	SHORT $LN6@operator@4
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN6@operator@4:
; Line 58
	test	edi, edi
	je	SHORT $LN1@operator@4
	mov	ecx, edi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN1@operator@4:
; Line 59
	pop	edi
	mov	eax, esi
	pop	esi
; Line 60
	pop	ebp
	ret	4
??4?$ref_ptr@VvtMaterialArray@@@osg@@QAEAAV01@PAVvtMaterialArray@@@Z ENDP ; osg::ref_ptr<vtMaterialArray>::operator=
_TEXT	ENDS
PUBLIC	??B?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ ; osg::ref_ptr<vtMaterialArray>::operator vtMaterialArray *
; Function compile flags: /Ogtp
;	COMDAT ??B?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ
_TEXT	SEGMENT
??B?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ PROC ; osg::ref_ptr<vtMaterialArray>::operator vtMaterialArray *, COMDAT
; _this$ = ecx
; Line 64
	mov	eax, DWORD PTR [ecx]
	ret	0
??B?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ ENDP ; osg::ref_ptr<vtMaterialArray>::operator vtMaterialArray *
_TEXT	ENDS
PUBLIC	??C?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ ; osg::ref_ptr<vtMaterialArray>::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ
_TEXT	SEGMENT
??C?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ PROC ; osg::ref_ptr<vtMaterialArray>::operator->, COMDAT
; _this$ = ecx
; Line 91
	mov	eax, DWORD PTR [ecx]
	ret	0
??C?$ref_ptr@VvtMaterialArray@@@osg@@QBEPAVvtMaterialArray@@XZ ENDP ; osg::ref_ptr<vtMaterialArray>::operator->
_TEXT	ENDS
PUBLIC	??0?$ref_ptr@VvtTransform@@@osg@@QAE@XZ		; osg::ref_ptr<vtTransform>::ref_ptr<vtTransform>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ref_ptr@VvtTransform@@@osg@@QAE@XZ
_TEXT	SEGMENT
??0?$ref_ptr@VvtTransform@@@osg@@QAE@XZ PROC		; osg::ref_ptr<vtTransform>::ref_ptr<vtTransform>, COMDAT
; _this$ = ecx
; Line 30
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0?$ref_ptr@VvtTransform@@@osg@@QAE@XZ ENDP		; osg::ref_ptr<vtTransform>::ref_ptr<vtTransform>
_TEXT	ENDS
PUBLIC	??1?$ref_ptr@VvtTransform@@@osg@@QAE@XZ		; osg::ref_ptr<vtTransform>::~ref_ptr<vtTransform>
; Function compile flags: /Ogtp
;	COMDAT ??1?$ref_ptr@VvtTransform@@@osg@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_ptr@VvtTransform@@@osg@@QAE@XZ PROC		; osg::ref_ptr<vtTransform>::~ref_ptr<vtTransform>, COMDAT
; _this$ = ecx
; Line 35
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN7@ref_ptr@5
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN7@ref_ptr@5:
	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$ref_ptr@VvtTransform@@@osg@@QAE@XZ ENDP		; osg::ref_ptr<vtTransform>::~ref_ptr<vtTransform>
_TEXT	ENDS
PUBLIC	??4?$ref_ptr@VvtTransform@@@osg@@QAEAAV01@PAVvtTransform@@@Z ; osg::ref_ptr<vtTransform>::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$ref_ptr@VvtTransform@@@osg@@QAEAAV01@PAVvtTransform@@@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??4?$ref_ptr@VvtTransform@@@osg@@QAEAAV01@PAVvtTransform@@@Z PROC ; osg::ref_ptr<vtTransform>::operator=, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
; Line 51
	mov	eax, DWORD PTR _ptr$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [esi]
	cmp	edi, eax
	je	SHORT $LN1@operator@5
; Line 53
	mov	DWORD PTR [esi], eax
; Line 54
	test	eax, eax
	je	SHORT $LN6@operator@5
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN6@operator@5:
; Line 58
	test	edi, edi
	je	SHORT $LN1@operator@5
	mov	ecx, edi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN1@operator@5:
; Line 59
	pop	edi
	mov	eax, esi
	pop	esi
; Line 60
	pop	ebp
	ret	4
??4?$ref_ptr@VvtTransform@@@osg@@QAEAAV01@PAVvtTransform@@@Z ENDP ; osg::ref_ptr<vtTransform>::operator=
_TEXT	ENDS
PUBLIC	??B?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ ; osg::ref_ptr<vtTransform>::operator vtTransform *
; Function compile flags: /Ogtp
;	COMDAT ??B?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ
_TEXT	SEGMENT
??B?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ PROC ; osg::ref_ptr<vtTransform>::operator vtTransform *, COMDAT
; _this$ = ecx
; Line 64
	mov	eax, DWORD PTR [ecx]
	ret	0
??B?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ ENDP ; osg::ref_ptr<vtTransform>::operator vtTransform *
_TEXT	ENDS
PUBLIC	??C?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ ; osg::ref_ptr<vtTransform>::operator->
; Function compile flags: /Ogtp
;	COMDAT ??C?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ
_TEXT	SEGMENT
??C?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ PROC ; osg::ref_ptr<vtTransform>::operator->, COMDAT
; _this$ = ecx
; Line 91
	mov	eax, DWORD PTR [ecx]
	ret	0
??C?$ref_ptr@VvtTransform@@@osg@@QBEPAVvtTransform@@XZ ENDP ; osg::ref_ptr<vtTransform>::operator->
_TEXT	ENDS
PUBLIC	??7?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ	; osg::ref_ptr<vtTransform>::operator!
; Function compile flags: /Ogtp
;	COMDAT ??7?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ
_TEXT	SEGMENT
??7?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ PROC		; osg::ref_ptr<vtTransform>::operator!, COMDAT
; _this$ = ecx
; Line 94
	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	sete	al
	ret	0
??7?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ ENDP		; osg::ref_ptr<vtTransform>::operator!
_TEXT	ENDS
PUBLIC	?valid@?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ	; osg::ref_ptr<vtTransform>::valid
; Function compile flags: /Ogtp
;	COMDAT ?valid@?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ
_TEXT	SEGMENT
?valid@?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ PROC	; osg::ref_ptr<vtTransform>::valid, COMDAT
; _this$ = ecx
; Line 95
	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	setne	al
	ret	0
?valid@?$ref_ptr@VvtTransform@@@osg@@QBE_NXZ ENDP	; osg::ref_ptr<vtTransform>::valid
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx
; Line 219
	or	eax, -1
; Line 220
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?capacity@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::capacity
; Function compile flags: /Ogtp
;	COMDAT ?capacity@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::capacity, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 777
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 778
	ret	0
?capacity@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::size
; Function compile flags: /Ogtp
;	COMDAT ?size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::size, COMDAT
; _this$ = ecx
; Line 879
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2
; Line 880
	ret	0
?size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::size
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IBEXXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Xlen
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IBEXXZ PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Xlen, COMDAT
; _this$ = ecx
; Line 1427
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlen@2:
	int	3
?_Xlen@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IBEXXZ ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Xlen
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >, COMDAT
; _this$ = ecx
; Line 434
	ret	0
??1?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@XZ ; std::allocator<osg::ref_ptr<vtMaterial> >::allocator<osg::ref_ptr<vtMaterial> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@XZ PROC ; std::allocator<osg::ref_ptr<vtMaterial> >::allocator<osg::ref_ptr<vtMaterial> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 161
	mov	eax, ecx
; Line 163
	ret	0
??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@XZ ENDP ; std::allocator<osg::ref_ptr<vtMaterial> >::allocator<osg::ref_ptr<vtMaterial> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z ; std::allocator<osg::ref_ptr<vtMaterial> >::deallocate
; Function compile flags: /Ogtp
;	COMDAT ?deallocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z PROC ; std::allocator<osg::ref_ptr<vtMaterial> >::deallocate, COMDAT
; _this$ = ecx
; Line 181
	push	ebp
	mov	ebp, esp
; Line 182
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 183
	pop	ebp
	ret	8
?deallocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z ENDP ; std::allocator<osg::ref_ptr<vtMaterial> >::deallocate
_TEXT	ENDS
PUBLIC	??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 50
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 53
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 54
	pop	ebp
	ret	8
??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx
; Line 92
	mov	eax, DWORD PTR [ecx]
; Line 93
	ret	0
??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 325
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 326
	pop	ebp
	ret	8
??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::_String_iterator<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
; Function compile flags: /Ogtp
;	COMDAT ??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*, COMDAT
; _this$ = ecx
; Line 343
	mov	eax, DWORD PTR [ecx]
; Line 344
	ret	0
??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator*
_TEXT	ENDS
PUBLIC	??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@ABV01@@Z ; std::allocator<osg::ref_ptr<vtMaterial> >::allocator<osg::ref_ptr<vtMaterial> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@ABV01@@Z PROC ; std::allocator<osg::ref_ptr<vtMaterial> >::allocator<osg::ref_ptr<vtMaterial> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 165
	mov	eax, ecx
; Line 167
	ret	4
??0?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<osg::ref_ptr<vtMaterial> >::allocator<osg::ref_ptr<vtMaterial> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QBEIXZ ; std::allocator<osg::ref_ptr<vtMaterial> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QBEIXZ PROC ; std::allocator<osg::ref_ptr<vtMaterial> >::max_size, COMDAT
; _this$ = ecx
; Line 219
	mov	eax, 1073741823				; 3fffffffH
; Line 220
	ret	0
?max_size@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QBEIXZ ENDP ; std::allocator<osg::ref_ptr<vtMaterial> >::max_size
_TEXT	ENDS
PUBLIC	?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
; Function compile flags: /Ogtp
;	COMDAT ?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 264
	ret	4
?_Compat@?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::_Compat
_TEXT	ENDS
PUBLIC	??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 1027
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1028
	pop	ebp
	ret	4
??0?$_Revranit@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPADAAD@2@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >::_Revranit<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> >
_TEXT	ENDS
PUBLIC	??0?$_Revranit@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPBDABD@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Revranit<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &> >::_Revranit<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Revranit@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPBDABD@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Revranit@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPBDABD@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Revranit<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &> >::_Revranit<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &> >, COMDAT
; _this$ = ecx
; Line 1027
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1028
	pop	ebp
	ret	4
??0?$_Revranit@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$iterator@Urandom_access_iterator_tag@std@@DHPBDABD@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Revranit<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &> >::_Revranit<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >,std::iterator<std::random_access_iterator_tag,char,int,char const *,char const &> >
_TEXT	ENDS
PUBLIC	??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 159
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 179
	mov	ecx, DWORD PTR __Off$[ebp]
	add	DWORD PTR [eax], ecx
; Line 181
	pop	ebp
	ret	4
??Y?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?GetSize@?$vtArray@PAVvtItem@@@@QBEIXZ		; vtArray<vtItem *>::GetSize
; Function compile flags: /Ogtp
;	COMDAT ?GetSize@?$vtArray@PAVvtItem@@@@QBEIXZ
_TEXT	SEGMENT
?GetSize@?$vtArray@PAVvtItem@@@@QBEIXZ PROC		; vtArray<vtItem *>::GetSize, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\array.h
; Line 300
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetSize@?$vtArray@PAVvtItem@@@@QBEIXZ ENDP		; vtArray<vtItem *>::GetSize
_TEXT	ENDS
PUBLIC	?GetSize@?$vtArray@PAVvtMaterialDescriptor@@@@QBEIXZ ; vtArray<vtMaterialDescriptor *>::GetSize
; Function compile flags: /Ogtp
;	COMDAT ?GetSize@?$vtArray@PAVvtMaterialDescriptor@@@@QBEIXZ
_TEXT	SEGMENT
?GetSize@?$vtArray@PAVvtMaterialDescriptor@@@@QBEIXZ PROC ; vtArray<vtMaterialDescriptor *>::GetSize, COMDAT
; _this$ = ecx
; Line 300
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetSize@?$vtArray@PAVvtMaterialDescriptor@@@@QBEIXZ ENDP ; vtArray<vtMaterialDescriptor *>::GetSize
_TEXT	ENDS
PUBLIC	?GetAt@?$vtArray@PAVvtMaterialDescriptor@@@@QBEAAPAVvtMaterialDescriptor@@I@Z ; vtArray<vtMaterialDescriptor *>::GetAt
; Function compile flags: /Ogtp
;	COMDAT ?GetAt@?$vtArray@PAVvtMaterialDescriptor@@@@QBEAAPAVvtMaterialDescriptor@@I@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?GetAt@?$vtArray@PAVvtMaterialDescriptor@@@@QBEAAPAVvtMaterialDescriptor@@I@Z PROC ; vtArray<vtMaterialDescriptor *>::GetAt, COMDAT
; _this$ = ecx
; Line 350
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	pop	ebp
	ret	4
?GetAt@?$vtArray@PAVvtMaterialDescriptor@@@@QBEAAPAVvtMaterialDescriptor@@I@Z ENDP ; vtArray<vtMaterialDescriptor *>::GetAt
_TEXT	ENDS
PUBLIC	?Empty@?$vtArray@PAVvtMaterialDescriptor@@@@QAEXXZ ; vtArray<vtMaterialDescriptor *>::Empty
; Function compile flags: /Ogtp
;	COMDAT ?Empty@?$vtArray@PAVvtMaterialDescriptor@@@@QAEXXZ
_TEXT	SEGMENT
?Empty@?$vtArray@PAVvtMaterialDescriptor@@@@QAEXXZ PROC	; vtArray<vtMaterialDescriptor *>::Empty, COMDAT
; _this$ = ecx
; Line 499
	push	esi
	mov	esi, ecx
; Line 501
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Empty
; Line 502
	mov	edx, DWORD PTR [esi]
	dec	eax
	push	eax
	mov	eax, DWORD PTR [edx+8]
	push	0
	call	eax
$LN4@Empty:
; Line 503
	mov	DWORD PTR [esi+4], 0
	pop	esi
; Line 504
	ret	0
?Empty@?$vtArray@PAVvtMaterialDescriptor@@@@QAEXXZ ENDP	; vtArray<vtMaterialDescriptor *>::Empty
_TEXT	ENDS
PUBLIC	?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z ; vtArray<vtMaterialDescriptor *>::Grow
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
; Function compile flags: /Ogtp
;	COMDAT ?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z
_TEXT	SEGMENT
_growto$ = 8						; size = 4
?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z PROC ; vtArray<vtMaterialDescriptor *>::Grow, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 207
	mov	edi, DWORD PTR _growto$[ebp]
	mov	esi, ecx
	mov	eax, edi
	sub	eax, DWORD PTR [esi+8]
; Line 210
	js	SHORT $LN6@Grow
; Line 212
	mov	ebx, DWORD PTR [esi+12]
	test	ebx, ebx
	jne	SHORT $LN5@Grow
; Line 215
	lea	ecx, DWORD PTR [edi*4]
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR [esi+12], eax
; Line 216
	test	eax, eax
	jne	SHORT $LN1@Grow
; Line 218
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
; Line 234
	pop	ebp
	ret	4
$LN5@Grow:
; Line 222
	cmp	edi, 4
	jae	SHORT $LN2@Grow
	mov	edi, 4
$LN2@Grow:
; Line 224
	lea	edx, DWORD PTR [edi*4]
	push	edx
	call	DWORD PTR __imp__malloc
; Line 225
	mov	ecx, DWORD PTR [esi+4]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	ebx
	push	eax
	mov	DWORD PTR [esi+12], eax
	call	_memcpy
; Line 226
	push	ebx
	call	DWORD PTR __imp__free
	add	esp, 20					; 00000014H
; Line 227
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN1@Grow
; Line 229
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
; Line 234
	pop	ebp
	ret	4
$LN1@Grow:
; Line 231
	mov	DWORD PTR [esi+8], edi
$LN6@Grow:
	pop	edi
	pop	esi
; Line 233
	mov	al, 1
	pop	ebx
; Line 234
	pop	ebp
	ret	4
?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z ENDP ; vtArray<vtMaterialDescriptor *>::Grow
_TEXT	ENDS
PUBLIC	?GetSize@?$vtArray@PAVvtStructure@@@@QBEIXZ	; vtArray<vtStructure *>::GetSize
; Function compile flags: /Ogtp
;	COMDAT ?GetSize@?$vtArray@PAVvtStructure@@@@QBEIXZ
_TEXT	SEGMENT
?GetSize@?$vtArray@PAVvtStructure@@@@QBEIXZ PROC	; vtArray<vtStructure *>::GetSize, COMDAT
; _this$ = ecx
; Line 300
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetSize@?$vtArray@PAVvtStructure@@@@QBEIXZ ENDP	; vtArray<vtStructure *>::GetSize
_TEXT	ENDS
PUBLIC	?GetAt@?$vtArray@PAVvtStructure@@@@QBEAAPAVvtStructure@@I@Z ; vtArray<vtStructure *>::GetAt
; Function compile flags: /Ogtp
;	COMDAT ?GetAt@?$vtArray@PAVvtStructure@@@@QBEAAPAVvtStructure@@I@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?GetAt@?$vtArray@PAVvtStructure@@@@QBEAAPAVvtStructure@@I@Z PROC ; vtArray<vtStructure *>::GetAt, COMDAT
; _this$ = ecx
; Line 350
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	pop	ebp
	ret	4
?GetAt@?$vtArray@PAVvtStructure@@@@QBEAAPAVvtStructure@@I@Z ENDP ; vtArray<vtStructure *>::GetAt
_TEXT	ENDS
PUBLIC	?Empty@?$vtArray@PAVvtStructure@@@@QAEXXZ	; vtArray<vtStructure *>::Empty
; Function compile flags: /Ogtp
;	COMDAT ?Empty@?$vtArray@PAVvtStructure@@@@QAEXXZ
_TEXT	SEGMENT
?Empty@?$vtArray@PAVvtStructure@@@@QAEXXZ PROC		; vtArray<vtStructure *>::Empty, COMDAT
; _this$ = ecx
; Line 499
	push	esi
	mov	esi, ecx
; Line 501
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Empty@2
; Line 502
	mov	edx, DWORD PTR [esi]
	dec	eax
	push	eax
	mov	eax, DWORD PTR [edx+8]
	push	0
	call	eax
$LN4@Empty@2:
; Line 503
	mov	DWORD PTR [esi+4], 0
	pop	esi
; Line 504
	ret	0
?Empty@?$vtArray@PAVvtStructure@@@@QAEXXZ ENDP		; vtArray<vtStructure *>::Empty
_TEXT	ENDS
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator==<char,char>
; Function compile flags: /Ogtp
;	COMDAT ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 263
	mov	al, 1
; Line 264
	ret	0
??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
$T364354 = -12						; size = 12
$T364359 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate
; Line 36
	cmp	ecx, -1
	ja	SHORT $LN1@Allocate
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate
$LN1@Allocate:
; Line 37
	lea	eax, DWORD PTR $T364359[ebp]
	push	eax
	lea	ecx, DWORD PTR $T364354[ebp]
	mov	DWORD PTR $T364359[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T364354[ebp]
	push	ecx
	mov	DWORD PTR $T364354[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN5@Allocate:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate:
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@IPAV12@@Z ; std::_Allocate<osg::ref_ptr<vtMaterial> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Allocate@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@IPAV12@@Z
_TEXT	SEGMENT
$T364362 = -12						; size = 12
$T364366 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@IPAV12@@Z PROC ; std::_Allocate<osg::ref_ptr<vtMaterial> >, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
; Line 33
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
; Line 35
	je	SHORT $LN5@Allocate@2
; Line 36
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN1@Allocate@2
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
; Line 39
	jne	SHORT $LN5@Allocate@2
$LN1@Allocate@2:
; Line 37
	lea	ecx, DWORD PTR $T364366[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T364362[ebp]
	mov	DWORD PTR $T364366[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T364362[ebp]
	push	edx
	mov	DWORD PTR $T364362[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN5@Allocate@2:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Allocate@2:
??$_Allocate@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@IPAV12@@Z ENDP ; std::_Allocate<osg::ref_ptr<vtMaterial> >
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?Empty@?$vtArray@H@@QAEXXZ			; vtArray<int>::Empty
; Function compile flags: /Ogtp
;	COMDAT ?Empty@?$vtArray@H@@QAEXXZ
_TEXT	SEGMENT
?Empty@?$vtArray@H@@QAEXXZ PROC				; vtArray<int>::Empty, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\array.h
; Line 499
	push	esi
	mov	esi, ecx
; Line 501
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Empty@3
; Line 502
	mov	edx, DWORD PTR [esi]
	dec	eax
	push	eax
	mov	eax, DWORD PTR [edx+8]
	push	0
	call	eax
$LN4@Empty@3:
; Line 503
	mov	DWORD PTR [esi+4], 0
	pop	esi
; Line 504
	ret	0
?Empty@?$vtArray@H@@QAEXXZ ENDP				; vtArray<int>::Empty
_TEXT	ENDS
PUBLIC	??$_Move@AAT_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@AAT120@@Z ; std::_Move<std::_String_val<char,std::allocator<char> >::_Bxty &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@AAT_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@AAT120@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAT_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@AAT120@@Z PROC ; std::_Move<std::_String_val<char,std::allocator<char> >::_Bxty &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 94
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 96
	pop	ebp
	ret	0
??$_Move@AAT_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YA$$QAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@AAT120@@Z ENDP ; std::_Move<std::_String_val<char,std::allocator<char> >::_Bxty &>
_TEXT	ENDS
PUBLIC	??$_Move@AAI@std@@YA$$QAIAAI@Z			; std::_Move<unsigned int &>
; Function compile flags: /Ogtp
;	COMDAT ??$_Move@AAI@std@@YA$$QAIAAI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAI@std@@YA$$QAIAAI@Z PROC			; std::_Move<unsigned int &>, COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
; Line 95
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 96
	pop	ebp
	ret	0
??$_Move@AAI@std@@YA$$QAIAAI@Z ENDP			; std::_Move<unsigned int &>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$ref_ptr@VvtMaterial@@@osg@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$ref_ptr@VvtMaterial@@@osg@@0@Z ; std::_Ptr_cat<osg::ref_ptr<vtMaterial>,osg::ref_ptr<vtMaterial> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Ptr_cat@V?$ref_ptr@VvtMaterial@@@osg@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$ref_ptr@VvtMaterial@@@osg@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$ref_ptr@VvtMaterial@@@osg@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$ref_ptr@VvtMaterial@@@osg@@0@Z PROC ; std::_Ptr_cat<osg::ref_ptr<vtMaterial>,osg::ref_ptr<vtMaterial> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 516
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 518
	mov	al, BYTE PTR __Cat$[ebp]
; Line 519
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@V?$ref_ptr@VvtMaterial@@@osg@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$ref_ptr@VvtMaterial@@@osg@@0@Z ENDP ; std::_Ptr_cat<osg::ref_ptr<vtMaterial>,osg::ref_ptr<vtMaterial> >
_TEXT	ENDS
PUBLIC	??$_Val_type@PAV?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@@Z ; std::_Val_type<osg::ref_ptr<vtMaterial> *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Val_type@PAV?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAV?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@@Z PROC ; std::_Val_type<osg::ref_ptr<vtMaterial> *>, COMDAT
; Line 790
	xor	eax, eax
; Line 791
	ret	0
??$_Val_type@PAV?$ref_ptr@VvtMaterial@@@osg@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@@Z ENDP ; std::_Val_type<osg::ref_ptr<vtMaterial> *>
_TEXT	ENDS
PUBLIC	??1?$ref_ptr@VvtMaterial@@@osg@@QAE@XZ		; osg::ref_ptr<vtMaterial>::~ref_ptr<vtMaterial>
; Function compile flags: /Ogtp
;	COMDAT ??1?$ref_ptr@VvtMaterial@@@osg@@QAE@XZ
_TEXT	SEGMENT
??1?$ref_ptr@VvtMaterial@@@osg@@QAE@XZ PROC		; osg::ref_ptr<vtMaterial>::~ref_ptr<vtMaterial>, COMDAT
; _this$ = ecx
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\ref_ptr
; Line 35
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN7@ref_ptr@6
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN7@ref_ptr@6:
	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$ref_ptr@VvtMaterial@@@osg@@QAE@XZ ENDP		; osg::ref_ptr<vtMaterial>::~ref_ptr<vtMaterial>
_TEXT	ENDS
PUBLIC	??0?$ref_ptr@VvtMaterial@@@osg@@QAE@ABV01@@Z	; osg::ref_ptr<vtMaterial>::ref_ptr<vtMaterial>
; Function compile flags: /Ogtp
;	COMDAT ??0?$ref_ptr@VvtMaterial@@@osg@@QAE@ABV01@@Z
_TEXT	SEGMENT
_rp$ = 8						; size = 4
??0?$ref_ptr@VvtMaterial@@@osg@@QAE@ABV01@@Z PROC	; osg::ref_ptr<vtMaterial>::ref_ptr<vtMaterial>, COMDAT
; _this$ = ecx
; Line 32
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _rp$[ebp]
	mov	eax, DWORD PTR [eax]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], eax
	test	eax, eax
	je	SHORT $LN6@ref_ptr@7
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN6@ref_ptr@7:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$ref_ptr@VvtMaterial@@@osg@@QAE@ABV01@@Z ENDP	; osg::ref_ptr<vtMaterial>::ref_ptr<vtMaterial>
_TEXT	ENDS
PUBLIC	??$forward@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YA$$QAV?$ref_ptr@VvtMaterial@@@osg@@AAV12@@Z ; std::forward<osg::ref_ptr<vtMaterial> >
; Function compile flags: /Ogtp
;	COMDAT ??$forward@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YA$$QAV?$ref_ptr@VvtMaterial@@@osg@@AAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YA$$QAV?$ref_ptr@VvtMaterial@@@osg@@AAV12@@Z PROC ; std::forward<osg::ref_ptr<vtMaterial> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 78
	push	ebp
	mov	ebp, esp
; Line 79
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 80
	pop	ebp
	ret	0
??$forward@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YA$$QAV?$ref_ptr@VvtMaterial@@@osg@@AAV12@@Z ENDP ; std::forward<osg::ref_ptr<vtMaterial> >
_TEXT	ENDS
PUBLIC	??0RGBi@@QAE@ABVRGBf@@@Z			; RGBi::RGBi
; Function compile flags: /Ogtp
;	COMDAT ??0RGBi@@QAE@ABVRGBf@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0RGBi@@QAE@ABVRGBf@@@Z PROC				; RGBi::RGBi, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\mathtypes.h
; Line 1261
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	edi, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edi]
	mov	esi, ecx
	fld	QWORD PTR __real@406ffff7c0000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	mov	WORD PTR [esi], ax
	fld	DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	call	__ftol2_sse
	mov	WORD PTR [esi+2], ax
	fmul	DWORD PTR [edi+8]
	call	__ftol2_sse
	mov	WORD PTR [esi+4], ax
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0RGBi@@QAE@ABVRGBf@@@Z ENDP				; RGBi::RGBi
_TEXT	ENDS
PUBLIC	??0RGBf@@QAE@ABVRGBi@@@Z			; RGBf::RGBf
; Function compile flags: /Ogtp
;	COMDAT ??0RGBf@@QAE@ABVRGBi@@@Z
_TEXT	SEGMENT
tv157 = 8						; size = 4
tv149 = 8						; size = 4
tv147 = 8						; size = 4
_v$ = 8							; size = 4
??0RGBf@@QAE@ABVRGBi@@@Z PROC				; RGBf::RGBf, COMDAT
; _this$ = ecx
; Line 1331
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv157[ebp], edx
	fild	DWORD PTR tv157[ebp]
	fld	QWORD PTR __real@406fe00000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [eax]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR tv149[ebp], edx
	fild	DWORD PTR tv149[ebp]
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [eax+4]
	movsx	ecx, WORD PTR [ecx+4]
	mov	DWORD PTR tv147[ebp], ecx
	fild	DWORD PTR tv147[ebp]
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR [eax+8]
	pop	ebp
	ret	4
??0RGBf@@QAE@ABVRGBi@@@Z ENDP				; RGBf::RGBf
_TEXT	ENDS
PUBLIC	??0RGBAf@@QAE@ABVRGBf@@@Z			; RGBAf::RGBAf
; Function compile flags: /Ogtp
;	COMDAT ??0RGBAf@@QAE@ABVRGBf@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??0RGBAf@@QAE@ABVRGBf@@@Z PROC				; RGBAf::RGBAf, COMDAT
; _this$ = ecx
; Line 1384
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	fld1
	fstp	DWORD PTR [eax+12]
	pop	ebp
	ret	4
??0RGBAf@@QAE@ABVRGBf@@@Z ENDP				; RGBAf::RGBAf
_TEXT	ENDS
PUBLIC	?Intersect@OGREnvelope@@QAEXABV1@@Z		; OGREnvelope::Intersect
; Function compile flags: /Ogtp
;	COMDAT ?Intersect@OGREnvelope@@QAEXABV1@@Z
_TEXT	SEGMENT
_sOther$ = 8						; size = 4
?Intersect@OGREnvelope@@QAEXABV1@@Z PROC		; OGREnvelope::Intersect, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogr_core.h
; Line 90
	push	ebp
	mov	ebp, esp
; Line 91
	mov	edx, DWORD PTR _sOther$[ebp]
	fld	QWORD PTR [edx+8]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 1
	jne	$LN4@Intersect
	fld	QWORD PTR [edx]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN4@Intersect
	fld	QWORD PTR [edx+24]
	fcomp	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 1
	jne	$LN4@Intersect
	fld	QWORD PTR [edx+16]
	fcomp	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN4@Intersect
; Line 93
	fld	QWORD PTR [ecx]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN32@Intersect
	fld	QWORD PTR [ecx+16]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN32@Intersect
	fld	QWORD PTR [ecx+8]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN32@Intersect
	fld	QWORD PTR [ecx+24]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN21@Intersect
; Line 102
	fld	QWORD PTR [edx]
	fstp	QWORD PTR [ecx]
; Line 103
	fld	QWORD PTR [edx+8]
	fstp	QWORD PTR [ecx+8]
; Line 104
	fld	QWORD PTR [edx+16]
	fstp	QWORD PTR [ecx+16]
$LN13@Intersect:
; Line 105
	fld	QWORD PTR [edx+24]
; Line 113
	fstp	QWORD PTR [ecx+24]
; Line 115
	pop	ebp
	ret	4
$LN32@Intersect:
; Line 93
	fstp	ST(0)
$LN21@Intersect:
; Line 95
	fld	QWORD PTR [edx]
	fcomp	QWORD PTR [ecx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@Intersect
	fld	QWORD PTR [ecx]
	jmp	SHORT $LN8@Intersect
$LN7@Intersect:
	fld	QWORD PTR [edx]
$LN8@Intersect:
	fstp	QWORD PTR [ecx]
; Line 96
	fld	QWORD PTR [edx+8]
	fcomp	QWORD PTR [ecx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@Intersect
	fld	QWORD PTR [ecx+8]
	jmp	SHORT $LN10@Intersect
$LN9@Intersect:
	fld	QWORD PTR [edx+8]
$LN10@Intersect:
	fstp	QWORD PTR [ecx+8]
; Line 97
	fld	QWORD PTR [edx+16]
	fcomp	QWORD PTR [ecx+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@Intersect
	fld	QWORD PTR [ecx+16]
	jmp	SHORT $LN12@Intersect
$LN11@Intersect:
	fld	QWORD PTR [edx+16]
$LN12@Intersect:
	fstp	QWORD PTR [ecx+16]
; Line 98
	fld	QWORD PTR [edx+24]
	fcomp	QWORD PTR [ecx+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@Intersect
	fld	QWORD PTR [ecx+24]
; Line 113
	fstp	QWORD PTR [ecx+24]
; Line 115
	pop	ebp
	ret	4
$LN4@Intersect:
; Line 110
	fldz
	fst	QWORD PTR [ecx]
; Line 111
	fst	QWORD PTR [ecx+8]
; Line 112
	fst	QWORD PTR [ecx+16]
; Line 113
	fstp	QWORD PTR [ecx+24]
; Line 115
	pop	ebp
	ret	4
?Intersect@OGREnvelope@@QAEXABV1@@Z ENDP		; OGREnvelope::Intersect
_TEXT	ENDS
PUBLIC	?Intersect@OGREnvelope3D@@QAEXABV1@@Z		; OGREnvelope3D::Intersect
; Function compile flags: /Ogtp
;	COMDAT ?Intersect@OGREnvelope3D@@QAEXABV1@@Z
_TEXT	SEGMENT
_sOther$ = 8						; size = 4
?Intersect@OGREnvelope3D@@QAEXABV1@@Z PROC		; OGREnvelope3D::Intersect, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 195
	mov	edi, DWORD PTR _sOther$[ebp]
	push	edi
	mov	esi, ecx
	call	?Intersects@OGREnvelope3D@@QBEHABV1@@Z	; OGREnvelope3D::Intersects
	test	eax, eax
	je	$LN4@Intersect@2
; Line 197
	mov	ecx, esi
	call	?IsInit@OGREnvelope3D@@QBEHXZ		; OGREnvelope3D::IsInit
; Line 199
	fld	QWORD PTR [edi]
	test	eax, eax
	je	$LN3@Intersect@2
	fcomp	QWORD PTR [esi]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@Intersect@2
	fld	QWORD PTR [esi]
	jmp	SHORT $LN8@Intersect@2
$LN7@Intersect@2:
	fld	QWORD PTR [edi]
$LN8@Intersect@2:
	fstp	QWORD PTR [esi]
; Line 200
	fld	QWORD PTR [edi+8]
	fcomp	QWORD PTR [esi+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@Intersect@2
	fld	QWORD PTR [esi+8]
	jmp	SHORT $LN10@Intersect@2
$LN9@Intersect@2:
	fld	QWORD PTR [edi+8]
$LN10@Intersect@2:
	fstp	QWORD PTR [esi+8]
; Line 201
	fld	QWORD PTR [edi+16]
	fcomp	QWORD PTR [esi+16]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@Intersect@2
	fld	QWORD PTR [esi+16]
	jmp	SHORT $LN12@Intersect@2
$LN11@Intersect@2:
	fld	QWORD PTR [edi+16]
$LN12@Intersect@2:
	fstp	QWORD PTR [esi+16]
; Line 202
	fld	QWORD PTR [edi+24]
	fcomp	QWORD PTR [esi+24]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@Intersect@2
	fld	QWORD PTR [esi+24]
	jmp	SHORT $LN14@Intersect@2
$LN13@Intersect@2:
	fld	QWORD PTR [edi+24]
$LN14@Intersect@2:
	fstp	QWORD PTR [esi+24]
; Line 203
	fld	QWORD PTR [edi+32]
	fcomp	QWORD PTR [esi+32]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN15@Intersect@2
	fld	QWORD PTR [esi+32]
	jmp	SHORT $LN16@Intersect@2
$LN15@Intersect@2:
	fld	QWORD PTR [edi+32]
$LN16@Intersect@2:
	fstp	QWORD PTR [esi+32]
; Line 204
	fld	QWORD PTR [edi+40]
	fcomp	QWORD PTR [esi+40]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN17@Intersect@2
	fld	QWORD PTR [esi+40]
	pop	edi
; Line 223
	fstp	QWORD PTR [esi+40]
	pop	esi
; Line 225
	pop	ebp
	ret	4
$LN3@Intersect@2:
; Line 208
	fstp	QWORD PTR [esi]
; Line 209
	fld	QWORD PTR [edi+8]
	fstp	QWORD PTR [esi+8]
; Line 210
	fld	QWORD PTR [edi+16]
	fstp	QWORD PTR [esi+16]
; Line 211
	fld	QWORD PTR [edi+24]
	fstp	QWORD PTR [esi+24]
; Line 212
	fld	QWORD PTR [edi+32]
	fstp	QWORD PTR [esi+32]
$LN17@Intersect@2:
; Line 213
	fld	QWORD PTR [edi+40]
	pop	edi
; Line 223
	fstp	QWORD PTR [esi+40]
	pop	esi
; Line 225
	pop	ebp
	ret	4
$LN4@Intersect@2:
; Line 218
	fldz
	pop	edi
	fst	QWORD PTR [esi]
; Line 219
	fst	QWORD PTR [esi+8]
; Line 220
	fst	QWORD PTR [esi+16]
; Line 221
	fst	QWORD PTR [esi+24]
; Line 222
	fst	QWORD PTR [esi+32]
; Line 223
	fstp	QWORD PTR [esi+40]
	pop	esi
; Line 225
	pop	ebp
	ret	4
?Intersect@OGREnvelope3D@@QAEXABV1@@Z ENDP		; OGREnvelope3D::Intersect
_TEXT	ENDS
PUBLIC	?NumItems@vtContentManager@@QAEIXZ		; vtContentManager::NumItems
; Function compile flags: /Ogtp
;	COMDAT ?NumItems@vtContentManager@@QAEIXZ
_TEXT	SEGMENT
?NumItems@vtContentManager@@QAEIXZ PROC			; vtContentManager::NumItems, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\content.h
; Line 202
	mov	eax, DWORD PTR [ecx+8]
	ret	0
?NumItems@vtContentManager@@QAEIXZ ENDP			; vtContentManager::NumItems
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	pop	ebp
	ret	4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?SetStyleTableDirectly@OGRFeature@@UAEXPAVOGRStyleTable@@@Z
_TEXT	SEGMENT
_poStyleTable$ = 8					; size = 4
?SetStyleTableDirectly@OGRFeature@@UAEXPAVOGRStyleTable@@@Z PROC ; OGRFeature::SetStyleTableDirectly, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\ogr_feature.h
; Line 296
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, DWORD PTR [edi+24]
	test	esi, esi
	je	SHORT $LN9@SetStyleTa
	mov	ecx, esi
	call	??1OGRStyleTable@@QAE@XZ		; OGRStyleTable::~OGRStyleTable
	push	esi
	call	??3@YAXPAX@Z				; operator delete
; Line 297
	mov	eax, DWORD PTR _poStyleTable$[ebp]
	add	esp, 4
	mov	DWORD PTR [edi+24], eax
	pop	edi
	pop	esi
	pop	ebp
	ret	4
$LN9@SetStyleTa:
	mov	ecx, DWORD PTR _poStyleTable$[ebp]
	mov	DWORD PTR [edi+24], ecx
	pop	edi
	pop	esi
	pop	ebp
	ret	4
?SetStyleTableDirectly@OGRFeature@@UAEXPAVOGRStyleTable@@@Z ENDP ; OGRFeature::SetStyleTableDirectly
_TEXT	ENDS
PUBLIC	??_7vtStructure3d@@6B@				; vtStructure3d::`vftable'
PUBLIC	??0vtStructure3d@@QAE@XZ			; vtStructure3d::vtStructure3d
PUBLIC	??_R4vtStructure3d@@6B@				; vtStructure3d::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtStructure3d@@@8			; vtStructure3d `RTTI Type Descriptor'
PUBLIC	??_R3vtStructure3d@@8				; vtStructure3d::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtStructure3d@@8				; vtStructure3d::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtStructure3d@@8			; vtStructure3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?GetGeom@vtStructure3d@@UAEPAVvtGeode@@XZ	; vtStructure3d::GetGeom
PUBLIC	?ShowBounds@vtStructure3d@@UAEX_N@Z		; vtStructure3d::ShowBounds
;	COMDAT ??_R1A@?0A@EA@vtStructure3d@@8
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
rdata$r	SEGMENT
??_R1A@?0A@EA@vtStructure3d@@8 DD FLAT:??_R0?AVvtStructure3d@@@8 ; vtStructure3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtStructure3d@@8
rdata$r	ENDS
;	COMDAT ??_R2vtStructure3d@@8
rdata$r	SEGMENT
??_R2vtStructure3d@@8 DD FLAT:??_R1A@?0A@EA@vtStructure3d@@8 ; vtStructure3d::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3vtStructure3d@@8
rdata$r	SEGMENT
??_R3vtStructure3d@@8 DD 00H				; vtStructure3d::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2vtStructure3d@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtStructure3d@@@8
_DATA	SEGMENT
??_R0?AVvtStructure3d@@@8 DD FLAT:??_7type_info@@6B@	; vtStructure3d `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtStructure3d@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtStructure3d@@6B@
rdata$r	SEGMENT
??_R4vtStructure3d@@6B@ DD 00H				; vtStructure3d::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtStructure3d@@@8
	DD	FLAT:??_R3vtStructure3d@@8
rdata$r	ENDS
;	COMDAT ??_7vtStructure3d@@6B@
CONST	SEGMENT
??_7vtStructure3d@@6B@ DD FLAT:??_R4vtStructure3d@@6B@	; vtStructure3d::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?GetGeom@vtStructure3d@@UAEPAVvtGeode@@XZ
	DD	FLAT:__purecall
	DD	FLAT:?ShowBounds@vtStructure3d@@UAEX_N@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0vtStructure3d@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0vtStructure3d@@QAE@XZ$0
__ehfuncinfo$??0vtStructure3d@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0vtStructure3d@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0vtStructure3d@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0vtStructure3d@@QAE@XZ PROC				; vtStructure3d::vtStructure3d, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.h
; Line 73
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0vtStructure3d@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	xor	ebx, ebx
	mov	DWORD PTR [esi], OFFSET ??_7vtStructure3d@@6B@
	mov	DWORD PTR [esi+4], ebx
	mov	ecx, ebx
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	cmp	ecx, ebx
	je	SHORT $LN6@vtStructur
	mov	DWORD PTR [esi+4], ebx
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN6@vtStructur:
	mov	WORD PTR [esi+8], bx
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0vtStructure3d@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$ref_ptr@VvtTransform@@@osg@@QAE@XZ	; osg::ref_ptr<vtTransform>::~ref_ptr<vtTransform>
__ehhandler$??0vtStructure3d@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0vtStructure3d@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0vtStructure3d@@QAE@XZ ENDP				; vtStructure3d::vtStructure3d
; Function compile flags: /Ogtp
;	COMDAT ?GetGeom@vtStructure3d@@UAEPAVvtGeode@@XZ
_TEXT	SEGMENT
?GetGeom@vtStructure3d@@UAEPAVvtGeode@@XZ PROC		; vtStructure3d::GetGeom, COMDAT
; _this$ = ecx
; Line 83
	xor	eax, eax
	ret	0
?GetGeom@vtStructure3d@@UAEPAVvtGeode@@XZ ENDP		; vtStructure3d::GetGeom
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?ShowBounds@vtStructure3d@@UAEX_N@Z
_TEXT	SEGMENT
_bShow$ = 8						; size = 1
?ShowBounds@vtStructure3d@@UAEX_N@Z PROC		; vtStructure3d::ShowBounds, COMDAT
; _this$ = ecx
; Line 87
	ret	4
?ShowBounds@vtStructure3d@@UAEX_N@Z ENDP		; vtStructure3d::ShowBounds
_TEXT	ENDS
PUBLIC	?GetContainer@vtStructure3d@@QAEPAVvtTransform@@XZ ; vtStructure3d::GetContainer
; Function compile flags: /Ogtp
;	COMDAT ?GetContainer@vtStructure3d@@QAEPAVvtTransform@@XZ
_TEXT	SEGMENT
?GetContainer@vtStructure3d@@QAEPAVvtTransform@@XZ PROC	; vtStructure3d::GetContainer, COMDAT
; _this$ = ecx
; Line 75
	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetContainer@vtStructure3d@@QAEPAVvtTransform@@XZ ENDP	; vtStructure3d::GetContainer
_TEXT	ENDS
PUBLIC	?GetBuilding@vtStructureArray3d@@QAEPAVvtBuilding3d@@H@Z ; vtStructureArray3d::GetBuilding
; Function compile flags: /Ogtp
;	COMDAT ?GetBuilding@vtStructureArray3d@@QAEPAVvtBuilding3d@@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?GetBuilding@vtStructureArray3d@@QAEPAVvtBuilding3d@@H@Z PROC ; vtStructureArray3d::GetBuilding, COMDAT
; _this$ = ecx
; Line 184
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [ecx+24]
	neg	eax
	sbb	eax, eax
	not	eax
	and	eax, ecx
	pop	ebp
	ret	4
?GetBuilding@vtStructureArray3d@@QAEPAVvtBuilding3d@@H@Z ENDP ; vtStructureArray3d::GetBuilding
_TEXT	ENDS
PUBLIC	?GetInstance@vtStructureArray3d@@QAEPAVvtStructInstance3d@@H@Z ; vtStructureArray3d::GetInstance
; Function compile flags: /Ogtp
;	COMDAT ?GetInstance@vtStructureArray3d@@QAEPAVvtStructInstance3d@@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?GetInstance@vtStructureArray3d@@QAEPAVvtStructInstance3d@@H@Z PROC ; vtStructureArray3d::GetInstance, COMDAT
; _this$ = ecx
; Line 186
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	xor	edx, edx
	cmp	DWORD PTR [eax+24], 2
	setne	dl
	dec	edx
	and	eax, edx
	pop	ebp
	ret	4
?GetInstance@vtStructureArray3d@@QAEPAVvtStructInstance3d@@H@Z ENDP ; vtStructureArray3d::GetInstance
_TEXT	ENDS
PUBLIC	??1vtStructure3d@@QAE@XZ			; vtStructure3d::~vtStructure3d
; Function compile flags: /Ogtp
;	COMDAT ??1vtStructure3d@@QAE@XZ
_TEXT	SEGMENT
??1vtStructure3d@@QAE@XZ PROC				; vtStructure3d::~vtStructure3d, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN10@vtStructur@2
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN10@vtStructur@2:
	mov	DWORD PTR [esi+4], 0
	pop	esi
	ret	0
??1vtStructure3d@@QAE@XZ ENDP				; vtStructure3d::~vtStructure3d
_TEXT	ENDS
PUBLIC	?UpdateTransform@vtStructInstance3d@@QAEXPAVvtHeightField3d@@@Z ; vtStructInstance3d::UpdateTransform
EXTRN	?SetTrans@TransformExtension@@QAEXABVFPoint3@@@Z:PROC ; TransformExtension::SetTrans
EXTRN	?ConvertFromEarth@vtLocalConversion@@QBEXABVDPoint2@@AAM1@Z:PROC ; vtLocalConversion::ConvertFromEarth
EXTRN	?Rotate2@TransformExtension@@QAEXABVFPoint3@@N@Z:PROC ; TransformExtension::Rotate2
EXTRN	?Scale@TransformExtension@@QAEXM@Z:PROC		; TransformExtension::Scale
EXTRN	?Identity@TransformExtension@@QAEXXZ:PROC	; TransformExtension::Identity
; Function compile flags: /Ogtp
;	COMDAT ?UpdateTransform@vtStructInstance3d@@QAEXPAVvtHeightField3d@@@Z
_TEXT	SEGMENT
$T364549 = -24						; size = 12
_point$ = -12						; size = 12
_pHeightField$ = 8					; size = 4
?UpdateTransform@vtStructInstance3d@@QAEXPAVvtHeightField3d@@@Z PROC ; vtStructInstance3d::UpdateTransform, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	esi, ecx
; Line 47
	mov	eax, DWORD PTR [esi+76]
	test	eax, eax
	je	$LN6@UpdateTran
; Line 50
	lea	ecx, DWORD PTR [eax+432]
	call	?Identity@TransformExtension@@QAEXXZ	; TransformExtension::Identity
; Line 52
	fld	DWORD PTR [esi+60]
	fld1
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@UpdateTran
; Line 53
	fld	DWORD PTR [esi+60]
	push	ecx
	mov	ecx, DWORD PTR [esi+76]
	fstp	DWORD PTR [esp]
	add	ecx, 432				; 000001b0H
	call	?Scale@TransformExtension@@QAEXM@Z	; TransformExtension::Scale
$LN4@UpdateTran:
; Line 55
	fld	DWORD PTR [esi+56]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@UpdateTran
; Line 56
	mov	ecx, DWORD PTR [esi+76]
	fst	DWORD PTR $T364549[ebp]
	fld1
	sub	esp, 8
	fstp	DWORD PTR $T364549[ebp+4]
	lea	eax, DWORD PTR $T364549[ebp]
	add	ecx, 432				; 000001b0H
	fstp	DWORD PTR $T364549[ebp+8]
	fld	DWORD PTR [esi+56]
	fstp	QWORD PTR [esp]
	push	eax
	call	?Rotate2@TransformExtension@@QAEXABVFPoint3@@N@Z ; TransformExtension::Rotate2
	fldz
$LN3@UpdateTran:
; Line 59
	push	edi
	fst	DWORD PTR _point$[ebp+8]
; Line 60
	mov	edi, DWORD PTR _pHeightField$[ebp]
	fst	DWORD PTR _point$[ebp+4]
	lea	ecx, DWORD PTR _point$[ebp+8]
	fstp	DWORD PTR _point$[ebp]
	push	ecx
	lea	edx, DWORD PTR _point$[ebp]
	push	edx
	lea	eax, DWORD PTR [esi+40]
	push	eax
	lea	ecx, DWORD PTR [edi+64]
	call	?ConvertFromEarth@vtLocalConversion@@QBEXABVDPoint2@@AAM1@Z ; vtLocalConversion::ConvertFromEarth
; Line 62
	cmp	BYTE PTR [esi+32], 0
	je	SHORT $LN2@UpdateTran
; Line 65
	fld	DWORD PTR [esi+28]
; Line 67
	jmp	SHORT $LN25@UpdateTran
$LN2@UpdateTran:
; Line 79
	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+12]
	push	0
	push	2
	push	0
	lea	eax, DWORD PTR _point$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _point$[ebp]
	push	ecx
	mov	ecx, edi
	call	edx
; Line 82
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR _point$[ebp+4]
$LN25@UpdateTran:
; Line 85
	mov	ecx, DWORD PTR [esi+76]
	fstp	DWORD PTR _point$[ebp+4]
	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	add	ecx, 432				; 000001b0H
	call	?SetTrans@TransformExtension@@QAEXABVFPoint3@@@Z ; TransformExtension::SetTrans
	pop	edi
$LN6@UpdateTran:
	pop	esi
; Line 86
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateTransform@vtStructInstance3d@@QAEXPAVvtHeightField3d@@@Z ENDP ; vtStructInstance3d::UpdateTransform
_TEXT	ENDS
PUBLIC	?ShowBounds@vtStructInstance3d@@UAEX_N@Z	; vtStructInstance3d::ShowBounds
EXTRN	?SetEnabled@NodeExtension@@QAEX_N@Z:PROC	; NodeExtension::SetEnabled
EXTRN	?SetCastShadow@NodeExtension@@QAEX_N@Z:PROC	; NodeExtension::SetCastShadow
EXTRN	?CreateBoundSphereGeom@@YAPAVvtGeode@@ABVFSphere@@H@Z:PROC ; CreateBoundSphereGeom
EXTRN	__imp_?getBound@Node@osg@@QBEABV?$BoundingSphereImpl@VVec3f@osg@@@2@XZ:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ShowBounds@vtStructInstance3d@@UAEX_N@Z
_TEXT	SEGMENT
_sphere$244662 = -16					; size = 16
_bShow$ = 8						; size = 1
?ShowBounds@vtStructInstance3d@@UAEX_N@Z PROC		; vtStructInstance3d::ShowBounds, COMDAT
; _this$ = ecx
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 99
	cmp	BYTE PTR _bShow$[ebp], 0
	push	esi
	mov	esi, ecx
	je	SHORT $LN5@ShowBounds
; Line 101
	mov	ecx, DWORD PTR [esi+16]
	test	ecx, ecx
	je	$LN1@ShowBounds
; Line 103
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN3@ShowBounds
; Line 107
	fldz
	fst	DWORD PTR _sphere$244662[ebp+8]
	fst	DWORD PTR _sphere$244662[ebp+4]
	fstp	DWORD PTR _sphere$244662[ebp]
; Line 108
	call	DWORD PTR __imp_?getBound@Node@osg@@QBEABV?$BoundingSphereImpl@VVec3f@osg@@@2@XZ
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _sphere$244662[ebp]
; Line 110
	push	24					; 00000018H
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR _sphere$244662[ebp+4]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR _sphere$244662[ebp+8]
	fld	DWORD PTR [eax+12]
	lea	eax, DWORD PTR _sphere$244662[ebp]
	fstp	DWORD PTR _sphere$244662[ebp+12]
	push	eax
	call	?CreateBoundSphereGeom@@YAPAVvtGeode@@ABVFSphere@@H@Z ; CreateBoundSphereGeom
	add	esp, 8
; Line 111
	push	0
	lea	ecx, DWORD PTR [eax+184]
	mov	DWORD PTR [esi+12], eax
	call	?SetCastShadow@NodeExtension@@QAEX_N@Z	; NodeExtension::SetCastShadow
; Line 112
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [edx+112]
	push	eax
	call	edx
$LN3@ShowBounds:
; Line 114
	mov	ecx, DWORD PTR [esi+12]
	push	1
	add	ecx, 184				; 000000b8H
; Line 120
	call	?SetEnabled@NodeExtension@@QAEX_N@Z	; NodeExtension::SetEnabled
	pop	esi
; Line 122
	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@ShowBounds:
; Line 119
	mov	esi, DWORD PTR [esi+12]
	test	esi, esi
	je	SHORT $LN1@ShowBounds
; Line 120
	push	0
	lea	ecx, DWORD PTR [esi+184]
	call	?SetEnabled@NodeExtension@@QAEX_N@Z	; NodeExtension::SetEnabled
$LN1@ShowBounds:
	pop	esi
; Line 122
	mov	esp, ebp
	pop	ebp
	ret	4
?ShowBounds@vtStructInstance3d@@UAEX_N@Z ENDP		; vtStructInstance3d::ShowBounds
_TEXT	ENDS
PUBLIC	??_C@_06BPBOMFNI@extend?$AA@			; `string'
PUBLIC	??_C@_05MHMEBBGO@scale?$AA@			; `string'
PUBLIC	??_C@_0BD@NAFKALMH@instance?5container?$AA@	; `string'
PUBLIC	??_C@_0CN@KACIJLHM@Looking?5in?5terrain?8s?5content?5?$CI?$CFx@ ; `string'
PUBLIC	??_C@_08FBNFKCNJ@itemname?$AA@			; `string'
PUBLIC	??_C@_0CE@MGNBNACN@Couldn?8t?5load?5model?5from?5file?5?8?$CF@ ; `string'
PUBLIC	??_C@_0BJ@EEGHOHFL@Couldn?8t?5find?5file?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@PGOIMPCC@BuildingModels?1?$AA@	; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z ; vtStructInstance3d::CreateNode
EXTRN	?GetHeightField@vtTerrain@@QAEPAVvtHeightField3d@@XZ:PROC ; vtTerrain::GetHeightField
EXTRN	?ExtendStructure@vtTerrain@@QAEXPAVvtStructure@@@Z:PROC ; vtTerrain::ExtendStructure
EXTRN	?GetValueFloat@vtTagArray@@QBE_NPBDAAM@Z:PROC	; vtTagArray::GetValueFloat
EXTRN	__imp_?setName@Object@osg@@QAEXPBD@Z:PROC
EXTRN	??0vtTransform@@QAE@XZ:PROC			; vtTransform::vtTransform
EXTRN	?vtGetContent@@YAAAVvtContentManager3d@@XZ:PROC	; vtGetContent
EXTRN	?CreateNodeFromItemname@vtContentManager3d@@QAEPAVNode@osg@@PBD@Z:PROC ; vtContentManager3d::CreateNodeFromItemname
EXTRN	?vtLoadModel@@YAPAVNode@osg@@PBD_N1@Z:PROC	; vtLoadModel
EXTRN	?Printf@vtLog@@QAAXPBDZZ:PROC			; vtLog::Printf
EXTRN	?g_Log@@3VvtLog@@A:DWORD			; g_Log
EXTRN	??1vtString@@QAE@XZ:PROC			; vtString::~vtString
EXTRN	??4vtString@@QAEABV0@ABV0@@Z:PROC		; vtString::operator=
EXTRN	??H@YA?AVvtString@@ABV0@PBD@Z:PROC		; operator+
EXTRN	??0vtString@@QAE@PBD@Z:PROC			; vtString::vtString
EXTRN	?FindFileOnPaths@@YA?AVvtString@@ABV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@PBD@Z:PROC ; FindFileOnPaths
EXTRN	?vtGetDataPath@@YAAAV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@XZ:PROC ; vtGetDataPath
EXTRN	?GetValueString@vtTagArray@@QBEPBDPBD_N@Z:PROC	; vtTagArray::GetValueString
EXTRN	__imp_?removeChild@Group@osg@@QAE_NPAVNode@2@@Z:PROC
;	COMDAT ??_C@_06BPBOMFNI@extend?$AA@
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\ref_ptr
CONST	SEGMENT
??_C@_06BPBOMFNI@extend?$AA@ DB 'extend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHMEBBGO@scale?$AA@
CONST	SEGMENT
??_C@_05MHMEBBGO@scale?$AA@ DB 'scale', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NAFKALMH@instance?5container?$AA@
CONST	SEGMENT
??_C@_0BD@NAFKALMH@instance?5container?$AA@ DB 'instance container', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KACIJLHM@Looking?5in?5terrain?8s?5content?5?$CI?$CFx@
CONST	SEGMENT
??_C@_0CN@KACIJLHM@Looking?5in?5terrain?8s?5content?5?$CI?$CFx@ DB 'Looki'
	DB	'ng in terrain''s content (%x, %d items)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBNFKCNJ@itemname?$AA@
CONST	SEGMENT
??_C@_08FBNFKCNJ@itemname?$AA@ DB 'itemname', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MGNBNACN@Couldn?8t?5load?5model?5from?5file?5?8?$CF@
CONST	SEGMENT
??_C@_0CE@MGNBNACN@Couldn?8t?5load?5model?5from?5file?5?8?$CF@ DB 'Couldn'
	DB	'''t load model from file ''%s''', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EEGHOHFL@Couldn?8t?5find?5file?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BJ@EEGHOHFL@Couldn?8t?5find?5file?5?8?$CFs?8?6?$AA@ DB 'Couldn''t '
	DB	'find file ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PGOIMPCC@BuildingModels?1?$AA@
CONST	SEGMENT
??_C@_0BA@PGOIMPCC@BuildingModels?1?$AA@ DB 'BuildingModels/', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$4
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z
_TEXT	SEGMENT
$T364640 = -40						; size = 4
_sc$ = -36						; size = 4
$T364635 = -32						; size = 4
$T364636 = -28						; size = 4
_prefix$244677 = -24					; size = 4
_fullpath$244674 = -20					; size = 4
_bRecreating$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_pTerr$ = 8						; size = 4
?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z PROC ; vtStructInstance3d::CreateNode, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 126
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	edi, ecx
; Line 129
	mov	eax, DWORD PTR [edi+16]
	xor	esi, esi
	mov	BYTE PTR _bRecreating$[ebp], 0
	cmp	eax, esi
	je	SHORT $LN27@CreateNode
; Line 132
	mov	ecx, DWORD PTR [edi+4]
	push	eax
	mov	BYTE PTR _bRecreating$[ebp], 1
	call	DWORD PTR __imp_?removeChild@Group@osg@@QAE_NPAVNode@2@@Z
; Line 133
	mov	ecx, DWORD PTR [edi+16]
	cmp	ecx, esi
	je	SHORT $LN27@CreateNode
	mov	DWORD PTR [edi+16], esi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN27@CreateNode:
; Line 136
	push	1
	lea	ecx, DWORD PTR [edi-72]
	push	OFFSET ??_C@_08BABJIOEM@filename?$AA@
	call	?GetValueString@vtTagArray@@QBEPBDPBD_N@Z ; vtTagArray::GetValueString
	mov	ebx, eax
; Line 137
	cmp	ebx, esi
	je	$LN10@CreateNode
; Line 140
	push	ebx
	call	?vtGetDataPath@@YAAAV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@XZ ; vtGetDataPath
	push	eax
	lea	eax, DWORD PTR _fullpath$244674[ebp]
	push	eax
	call	?FindFileOnPaths@@YA?AVvtString@@ABV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@PBD@Z ; FindFileOnPaths
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __$EHRec$[ebp+8], esi
; Line 141
	mov	esi, DWORD PTR _fullpath$244674[ebp]
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, esi
	npad	2
$LL107@CreateNode:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN108@CreateNode
	test	dl, dl
	je	SHORT $LN109@CreateNode
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN108@CreateNode
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL107@CreateNode
$LN109@CreateNode:
	xor	eax, eax
	jmp	SHORT $LN110@CreateNode
$LN108@CreateNode:
	sbb	eax, eax
	sbb	eax, -1
$LN110@CreateNode:
	test	eax, eax
	jne	SHORT $LN9@CreateNode
; Line 144
	push	OFFSET ??_C@_0BA@PGOIMPCC@BuildingModels?1?$AA@
	lea	ecx, DWORD PTR _prefix$244677[ebp]
	call	??0vtString@@QAE@PBD@Z			; vtString::vtString
; Line 145
	push	ebx
	lea	ecx, DWORD PTR _prefix$244677[ebp]
	push	ecx
	lea	edx, DWORD PTR $T364635[ebp]
	push	edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??H@YA?AVvtString@@ABV0@PBD@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	?vtGetDataPath@@YAAAV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@XZ ; vtGetDataPath
	push	eax
	lea	eax, DWORD PTR $T364636[ebp]
	push	eax
	call	?FindFileOnPaths@@YA?AVvtString@@ABV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@PBD@Z ; FindFileOnPaths
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _fullpath$244674[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	call	??4vtString@@QAEABV0@ABV0@@Z		; vtString::operator=
	lea	ecx, DWORD PTR $T364636[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	??1vtString@@QAE@XZ			; vtString::~vtString
	lea	ecx, DWORD PTR $T364635[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??1vtString@@QAE@XZ			; vtString::~vtString
; Line 146
	lea	ecx, DWORD PTR _prefix$244677[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??1vtString@@QAE@XZ			; vtString::~vtString
	mov	esi, DWORD PTR _fullpath$244674[ebp]
$LN9@CreateNode:
; Line 147
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, esi
	npad	1
$LL111@CreateNode:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN112@CreateNode
	test	dl, dl
	je	SHORT $LN113@CreateNode
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN112@CreateNode
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL111@CreateNode
$LN113@CreateNode:
	xor	eax, eax
	jmp	SHORT $LN114@CreateNode
$LN112@CreateNode:
	sbb	eax, eax
	sbb	eax, -1
$LN114@CreateNode:
	test	eax, eax
	jne	SHORT $LN8@CreateNode
; Line 150
	push	ebx
	push	OFFSET ??_C@_0BJ@EEGHOHFL@Couldn?8t?5find?5file?5?8?$CFs?8?6?$AA@
	push	OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Printf@vtLog@@QAAXPBDZZ		; vtLog::Printf
	add	esp, 12					; 0000000cH
; Line 151
	lea	ecx, DWORD PTR _fullpath$244674[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtString@@QAE@XZ			; vtString::~vtString
$LN125@CreateNode:
	xor	al, al
; Line 202
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@CreateNode:
; Line 160
	cmp	BYTE PTR _bRecreating$[ebp], 0
	push	0
	sete	cl
	movzx	edx, cl
	push	edx
	push	esi
	call	?vtLoadModel@@YAPAVNode@osg@@PBD_N1@Z	; vtLoadModel
	mov	esi, DWORD PTR [edi+16]
	add	esp, 12					; 0000000cH
	cmp	esi, eax
	je	SHORT $LN49@CreateNode
	mov	DWORD PTR [edi+16], eax
	test	eax, eax
	je	SHORT $LN54@CreateNode
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN54@CreateNode:
	test	esi, esi
	je	SHORT $LN49@CreateNode
	mov	ecx, esi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN49@CreateNode:
; Line 161
	cmp	DWORD PTR [edi+16], 0
	jne	SHORT $LN7@CreateNode
; Line 163
	push	ebx
	push	OFFSET ??_C@_0CE@MGNBNACN@Couldn?8t?5load?5model?5from?5file?5?8?$CF@
	push	OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Printf@vtLog@@QAAXPBDZZ		; vtLog::Printf
	add	esp, 12					; 0000000cH
; Line 164
	lea	ecx, DWORD PTR _fullpath$244674[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtString@@QAE@XZ			; vtString::~vtString
	xor	al, al
; Line 202
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN7@CreateNode:
; Line 166
	lea	ecx, DWORD PTR _fullpath$244674[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtString@@QAE@XZ			; vtString::~vtString
$LN10@CreateNode:
; Line 167
	push	1
	push	OFFSET ??_C@_08FBNFKCNJ@itemname?$AA@
	lea	ecx, DWORD PTR [edi-72]
	call	?GetValueString@vtTagArray@@QBEPBDPBD_N@Z ; vtTagArray::GetValueString
	mov	ebx, eax
; Line 168
	test	ebx, ebx
	je	$LN4@CreateNode
; Line 172
	mov	esi, DWORD PTR _pTerr$[ebp]
; Line 173
	mov	eax, DWORD PTR [esi+20]
	add	esi, 12					; 0000000cH
	push	eax
	push	esi
	push	OFFSET ??_C@_0CN@KACIJLHM@Looking?5in?5terrain?8s?5content?5?$CI?$CFx@
	push	OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Printf@vtLog@@QAAXPBDZZ		; vtLog::Printf
	add	esp, 16					; 00000010H
; Line 174
	push	ebx
	mov	ecx, esi
	call	?CreateNodeFromItemname@vtContentManager3d@@QAEPAVNode@osg@@PBD@Z ; vtContentManager3d::CreateNodeFromItemname
	mov	esi, DWORD PTR [edi+16]
	cmp	esi, eax
	je	SHORT $LN65@CreateNode
	mov	DWORD PTR [edi+16], eax
	test	eax, eax
	je	SHORT $LN70@CreateNode
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN70@CreateNode:
	test	esi, esi
	je	SHORT $LN65@CreateNode
	mov	ecx, esi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN65@CreateNode:
; Line 177
	cmp	DWORD PTR [edi+16], 0
	jne	SHORT $LN4@CreateNode
; Line 178
	push	ebx
	call	?vtGetContent@@YAAAVvtContentManager3d@@XZ ; vtGetContent
	mov	ecx, eax
	call	?CreateNodeFromItemname@vtContentManager3d@@QAEPAVNode@osg@@PBD@Z ; vtContentManager3d::CreateNodeFromItemname
	mov	esi, DWORD PTR [edi+16]
	cmp	esi, eax
	je	SHORT $LN77@CreateNode
	mov	DWORD PTR [edi+16], eax
	test	eax, eax
	je	SHORT $LN82@CreateNode
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN82@CreateNode:
	test	esi, esi
	je	SHORT $LN77@CreateNode
	mov	ecx, esi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN77@CreateNode:
; Line 180
	cmp	DWORD PTR [edi+16], 0
; Line 181
	je	$LN125@CreateNode
$LN4@CreateNode:
; Line 183
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN3@CreateNode
; Line 186
	push	448					; 000001c0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T364640[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	test	eax, eax
	je	SHORT $LN14@CreateNode
	mov	ecx, eax
	call	??0vtTransform@@QAE@XZ			; vtTransform::vtTransform
	jmp	SHORT $LN15@CreateNode
$LN14@CreateNode:
	xor	eax, eax
$LN15@CreateNode:
	mov	esi, DWORD PTR [edi+4]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	esi, eax
	je	SHORT $LN91@CreateNode
	mov	DWORD PTR [edi+4], eax
	test	eax, eax
	je	SHORT $LN96@CreateNode
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN96@CreateNode:
	test	esi, esi
	je	SHORT $LN91@CreateNode
	mov	ecx, esi
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN91@CreateNode:
; Line 187
	mov	ecx, DWORD PTR [edi+4]
	push	OFFSET ??_C@_0BD@NAFKALMH@instance?5container?$AA@
	call	DWORD PTR __imp_?setName@Object@osg@@QAEXPBD@Z
$LN3@CreateNode:
; Line 189
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [eax+112]
	push	edx
	call	eax
; Line 192
	lea	ecx, DWORD PTR _sc$[ebp]
	push	ecx
	lea	esi, DWORD PTR [edi-72]
	push	OFFSET ??_C@_05MHMEBBGO@scale?$AA@
	mov	ecx, esi
	call	?GetValueFloat@vtTagArray@@QBE_NPBDAAM@Z ; vtTagArray::GetValueFloat
	test	al, al
	je	SHORT $LN2@CreateNode
; Line 193
	fld	DWORD PTR _sc$[ebp]
	fstp	DWORD PTR [edi-12]
$LN2@CreateNode:
; Line 196
	push	1
	push	OFFSET ??_C@_06BPBOMFNI@extend?$AA@
	mov	ecx, esi
	call	?GetValueString@vtTagArray@@QBEPBDPBD_N@Z ; vtTagArray::GetValueString
; Line 197
	test	eax, eax
	je	SHORT $LN1@CreateNode
; Line 198
	mov	ecx, DWORD PTR _pTerr$[ebp]
	push	esi
	call	?ExtendStructure@vtTerrain@@QAEXPAVvtStructure@@@Z ; vtTerrain::ExtendStructure
$LN1@CreateNode:
; Line 200
	mov	ecx, DWORD PTR _pTerr$[ebp]
	call	?GetHeightField@vtTerrain@@QAEPAVvtHeightField3d@@XZ ; vtTerrain::GetHeightField
	push	eax
	mov	ecx, esi
	call	?UpdateTransform@vtStructInstance3d@@QAEXPAVvtHeightField3d@@@Z ; vtStructInstance3d::UpdateTransform
; Line 201
	mov	al, 1
; Line 202
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$0:
	lea	ecx, DWORD PTR _fullpath$244674[ebp]
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$1:
	lea	ecx, DWORD PTR _prefix$244677[ebp]
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$2:
	lea	ecx, DWORD PTR $T364635[ebp]
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$3:
	lea	ecx, DWORD PTR $T364636[ebp]
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__unwindfunclet$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z$4:
	mov	eax, DWORD PTR $T364640[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z ENDP ; vtStructInstance3d::CreateNode
PUBLIC	?IsCreated@vtStructInstance3d@@UAE_NXZ		; vtStructInstance3d::IsCreated
; Function compile flags: /Ogtp
;	COMDAT ?IsCreated@vtStructInstance3d@@UAE_NXZ
_TEXT	SEGMENT
?IsCreated@vtStructInstance3d@@UAE_NXZ PROC		; vtStructInstance3d::IsCreated, COMDAT
; _this$ = ecx
; Line 206
	xor	eax, eax
	cmp	DWORD PTR [ecx+4], eax
	setne	al
; Line 207
	ret	0
?IsCreated@vtStructInstance3d@@UAE_NXZ ENDP		; vtStructInstance3d::IsCreated
_TEXT	ENDS
PUBLIC	?DeleteNode@vtStructInstance3d@@UAEXXZ		; vtStructInstance3d::DeleteNode
; Function compile flags: /Ogtp
;	COMDAT ?DeleteNode@vtStructInstance3d@@UAEXXZ
_TEXT	SEGMENT
?DeleteNode@vtStructInstance3d@@UAEXXZ PROC		; vtStructInstance3d::DeleteNode, COMDAT
; _this$ = ecx
; Line 210
	push	esi
	mov	esi, ecx
; Line 211
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN26@DeleteNode
; Line 213
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN2@DeleteNode
; Line 215
	push	eax
	call	DWORD PTR __imp_?removeChild@Group@osg@@QAE_NPAVNode@2@@Z
; Line 216
	mov	DWORD PTR [esi+12], 0
$LN2@DeleteNode:
; Line 218
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN16@DeleteNode
; Line 220
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR __imp_?removeChild@Group@osg@@QAE_NPAVNode@2@@Z
; Line 221
	mov	ecx, DWORD PTR [esi+16]
	test	ecx, ecx
	je	SHORT $LN16@DeleteNode
	mov	DWORD PTR [esi+16], 0
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN16@DeleteNode:
; Line 223
	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	je	SHORT $LN26@DeleteNode
	mov	DWORD PTR [esi+4], 0
	pop	esi
	jmp	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN26@DeleteNode:
	pop	esi
; Line 225
	ret	0
?DeleteNode@vtStructInstance3d@@UAEXXZ ENDP		; vtStructInstance3d::DeleteNode
_TEXT	ENDS
PUBLIC	__real@41cdcd6500000000
PUBLIC	?DistanceToPoint@vtStructInstance3d@@UBENABVDPoint2@@M@Z ; vtStructInstance3d::DistanceToPoint
EXTRN	?DistanceToPoint@vtStructInstance@@UBENABVDPoint2@@M@Z:PROC ; vtStructInstance::DistanceToPoint
EXTRN	?ConvertVectorToEarth@vtLocalConversion@@QBEXMMAAVDPoint2@@@Z:PROC ; vtLocalConversion::ConvertVectorToEarth
EXTRN	?ConvertToEarth@vtLocalConversion@@QBEXMMAAVDPoint2@@@Z:PROC ; vtLocalConversion::ConvertToEarth
EXTRN	?g_Conv@@3VvtLocalConversion@@A:BYTE		; g_Conv
EXTRN	?GetTrans@TransformExtension@@QBE?AVFPoint3@@XZ:PROC ; TransformExtension::GetTrans
;	COMDAT __real@41cdcd6500000000
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\mathtypes.h
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+009
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?DistanceToPoint@vtStructInstance3d@@UBENABVDPoint2@@M@Z
_TEXT	SEGMENT
_evector$244744 = -60					; size = 16
_ecenter$244743 = -44					; size = 16
_sphere$244739 = -28					; size = 16
_trans$244740 = -12					; size = 12
_p$ = 8							; size = 4
_fMaxRadius$ = 12					; size = 4
?DistanceToPoint@vtStructInstance3d@@UBENABVDPoint2@@M@Z PROC ; vtStructInstance3d::DistanceToPoint, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 228
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	mov	esi, ecx
; Line 229
	mov	ecx, DWORD PTR [esi+88]
	test	ecx, ecx
	jne	SHORT $LN4@DistanceTo
$LN2@DistanceTo:
; Line 230
	fld	QWORD PTR __real@41cdcd6500000000
	pop	esi
; Line 257
	mov	esp, ebp
	pop	ebp
	ret	8
$LN4@DistanceTo:
; Line 232
	cmp	DWORD PTR [esi+76], 0
	je	$LN1@DistanceTo
; Line 240
	call	DWORD PTR __imp_?getBound@Node@osg@@QBEABV?$BoundingSphereImpl@VVec3f@osg@@@2@XZ
	fld	DWORD PTR [eax]
; Line 241
	mov	ecx, DWORD PTR [esi+76]
	fstp	DWORD PTR _sphere$244739[ebp]
	fld	DWORD PTR [eax+8]
	add	ecx, 432				; 000001b0H
	fstp	DWORD PTR _sphere$244739[ebp+8]
	fld	DWORD PTR [eax+12]
	lea	eax, DWORD PTR _trans$244740[ebp]
	push	eax
	fstp	DWORD PTR _sphere$244739[ebp+12]
	call	?GetTrans@TransformExtension@@QBE?AVFPoint3@@XZ ; TransformExtension::GetTrans
; Line 242
	fld	DWORD PTR _trans$244740[ebp]
	fadd	DWORD PTR _sphere$244739[ebp]
	fstp	DWORD PTR _sphere$244739[ebp]
	fld	DWORD PTR _trans$244740[ebp+8]
	fadd	DWORD PTR _sphere$244739[ebp+8]
	fstp	DWORD PTR _sphere$244739[ebp+8]
; Line 243
	fld	DWORD PTR _sphere$244739[ebp+12]
	fld	DWORD PTR _fMaxRadius$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@DistanceTo
; Line 245
	fldz
; Line 247
	lea	ecx, DWORD PTR _ecenter$244743[ebp]
	fst	QWORD PTR _ecenter$244743[ebp+8]
	push	ecx
	fst	QWORD PTR _ecenter$244743[ebp]
	sub	esp, 8
	fst	QWORD PTR _evector$244744[ebp+8]
	mov	ecx, OFFSET ?g_Conv@@3VvtLocalConversion@@A ; g_Conv
	fstp	QWORD PTR _evector$244744[ebp]
	fld	DWORD PTR _sphere$244739[ebp+8]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _sphere$244739[ebp]
	fstp	DWORD PTR [esp]
	call	?ConvertToEarth@vtLocalConversion@@QBEXMMAAVDPoint2@@@Z ; vtLocalConversion::ConvertToEarth
; Line 248
	fldz
	lea	edx, DWORD PTR _evector$244744[ebp]
	push	edx
	sub	esp, 8
	fstp	DWORD PTR [esp+4]
	mov	ecx, OFFSET ?g_Conv@@3VvtLocalConversion@@A ; g_Conv
	fld	DWORD PTR _sphere$244739[ebp+12]
	fstp	DWORD PTR [esp]
	call	?ConvertVectorToEarth@vtLocalConversion@@QBEXMMAAVDPoint2@@@Z ; vtLocalConversion::ConvertVectorToEarth
; Line 249
	mov	eax, DWORD PTR _p$[ebp]
	fld	QWORD PTR _ecenter$244743[ebp]
	fsub	QWORD PTR [eax]
	fld	QWORD PTR _ecenter$244743[ebp+8]
	fsub	QWORD PTR [eax+8]
	fmul	ST(0), ST(0)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	call	__CIsqrt
; Line 250
	fsub	QWORD PTR _evector$244744[ebp]
	pop	esi
; Line 257
	mov	esp, ebp
	pop	ebp
	ret	8
$LN1@DistanceTo:
; Line 256
	fld	DWORD PTR _fMaxRadius$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	eax
	mov	ecx, esi
	call	?DistanceToPoint@vtStructInstance@@UBENABVDPoint2@@M@Z ; vtStructInstance::DistanceToPoint
	pop	esi
; Line 257
	mov	esp, ebp
	pop	ebp
	ret	8
?DistanceToPoint@vtStructInstance3d@@UBENABVDPoint2@@M@Z ENDP ; vtStructInstance3d::DistanceToPoint
_TEXT	ENDS
PUBLIC	?GetStructure3d@vtStructureArray3d@@QAEPAVvtStructure3d@@H@Z ; vtStructureArray3d::GetStructure3d
; Function compile flags: /Ogtp
;	COMDAT ?GetStructure3d@vtStructureArray3d@@QAEPAVvtStructure3d@@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?GetStructure3d@vtStructureArray3d@@QAEPAVvtStructure3d@@H@Z PROC ; vtStructureArray3d::GetStructure3d, COMDAT
; _this$ = ecx
; Line 285
	push	ebp
	mov	ebp, esp
; Line 287
	mov	eax, DWORD PTR _i$[ebp]
	test	eax, eax
	js	SHORT $LN4@GetStructu
	cmp	eax, DWORD PTR [ecx+4]
	jge	SHORT $LN4@GetStructu
; Line 290
	mov	ecx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+eax*4]
; Line 296
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN3@GetStructu
; Line 297
	add	eax, 52					; 00000034H
; Line 306
	pop	ebp
	ret	4
$LN3@GetStructu:
; Line 299
	cmp	ecx, 1
	jne	SHORT $LN2@GetStructu
; Line 300
	add	eax, 104				; 00000068H
; Line 306
	pop	ebp
	ret	4
$LN2@GetStructu:
; Line 302
	cmp	ecx, 2
	jne	SHORT $LN4@GetStructu
; Line 303
	add	eax, 72					; 00000048H
; Line 306
	pop	ebp
	ret	4
$LN4@GetStructu:
; Line 288
	xor	eax, eax
; Line 306
	pop	ebp
	ret	4
?GetStructure3d@vtStructureArray3d@@QAEPAVvtStructure3d@@H@Z ENDP ; vtStructureArray3d::GetStructure3d
_TEXT	ENDS
PUBLIC	?ConstructStructure@vtStructureArray3d@@QAE_NH@Z ; vtStructureArray3d::ConstructStructure
; Function compile flags: /Ogtp
;	COMDAT ?ConstructStructure@vtStructureArray3d@@QAE_NH@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?ConstructStructure@vtStructureArray3d@@QAE_NH@Z PROC	; vtStructureArray3d::ConstructStructure, COMDAT
; _this$ = ecx
; Line 314
	push	ebp
	mov	ebp, esp
; Line 315
	mov	eax, DWORD PTR _index$[ebp]
	test	eax, eax
	js	SHORT $LN1@ConstructS
	cmp	eax, DWORD PTR [ecx+4]
	jge	SHORT $LN1@ConstructS
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [eax+24]
	test	edx, edx
	jne	SHORT $LN6@ConstructS
	add	eax, 52					; 00000034H
	jmp	SHORT $LN9@ConstructS
$LN6@ConstructS:
	cmp	edx, 1
	jne	SHORT $LN5@ConstructS
	add	eax, 104				; 00000068H
	jmp	SHORT $LN9@ConstructS
$LN5@ConstructS:
	cmp	edx, 2
	jne	SHORT $LN1@ConstructS
	add	eax, 72					; 00000048H
$LN9@ConstructS:
; Line 316
	test	eax, eax
	je	SHORT $LN1@ConstructS
; Line 317
	mov	ecx, DWORD PTR [ecx+104]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+4]
	push	ecx
	mov	ecx, eax
	call	edx
; Line 319
	pop	ebp
	ret	4
$LN1@ConstructS:
; Line 318
	xor	al, al
; Line 319
	pop	ebp
	ret	4
?ConstructStructure@vtStructureArray3d@@QAE_NH@Z ENDP	; vtStructureArray3d::ConstructStructure
_TEXT	ENDS
PUBLIC	?OffsetSelectedStructures@vtStructureArray3d@@QAEXABVDPoint2@@@Z ; vtStructureArray3d::OffsetSelectedStructures
EXTRN	?AdjustHeight@vtBuilding3d@@QAEXPAVvtHeightField3d@@@Z:PROC ; vtBuilding3d::AdjustHeight
EXTRN	?Offset@vtBuilding@@QAEXABVDPoint2@@@Z:PROC	; vtBuilding::Offset
; Function compile flags: /Ogtp
;	COMDAT ?OffsetSelectedStructures@vtStructureArray3d@@QAEXABVDPoint2@@@Z
_TEXT	SEGMENT
_i$244810 = -4						; size = 4
_offset$ = 8						; size = 4
?OffsetSelectedStructures@vtStructureArray3d@@QAEXABVDPoint2@@@Z PROC ; vtStructureArray3d::OffsetSelectedStructures, COMDAT
; _this$ = ecx
; Line 322
	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
; Line 324
	xor	eax, eax
	mov	edi, ecx
	mov	DWORD PTR _i$244810[ebp], eax
	cmp	DWORD PTR [edi+4], eax
	jbe	$LN5@OffsetSele
	push	ebx
	push	esi
	npad	9
$LL44@OffsetSele:
; Line 326
	mov	ecx, DWORD PTR [edi+12]
	mov	ebx, DWORD PTR [ecx+eax*4]
; Line 327
	cmp	BYTE PTR [ebx+20], 0
	je	SHORT $LN6@OffsetSele
; Line 329
	cmp	DWORD PTR [ebx+24], 0
	jne	SHORT $LN3@OffsetSele
; Line 331
	mov	esi, DWORD PTR [ebx+24]
; Line 332
	mov	edx, DWORD PTR _offset$[ebp]
	neg	esi
	sbb	esi, esi
	not	esi
	and	esi, ebx
	push	edx
	mov	ecx, esi
	call	?Offset@vtBuilding@@QAEXABVDPoint2@@@Z	; vtBuilding::Offset
; Line 333
	mov	ecx, DWORD PTR [edi+104]
	call	?GetHeightField@vtTerrain@@QAEPAVvtHeightField3d@@XZ ; vtTerrain::GetHeightField
	push	eax
	mov	ecx, esi
	call	?AdjustHeight@vtBuilding3d@@QAEXPAVvtHeightField3d@@@Z ; vtBuilding3d::AdjustHeight
	mov	eax, DWORD PTR _i$244810[ebp]
$LN3@OffsetSele:
; Line 344
	mov	ecx, 2
	cmp	DWORD PTR [ebx+24], ecx
	jne	SHORT $LN6@OffsetSele
; Line 346
	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edx+eax*4]
	xor	edx, edx
	cmp	DWORD PTR [eax+24], ecx
	setne	dl
	lea	esi, DWORD PTR [edx-1]
	and	esi, eax
; Line 347
	fld	QWORD PTR [esi+40]
	mov	eax, DWORD PTR _offset$[ebp]
	fadd	QWORD PTR [eax]
	fstp	QWORD PTR [esi+40]
	fld	QWORD PTR [eax+8]
	fadd	QWORD PTR [esi+48]
	fstp	QWORD PTR [esi+48]
; Line 348
	mov	ecx, DWORD PTR [edi+104]
	call	?GetHeightField@vtTerrain@@QAEPAVvtHeightField3d@@XZ ; vtTerrain::GetHeightField
	push	eax
	mov	ecx, esi
	call	?UpdateTransform@vtStructInstance3d@@QAEXPAVvtHeightField3d@@@Z ; vtStructInstance3d::UpdateTransform
	mov	eax, DWORD PTR _i$244810[ebp]
$LN6@OffsetSele:
; Line 324
	inc	eax
	mov	DWORD PTR _i$244810[ebp], eax
	cmp	eax, DWORD PTR [edi+4]
	jb	$LL44@OffsetSele
	pop	esi
	pop	ebx
$LN5@OffsetSele:
	pop	edi
; Line 351
	mov	esp, ebp
	pop	ebp
	ret	4
?OffsetSelectedStructures@vtStructureArray3d@@QAEXABVDPoint2@@@Z ENDP ; vtStructureArray3d::OffsetSelectedStructures
_TEXT	ENDS
PUBLIC	?OffsetSelectedStructuresVertical@vtStructureArray3d@@QAEXM@Z ; vtStructureArray3d::OffsetSelectedStructuresVertical
; Function compile flags: /Ogtp
;	COMDAT ?OffsetSelectedStructuresVertical@vtStructureArray3d@@QAEXM@Z
_TEXT	SEGMENT
_i$244825 = -4						; size = 4
_offset$ = 8						; size = 4
?OffsetSelectedStructuresVertical@vtStructureArray3d@@QAEXM@Z PROC ; vtStructureArray3d::OffsetSelectedStructuresVertical, COMDAT
; _this$ = ecx
; Line 354
	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
; Line 356
	xor	eax, eax
	mov	edi, ecx
	mov	DWORD PTR _i$244825[ebp], eax
	cmp	DWORD PTR [edi+4], eax
	jbe	SHORT $LN4@OffsetSele@2
	push	ebx
	push	esi
$LL45@OffsetSele@2:
; Line 358
	mov	ecx, DWORD PTR [edi+12]
	mov	ebx, DWORD PTR [ecx+eax*4]
; Line 359
	cmp	BYTE PTR [ebx+20], 0
	je	SHORT $LN5@OffsetSele@2
; Line 361
	cmp	DWORD PTR [ebx+24], 0
	jne	SHORT $LN2@OffsetSele@2
; Line 363
	mov	esi, DWORD PTR [ebx+24]
	neg	esi
	sbb	esi, esi
	not	esi
	and	esi, ebx
; Line 364
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR _offset$[ebp]
	fstp	DWORD PTR [esi+28]
; Line 365
	mov	ecx, DWORD PTR [edi+104]
	call	?GetHeightField@vtTerrain@@QAEPAVvtHeightField3d@@XZ ; vtTerrain::GetHeightField
	push	eax
	mov	ecx, esi
	call	?AdjustHeight@vtBuilding3d@@QAEXPAVvtHeightField3d@@@Z ; vtBuilding3d::AdjustHeight
	mov	eax, DWORD PTR _i$244825[ebp]
$LN2@OffsetSele@2:
; Line 367
	mov	ecx, 2
	cmp	DWORD PTR [ebx+24], ecx
	jne	SHORT $LN5@OffsetSele@2
; Line 369
	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edx+eax*4]
	xor	edx, edx
	cmp	DWORD PTR [eax+24], ecx
	setne	dl
	lea	esi, DWORD PTR [edx-1]
	and	esi, eax
; Line 370
	fld	DWORD PTR [esi+28]
	fadd	DWORD PTR _offset$[ebp]
	fstp	DWORD PTR [esi+28]
; Line 371
	mov	ecx, DWORD PTR [edi+104]
	call	?GetHeightField@vtTerrain@@QAEPAVvtHeightField3d@@XZ ; vtTerrain::GetHeightField
	push	eax
	mov	ecx, esi
	call	?UpdateTransform@vtStructInstance3d@@QAEXPAVvtHeightField3d@@@Z ; vtStructInstance3d::UpdateTransform
	mov	eax, DWORD PTR _i$244825[ebp]
$LN5@OffsetSele@2:
; Line 356
	inc	eax
	mov	DWORD PTR _i$244825[ebp], eax
	cmp	eax, DWORD PTR [edi+4]
	jb	SHORT $LL45@OffsetSele@2
	pop	esi
	pop	ebx
$LN4@OffsetSele@2:
	pop	edi
; Line 374
	mov	esp, ebp
	pop	ebp
	ret	4
?OffsetSelectedStructuresVertical@vtStructureArray3d@@QAEXM@Z ENDP ; vtStructureArray3d::OffsetSelectedStructuresVertical
_TEXT	ENDS
PUBLIC	?VisualDeselectAll@vtStructureArray3d@@QAEXXZ	; vtStructureArray3d::VisualDeselectAll
; Function compile flags: /Ogtp
;	COMDAT ?VisualDeselectAll@vtStructureArray3d@@QAEXXZ
_TEXT	SEGMENT
?VisualDeselectAll@vtStructureArray3d@@QAEXXZ PROC	; vtStructureArray3d::VisualDeselectAll, COMDAT
; _this$ = ecx
; Line 377
	push	esi
	push	edi
	mov	edi, ecx
; Line 378
	mov	eax, DWORD PTR [edi+4]
	xor	esi, esi
	test	eax, eax
	je	SHORT $LN1@VisualDese
	npad	3
$LL3@VisualDese:
; Line 380
	mov	ecx, DWORD PTR [edi+12]
	mov	edx, DWORD PTR [ecx+esi*4]
; Line 381
	test	esi, esi
	js	SHORT $LN13@VisualDese
	cmp	esi, eax
	jge	SHORT $LN13@VisualDese
	mov	eax, DWORD PTR [edx+24]
	test	eax, eax
	jne	SHORT $LN12@VisualDese
	lea	ecx, DWORD PTR [edx+52]
	jmp	SHORT $LN15@VisualDese
$LN12@VisualDese:
	cmp	eax, 1
	jne	SHORT $LN11@VisualDese
	lea	ecx, DWORD PTR [edx+104]
	jmp	SHORT $LN15@VisualDese
$LN11@VisualDese:
	cmp	eax, 2
	jne	SHORT $LN13@VisualDese
	lea	ecx, DWORD PTR [edx+72]
	jmp	SHORT $LN15@VisualDese
$LN13@VisualDese:
	xor	ecx, ecx
$LN15@VisualDese:
; Line 383
	mov	BYTE PTR [edx+20], 0
; Line 384
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	push	0
	call	eax
	mov	eax, DWORD PTR [edi+4]
	inc	esi
	cmp	esi, eax
	jb	SHORT $LL3@VisualDese
$LN1@VisualDese:
	pop	edi
	pop	esi
; Line 386
	ret	0
?VisualDeselectAll@vtStructureArray3d@@QAEXXZ ENDP	; vtStructureArray3d::VisualDeselectAll
_TEXT	ENDS
PUBLIC	?SetEnabled@vtStructureArray3d@@UAEX_N@Z	; vtStructureArray3d::SetEnabled
EXTRN	?RefreshPaging@vtPagedStructureLodGrid@@QAEXPAVvtStructureArray3d@@@Z:PROC ; vtPagedStructureLodGrid::RefreshPaging
EXTRN	?ClearQueue@vtPagedStructureLodGrid@@QAEXPAVvtStructureArray3d@@@Z:PROC ; vtPagedStructureLodGrid::ClearQueue
; Function compile flags: /Ogtp
;	COMDAT ?SetEnabled@vtStructureArray3d@@UAEX_N@Z
_TEXT	SEGMENT
_bTrue$ = 8						; size = 1
?SetEnabled@vtStructureArray3d@@UAEX_N@Z PROC		; vtStructureArray3d::SetEnabled, COMDAT
; _this$ = ecx
; Line 389
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 390
	mov	ebx, DWORD PTR _bTrue$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	xor	edi, edi
	cmp	DWORD PTR [esi-92], edi
	jbe	SHORT $LN9@SetEnabled
$LL49@SetEnabled:
; Line 392
	test	edi, edi
	js	SHORT $LN10@SetEnabled
	cmp	edi, DWORD PTR [esi-92]
	jge	SHORT $LN10@SetEnabled
	mov	eax, DWORD PTR [esi-84]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN18@SetEnabled
	lea	ecx, DWORD PTR [eax+52]
	jmp	SHORT $LN21@SetEnabled
$LN18@SetEnabled:
	cmp	ecx, 1
	jne	SHORT $LN17@SetEnabled
	lea	ecx, DWORD PTR [eax+104]
	jmp	SHORT $LN21@SetEnabled
$LN17@SetEnabled:
	cmp	ecx, 2
	jne	SHORT $LN10@SetEnabled
	lea	ecx, DWORD PTR [eax+72]
$LN21@SetEnabled:
; Line 393
	test	ecx, ecx
	je	SHORT $LN10@SetEnabled
; Line 397
	mov	eax, DWORD PTR [ecx+4]
; Line 398
	test	eax, eax
	je	SHORT $LN7@SetEnabled
; Line 399
	lea	ecx, DWORD PTR [eax+432]
; Line 400
	jmp	SHORT $LN50@SetEnabled
$LN7@SetEnabled:
; Line 402
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
; Line 403
	test	eax, eax
	je	SHORT $LN10@SetEnabled
; Line 404
	lea	ecx, DWORD PTR [eax+184]
$LN50@SetEnabled:
	push	ebx
	call	?SetEnabled@NodeExtension@@QAEX_N@Z	; NodeExtension::SetEnabled
$LN10@SetEnabled:
; Line 390
	inc	edi
	cmp	edi, DWORD PTR [esi-92]
	jb	SHORT $LL49@SetEnabled
$LN9@SetEnabled:
; Line 409
	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+4], bl
	test	eax, eax
	je	SHORT $LN1@SetEnabled
; Line 411
	mov	ecx, DWORD PTR [eax+464]
; Line 412
	test	ecx, ecx
	je	SHORT $LN1@SetEnabled
; Line 416
	lea	eax, DWORD PTR [esi-96]
	push	eax
	test	bl, bl
	jne	SHORT $LN2@SetEnabled
	call	?ClearQueue@vtPagedStructureLodGrid@@QAEXPAVvtStructureArray3d@@@Z ; vtPagedStructureLodGrid::ClearQueue
	pop	edi
	pop	esi
	pop	ebx
; Line 422
	pop	ebp
	ret	4
$LN2@SetEnabled:
; Line 419
	call	?RefreshPaging@vtPagedStructureLodGrid@@QAEXPAVvtStructureArray3d@@@Z ; vtPagedStructureLodGrid::RefreshPaging
$LN1@SetEnabled:
	pop	edi
	pop	esi
	pop	ebx
; Line 422
	pop	ebp
	ret	4
?SetEnabled@vtStructureArray3d@@UAEX_N@Z ENDP		; vtStructureArray3d::SetEnabled
_TEXT	ENDS
PUBLIC	?SetShadows@vtStructureArray3d@@QAEX_N@Z	; vtStructureArray3d::SetShadows
; Function compile flags: /Ogtp
;	COMDAT ?SetShadows@vtStructureArray3d@@QAEX_N@Z
_TEXT	SEGMENT
_bTrue$ = 8						; size = 1
?SetShadows@vtStructureArray3d@@QAEX_N@Z PROC		; vtStructureArray3d::SetShadows, COMDAT
; _this$ = ecx
; Line 425
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	edi, ecx
; Line 426
	mov	eax, DWORD PTR [edi+4]
	xor	esi, esi
	test	eax, eax
	je	SHORT $LN3@SetShadows
	push	ebx
	mov	ebx, DWORD PTR _bTrue$[ebp]
$LL40@SetShadows:
; Line 428
	test	esi, esi
	js	SHORT $LN4@SetShadows
	cmp	esi, eax
	jge	SHORT $LN4@SetShadows
	mov	eax, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN12@SetShadows
	add	eax, 52					; 00000034H
	jmp	SHORT $LN15@SetShadows
$LN12@SetShadows:
	cmp	ecx, 1
	jne	SHORT $LN11@SetShadows
	add	eax, 104				; 00000068H
	jmp	SHORT $LN15@SetShadows
$LN11@SetShadows:
	cmp	ecx, 2
	jne	SHORT $LN4@SetShadows
	add	eax, 72					; 00000048H
$LN15@SetShadows:
; Line 429
	test	eax, eax
	je	SHORT $LN4@SetShadows
; Line 432
	mov	eax, DWORD PTR [eax+4]
; Line 433
	test	eax, eax
	je	SHORT $LN4@SetShadows
; Line 434
	push	ebx
	lea	ecx, DWORD PTR [eax+432]
	call	?SetCastShadow@NodeExtension@@QAEX_N@Z	; NodeExtension::SetCastShadow
$LN4@SetShadows:
; Line 426
	mov	eax, DWORD PTR [edi+4]
	inc	esi
	cmp	esi, eax
	jb	SHORT $LL40@SetShadows
	pop	ebx
$LN3@SetShadows:
	pop	edi
	pop	esi
; Line 437
	pop	ebp
	ret	4
?SetShadows@vtStructureArray3d@@QAEX_N@Z ENDP		; vtStructureArray3d::SetShadows
_TEXT	ENDS
PUBLIC	?DestroyStructure@vtStructureArray3d@@UAEXH@Z	; vtStructureArray3d::DestroyStructure
; Function compile flags: /Ogtp
;	COMDAT ?DestroyStructure@vtStructureArray3d@@UAEXH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?DestroyStructure@vtStructureArray3d@@UAEXH@Z PROC	; vtStructureArray3d::DestroyStructure, COMDAT
; _this$ = ecx
; Line 467
	push	ebp
	mov	ebp, esp
; Line 469
	mov	eax, DWORD PTR _i$[ebp]
	test	eax, eax
	js	SHORT $LN6@DestroyStr
	cmp	eax, DWORD PTR [ecx+4]
	jge	SHORT $LN6@DestroyStr
	mov	ecx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	jne	SHORT $LN5@DestroyStr
; Line 470
	mov	edx, DWORD PTR [eax+52]
	lea	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 471
	pop	ebp
	ret	4
; Line 469
$LN5@DestroyStr:
	cmp	ecx, 1
	jne	SHORT $LN4@DestroyStr
; Line 470
	mov	edx, DWORD PTR [eax+104]
	lea	ecx, DWORD PTR [eax+104]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 471
	pop	ebp
	ret	4
; Line 469
$LN4@DestroyStr:
	cmp	ecx, 2
	jne	SHORT $LN6@DestroyStr
; Line 470
	mov	edx, DWORD PTR [eax+72]
	lea	ecx, DWORD PTR [eax+72]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 471
	pop	ebp
	ret	4
; Line 469
$LN6@DestroyStr:
	xor	ecx, ecx
; Line 470
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
; Line 471
	pop	ebp
	ret	4
?DestroyStructure@vtStructureArray3d@@UAEXH@Z ENDP	; vtStructureArray3d::DestroyStructure
_TEXT	ENDS
PUBLIC	__real@4cbebc20
PUBLIC	?FindMaterialDescriptor@vtMaterialDescriptorArray3d@@QBEPAVvtMaterialDescriptor@@ABVvtString@@ABVRGBf@@H@Z ; vtMaterialDescriptorArray3d::FindMaterialDescriptor
;	COMDAT __real@4cbebc20
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\array.h
CONST	SEGMENT
__real@4cbebc20 DD 04cbebc20r			; 1e+008
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?FindMaterialDescriptor@vtMaterialDescriptorArray3d@@QBEPAVvtMaterialDescriptor@@ABVvtString@@ABVRGBf@@H@Z
_TEXT	SEGMENT
_diff$365497 = -52					; size = 12
$T365449 = -38						; size = 6
_rgb$245109 = -32					; size = 6
_iSize$ = -24						; size = 4
tv324 = -20						; size = 4
tv323 = -20						; size = 4
tv322 = -20						; size = 4
tv313 = -20						; size = 4
tv305 = -20						; size = 4
_error$ = -20						; size = 4
_this$ = -16						; size = 4
_bestMatch$ = -12					; size = 4
_bestError$ = -8					; size = 4
_i$ = -4						; size = 4
_MaterialName$ = 8					; size = 4
_color$ = 12						; size = 4
_iType$ = 16						; size = 4
?FindMaterialDescriptor@vtMaterialDescriptorArray3d@@QBEPAVvtMaterialDescriptor@@ABVvtString@@ABVRGBf@@H@Z PROC ; vtMaterialDescriptorArray3d::FindMaterialDescriptor, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 676
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
; Line 678
	xor	eax, eax
	mov	DWORD PTR _this$[ebp], ecx
	cmp	DWORD PTR _MaterialName$[ebp], eax
	je	$LN9@FindMateri
; Line 685
	mov	edx, DWORD PTR [ecx+4]
	fld	DWORD PTR __real@4cbebc20
	fstp	DWORD PTR _bestError$[ebp]
	mov	DWORD PTR _bestMatch$[ebp], -1
	mov	DWORD PTR _iSize$[ebp], edx
; Line 686
	mov	DWORD PTR _i$[ebp], eax
	test	edx, edx
	jle	$LN1@FindMateri
	push	ebx
	push	esi
	push	edi
	jmp	SHORT $LN7@FindMateri
	npad	6
$LL42@FindMateri:
	mov	ecx, DWORD PTR _this$[ebp]
$LN7@FindMateri:
; Line 688
	mov	ecx, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR [ecx+eax*4]
; Line 691
	mov	edx, DWORD PTR _MaterialName$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	test	eax, eax
	jne	$LN6@FindMateri
; Line 695
	mov	eax, DWORD PTR _iType$[ebp]
	cmp	eax, -1
	je	SHORT $LN3@FindMateri
	cmp	eax, DWORD PTR [esi+4]
	jne	$LN6@FindMateri
$LN3@FindMateri:
; Line 700
	mov	ecx, DWORD PTR _color$[ebp]
	fld	DWORD PTR [ecx]
	mov	edi, DWORD PTR [esi+24]
	fld	QWORD PTR __real@406ffff7c0000000
	mov	si, WORD PTR [esi+28]
	fmul	ST(1), ST(0)
	mov	DWORD PTR _rgb$245109[ebp], edi
	fxch	ST(1)
	call	__ftol2_sse
	mov	edx, DWORD PTR _color$[ebp]
	fld	DWORD PTR [edx+4]
	mov	bx, ax
	fmul	ST(0), ST(1)
	call	__ftol2_sse
	mov	WORD PTR $T365449[ebp+2], ax
	mov	eax, DWORD PTR _color$[ebp]
	fmul	DWORD PTR [eax+8]
	call	__ftol2_sse
	movsx	ecx, di
	movsx	edx, bx
	sub	ecx, edx
	movsx	edx, WORD PTR $T365449[ebp+2]
	mov	DWORD PTR tv324[ebp], ecx
	shr	edi, 16					; 00000010H
	movsx	ecx, di
	fild	DWORD PTR tv324[ebp]
	sub	ecx, edx
	fstp	DWORD PTR _diff$365497[ebp]
	mov	DWORD PTR tv323[ebp], ecx
	movsx	edx, ax
	fild	DWORD PTR tv323[ebp]
	movsx	ecx, si
	fstp	DWORD PTR _diff$365497[ebp+4]
	sub	ecx, edx
	mov	DWORD PTR tv322[ebp], ecx
	fild	DWORD PTR tv322[ebp]
	fstp	DWORD PTR _diff$365497[ebp+8]
	fld	DWORD PTR _diff$365497[ebp+4]
	fld	DWORD PTR _diff$365497[ebp]
	fld	DWORD PTR _diff$365497[ebp+8]
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(2)
	fmulp	ST(3), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fmul	ST(0), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv313[ebp]
	fld	DWORD PTR tv313[ebp]
	call	__CIsqrt
	fstp	DWORD PTR tv305[ebp]
	fld	DWORD PTR tv305[ebp]
	fstp	DWORD PTR _error$[ebp]
; Line 701
	fld	DWORD PTR _error$[ebp]
	fld	DWORD PTR _bestError$[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN44@FindMateri
; Line 703
	mov	eax, DWORD PTR _i$[ebp]
; Line 704
	fstp	DWORD PTR _bestError$[ebp]
	mov	DWORD PTR _bestMatch$[ebp], eax
	jmp	SHORT $LN6@FindMateri
$LN44@FindMateri:
	fstp	ST(0)
$LN6@FindMateri:
; Line 686
	mov	eax, DWORD PTR _i$[ebp]
	inc	eax
	mov	DWORD PTR _i$[ebp], eax
	cmp	eax, DWORD PTR _iSize$[ebp]
	jl	$LL42@FindMateri
; Line 707
	mov	eax, DWORD PTR _bestMatch$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	cmp	eax, -1
	je	SHORT $LN1@FindMateri
; Line 708
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax*4]
; Line 710
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN1@FindMateri:
; Line 709
	xor	eax, eax
$LN9@FindMateri:
; Line 710
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindMaterialDescriptor@vtMaterialDescriptorArray3d@@QBEPAVvtMaterialDescriptor@@ABVvtString@@ABVRGBf@@H@Z ENDP ; vtMaterialDescriptorArray3d::FindMaterialDescriptor
_TEXT	ENDS
PUBLIC	?SetCastShadow@vtStructure3d@@QAEX_N@Z		; vtStructure3d::SetCastShadow
; Function compile flags: /Ogtp
;	COMDAT ?SetCastShadow@vtStructure3d@@QAEX_N@Z
_TEXT	SEGMENT
_b$ = 8							; size = 1
?SetCastShadow@vtStructure3d@@QAEX_N@Z PROC		; vtStructure3d::SetCastShadow, COMDAT
; _this$ = ecx
; Line 735
	push	ebp
	mov	ebp, esp
; Line 736
	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN1@SetCastSha
; Line 737
	lea	ecx, DWORD PTR [eax+432]
; Line 738
	pop	ebp
; Line 737
	jmp	?SetCastShadow@NodeExtension@@QAEX_N@Z	; NodeExtension::SetCastShadow
$LN1@SetCastSha:
; Line 738
	pop	ebp
	ret	4
?SetCastShadow@vtStructure3d@@QAEX_N@Z ENDP		; vtStructure3d::SetCastShadow
_TEXT	ENDS
PUBLIC	?GetCastShadow@vtStructure3d@@QAE_NXZ		; vtStructure3d::GetCastShadow
EXTRN	?GetCastShadow@NodeExtension@@QAE_NXZ:PROC	; NodeExtension::GetCastShadow
; Function compile flags: /Ogtp
;	COMDAT ?GetCastShadow@vtStructure3d@@QAE_NXZ
_TEXT	SEGMENT
?GetCastShadow@vtStructure3d@@QAE_NXZ PROC		; vtStructure3d::GetCastShadow, COMDAT
; _this$ = ecx
; Line 742
	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	je	SHORT $LN2@GetCastSha
; Line 743
	lea	ecx, DWORD PTR [eax+432]
	jmp	?GetCastShadow@NodeExtension@@QAE_NXZ	; NodeExtension::GetCastShadow
$LN2@GetCastSha:
; Line 745
	xor	al, al
; Line 746
	ret	0
?GetCastShadow@vtStructure3d@@QAE_NXZ ENDP		; vtStructure3d::GetCastShadow
_TEXT	ENDS
PUBLIC	__real@3fd99999a0000000
PUBLIC	__real@3fe6666660000000
PUBLIC	?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z ; vtMaterialDescriptorArray3d::MakeMaterial
EXTRN	?SetLighting@vtMaterial@@QAEX_N@Z:PROC		; vtMaterial::SetLighting
EXTRN	?SetCulling@vtMaterial@@QAEX_N@Z:PROC		; vtMaterial::SetCulling
EXTRN	??0vtMaterial@@QAE@XZ:PROC			; vtMaterial::vtMaterial
;	COMDAT __real@3fd99999a0000000
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\structure.h
CONST	SEGMENT
__real@3fd99999a0000000 DQ 03fd99999a0000000r	; 0.4
CONST	ENDS
;	COMDAT __real@3fe6666660000000
CONST	SEGMENT
__real@3fe6666660000000 DQ 03fe6666660000000r	; 0.7
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z$0
__ehfuncinfo$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z
_TEXT	SEGMENT
$T365544 = -28						; size = 12
$T365543 = -28						; size = 12
$T365539 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_desc$ = 8						; size = 4
_color$ = 12						; size = 4
?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z PROC ; vtMaterialDescriptorArray3d::MakeMaterial, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 753
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 754
	push	224					; 000000e0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T365539[ebp], eax
	xor	esi, esi
	mov	DWORD PTR __$EHRec$[ebp+8], esi
	cmp	eax, esi
	je	SHORT $LN5@MakeMateri
	mov	ecx, eax
	call	??0vtMaterial@@QAE@XZ			; vtMaterial::vtMaterial
	mov	esi, eax
$LN5@MakeMateri:
; Line 755
	mov	ebx, DWORD PTR _desc$[ebp]
	fldz
	cmp	BYTE PTR [ebx+31], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 758
	mov	ecx, esi
	je	SHORT $LN32@MakeMateri
	fld1
	sub	esp, 16					; 00000010H
	fstp	DWORD PTR [esp+12]
	fst	DWORD PTR [esp+8]
	fst	DWORD PTR [esp+4]
	fstp	DWORD PTR [esp]
	call	?SetDiffuse@vtMaterial@@QAEXMMMM@Z	; vtMaterial::SetDiffuse
; Line 759
	fld1
	sub	esp, 12					; 0000000cH
	fst	DWORD PTR [esp+8]
	fst	DWORD PTR [esp+4]
; Line 761
	jmp	SHORT $LN34@MakeMateri
$LN32@MakeMateri:
; Line 763
	mov	edi, DWORD PTR _color$[ebp]
	fstp	ST(0)
	fld	DWORD PTR [edi]
	sub	esp, 16					; 00000010H
	fld	QWORD PTR __real@3fe6666660000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T365543[ebp]
	fld	DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T365543[ebp+4]
	fmul	DWORD PTR [edi+8]
	fstp	DWORD PTR $T365543[ebp+8]
	fld1
	fstp	DWORD PTR [esp+12]
	fld	DWORD PTR $T365543[ebp+8]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T365543[ebp+4]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T365543[ebp]
	fstp	DWORD PTR [esp]
	call	?SetDiffuse@vtMaterial@@QAEXMMMM@Z	; vtMaterial::SetDiffuse
; Line 764
	fld	DWORD PTR [edi]
	fld	QWORD PTR __real@3fd99999a0000000
	sub	esp, 12					; 0000000cH
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR $T365544[ebp]
	fld	DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T365544[ebp+4]
	fmul	DWORD PTR [edi+8]
	fstp	DWORD PTR $T365544[ebp+8]
	fld	DWORD PTR $T365544[ebp+8]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T365544[ebp+4]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T365544[ebp]
$LN34@MakeMateri:
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	?SetAmbient@vtMaterial@@QAEXMMM@Z	; vtMaterial::SetAmbient
; Line 766
	fldz
	sub	esp, 12					; 0000000cH
	fst	DWORD PTR [esp+8]
	fst	DWORD PTR [esp+4]
	mov	ecx, esi
	fstp	DWORD PTR [esp]
	call	?SetSpecular@vtMaterial@@QAEXMMM@Z	; vtMaterial::SetSpecular
; Line 767
	cmp	BYTE PTR [ebx+30], 0
	sete	al
	movzx	ecx, al
	push	ecx
	mov	ecx, esi
	call	?SetCulling@vtMaterial@@QAEX_N@Z	; vtMaterial::SetCulling
; Line 768
	push	1
	mov	ecx, esi
	call	?SetLighting@vtMaterial@@QAEX_N@Z	; vtMaterial::SetLighting
; Line 769
	mov	eax, esi
; Line 770
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z$0:
	mov	eax, DWORD PTR $T365539[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z ENDP ; vtMaterialDescriptorArray3d::MakeMaterial
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1350
	push	ebp
	mov	ebp, esp
; Line 1351
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jb	SHORT $LN5@begin
	mov	ecx, DWORD PTR [ecx]
$LN5@begin:
	mov	DWORD PTR [eax], ecx
; Line 1352
	pop	ebp
	ret	4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Ogtp
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx
; Line 1355
	push	ebp
	mov	ebp, esp
; Line 1356
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jb	SHORT $LN5@begin@2
	mov	ecx, DWORD PTR [ecx]
$LN5@begin@2:
	mov	DWORD PTR [eax], ecx
; Line 1357
	pop	ebp
	ret	4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx
; Line 1360
	push	ebp
	mov	ebp, esp
; Line 1361
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN5@end
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1362
	pop	ebp
	ret	4
; Line 1361
$LN5@end:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1362
	pop	ebp
	ret	4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
; Function compile flags: /Ogtp
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx
; Line 1365
	push	ebp
	mov	ebp, esp
; Line 1366
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN5@end@2
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1367
	pop	ebp
	ret	4
; Line 1366
$LN5@end@2:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1367
	pop	ebp
	ret	4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
PUBLIC	?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cbegin
; Function compile flags: /Ogtp
;	COMDAT ?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cbegin, COMDAT
; _this$ = ecx
; Line 1391
	push	ebp
	mov	ebp, esp
; Line 1392
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jb	SHORT $LN7@cbegin
	mov	ecx, DWORD PTR [ecx]
$LN7@cbegin:
	mov	DWORD PTR [eax], ecx
; Line 1393
	pop	ebp
	ret	4
?cbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cbegin
_TEXT	ENDS
PUBLIC	?cend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cend
; Function compile flags: /Ogtp
;	COMDAT ?cend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?cend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cend, COMDAT
; _this$ = ecx
; Line 1396
	push	ebp
	mov	ebp, esp
; Line 1397
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@cend
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1398
	pop	ebp
	ret	4
; Line 1397
$LN7@cend:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1398
	pop	ebp
	ret	4
?cend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::cend
_TEXT	ENDS
PUBLIC	?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at
; Function compile flags: /Ogtp
;	COMDAT ?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at, COMDAT
; _this$ = ecx
; Line 1421
	push	ebp
	mov	ebp, esp
; Line 1422
	mov	eax, DWORD PTR __Off$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	ja	SHORT $LN1@at
; Line 1423
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN1@at:
; Line 1424
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN9@at
	mov	ecx, DWORD PTR [ecx]
$LN9@at:
	add	eax, ecx
; Line 1425
	pop	ebp
	ret	4
$LN11@at:
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at
_TEXT	ENDS
PUBLIC	?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at
; Function compile flags: /Ogtp
;	COMDAT ?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at, COMDAT
; _this$ = ecx
; Line 1428
	push	ebp
	mov	ebp, esp
; Line 1429
	mov	eax, DWORD PTR __Off$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	ja	SHORT $LN1@at@2
; Line 1430
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN1@at@2:
; Line 1431
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN9@at@2
	mov	ecx, DWORD PTR [ecx]
$LN9@at@2:
	add	eax, ecx
; Line 1432
	pop	ebp
	ret	4
$LN11@at@2:
?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::at
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx
; Line 1435
	push	ebp
	mov	ebp, esp
; Line 1446
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN5@operator@6
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Off$[ebp]
	add	eax, ecx
; Line 1447
	pop	ebp
	ret	4
; Line 1446
$LN5@operator@6:
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx]
; Line 1447
	pop	ebp
	ret	4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx
; Line 1450
	push	ebp
	mov	ebp, esp
; Line 1459
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN5@operator@7
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Off$[ebp]
	add	eax, ecx
; Line 1460
	pop	ebp
	ret	4
; Line 1459
$LN5@operator@7:
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx]
; Line 1460
	pop	ebp
	ret	4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
PUBLIC	?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
; Function compile flags: /Ogtp
;	COMDAT ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ
_TEXT	SEGMENT
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front, COMDAT
; _this$ = ecx
; Line 1474
	mov	eax, ecx
; Line 1475
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN8@front
	mov	eax, DWORD PTR [eax]
$LN8@front:
; Line 1476
	ret	0
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
_TEXT	ENDS
PUBLIC	?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
; Function compile flags: /Ogtp
;	COMDAT ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front, COMDAT
; _this$ = ecx
; Line 1479
	mov	eax, ecx
; Line 1480
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN8@front@2
	mov	eax, DWORD PTR [eax]
$LN8@front@2:
; Line 1481
	ret	0
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
_TEXT	ENDS
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Ogtp
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx
; Line 1495
	mov	eax, ecx
; Line 1496
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN6@c_str
	mov	eax, DWORD PTR [eax]
$LN6@c_str:
; Line 1497
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
; Function compile flags: /Ogtp
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx
; Line 1500
	mov	eax, ecx
; Line 1501
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN8@data
	mov	eax, DWORD PTR [eax]
$LN8@data:
; Line 1502
	ret	0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx
; Line 1517
	mov	eax, -2					; fffffffeH
; Line 1518
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::copy
; Function compile flags: /Ogtp
;	COMDAT ?copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Off$ = 16						; size = 4
?copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::copy, COMDAT
; _this$ = ecx
; Line 1557
	push	ebp
	mov	ebp, esp
; Line 1563
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR __Off$[ebp]
	cmp	eax, edx
	jae	SHORT $LN2@copy
; Line 1564
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN2@copy:
	push	esi
; Line 1565
	mov	esi, DWORD PTR __Count$[ebp]
	sub	eax, edx
	cmp	eax, esi
	jae	SHORT $LN1@copy
; Line 1566
	mov	esi, eax
$LN1@copy:
; Line 1567
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN10@copy
	mov	ecx, DWORD PTR [ecx]
$LN10@copy:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	esi
	add	ecx, edx
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1568
	mov	eax, esi
	pop	esi
; Line 1569
	pop	ebp
	ret	12					; 0000000cH
$LN14@copy:
?copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::copy
_TEXT	ENDS
PUBLIC	?_Copy_s@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_s
; Function compile flags: /Ogtp
;	COMDAT ?_Copy_s@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADIII@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Dest_size$ = 12					; size = 4
__Count$ = 16						; size = 4
__Off$ = 20						; size = 4
?_Copy_s@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_s, COMDAT
; _this$ = ecx
; Line 1573
	push	ebp
	mov	ebp, esp
; Line 1579
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR __Off$[ebp]
	cmp	eax, edx
	jae	SHORT $LN2@Copy_s
; Line 1580
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN2@Copy_s:
	push	esi
; Line 1581
	mov	esi, DWORD PTR __Count$[ebp]
	sub	eax, edx
	cmp	eax, esi
	jae	SHORT $LN1@Copy_s
; Line 1582
	mov	esi, eax
$LN1@Copy_s:
; Line 1583
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN10@Copy_s
	mov	ecx, DWORD PTR [ecx]
$LN10@Copy_s:
	mov	eax, DWORD PTR __Dest_size$[ebp]
	push	esi
	add	ecx, edx
	push	ecx
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	eax
	push	ecx
	call	DWORD PTR __imp__memcpy_s
	add	esp, 16					; 00000010H
; Line 1584
	mov	eax, esi
	pop	esi
; Line 1585
	pop	ebp
	ret	16					; 00000010H
$LN14@Copy_s:
?_Copy_s@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPADIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_s
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtp
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx
; Line 1617
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1623
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR _this$[ebp], ecx
	test	edx, edx
	jne	SHORT $LN6@find
	cmp	eax, DWORD PTR [ecx+16]
; Line 1624
	jbe	SHORT $LN7@find
$LN6@find:
	push	ebx
	push	esi
	push	edi
; Line 1627
	mov	edi, DWORD PTR [ecx+16]
	cmp	eax, edi
	jae	SHORT $LN2@find
	sub	edi, eax
	cmp	edx, edi
	ja	SHORT $LN2@find
; Line 1630
	mov	esi, 1
	sub	esi, edx
	add	edi, esi
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN11@find
	mov	ecx, DWORD PTR [ecx]
$LN11@find:
	lea	ebx, DWORD PTR [ecx+eax]
; Line 1632
	mov	eax, DWORD PTR __Ptr$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	edi
	push	ecx
	push	ebx
	call	DWORD PTR __imp__memchr
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN2@find
$LL4@find:
; Line 1633
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	edx
	push	eax
	push	esi
	call	?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN20@find
; Line 1632
	mov	ecx, DWORD PTR __Ptr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	sub	ebx, esi
	lea	edi, DWORD PTR [edi+ebx-1]
	push	edi
	push	edx
	lea	ebx, DWORD PTR [esi+1]
	push	ebx
	call	DWORD PTR __imp__memchr
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LL4@find
$LN2@find:
	pop	edi
	pop	esi
; Line 1637
	or	eax, -1
	pop	ebx
$LN7@find:
; Line 1638
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN20@find:
; Line 1634
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN17@find
	mov	ecx, DWORD PTR [ecx]
$LN17@find:
	pop	edi
	mov	eax, esi
	pop	esi
	sub	eax, ecx
	pop	ebx
; Line 1638
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtp
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx
; Line 1641
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1643
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@find@2:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@find@2
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	push	esi
	call	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
	pop	edi
	pop	esi
; Line 1644
	pop	ebp
	ret	8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtp
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx
; Line 1647
	push	ebp
	mov	ebp, esp
; Line 1648
	mov	eax, DWORD PTR __Off$[ebp]
	push	1
	push	eax
	lea	edx, DWORD PTR __Ch$[ebp]
	push	edx
	call	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Line 1649
	pop	ebp
	ret	8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtp
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx
; Line 1658
	push	ebp
	mov	ebp, esp
; Line 1664
	mov	edx, DWORD PTR __Count$[ebp]
	push	edi
	mov	edi, ecx
; Line 1666
	mov	eax, DWORD PTR [edi+16]
	test	edx, edx
	jne	SHORT $LN8@rfind
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, eax
	jae	SHORT $LN9@rfind
	mov	eax, ecx
	pop	edi
; Line 1681
	pop	ebp
	ret	12					; 0000000cH
$LN8@rfind:
	push	ebx
	push	esi
; Line 1667
	cmp	edx, eax
	ja	SHORT $LN27@rfind
; Line 1671
	mov	ecx, DWORD PTR __Off$[ebp]
	sub	eax, edx
	cmp	ecx, eax
	jae	SHORT $LN13@rfind
	mov	eax, ecx
$LN13@rfind:
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN17@rfind
	mov	ecx, DWORD PTR [edi]
	jmp	SHORT $LN18@rfind
$LN17@rfind:
	mov	ecx, edi
$LN18@rfind:
	mov	ebx, DWORD PTR __Ptr$[ebp]
	lea	esi, DWORD PTR [ecx+eax]
$LL6@rfind:
; Line 1674
	mov	al, BYTE PTR [ebx]
	cmp	BYTE PTR [esi], al
	jne	SHORT $LN3@rfind
	push	edx
	push	ebx
	push	esi
	call	?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN26@rfind
$LN3@rfind:
; Line 1676
	mov	ecx, edi
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	cmp	esi, eax
	je	SHORT $LN27@rfind
; Line 1672
	mov	edx, DWORD PTR __Count$[ebp]
	dec	esi
	jmp	SHORT $LL6@rfind
$LN26@rfind:
; Line 1675
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN23@rfind
	mov	edi, DWORD PTR [edi]
$LN23@rfind:
	mov	eax, esi
	pop	esi
	pop	ebx
	sub	eax, edi
	pop	edi
; Line 1681
	pop	ebp
	ret	12					; 0000000cH
$LN27@rfind:
	pop	esi
; Line 1680
	or	eax, -1
	pop	ebx
$LN9@rfind:
	pop	edi
; Line 1681
	pop	ebp
	ret	12					; 0000000cH
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtp
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx
; Line 1684
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1686
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@rfind@2:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@rfind@2
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	push	esi
	call	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
	pop	edi
	pop	esi
; Line 1687
	pop	ebp
	ret	8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtp
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx
; Line 1690
	push	ebp
	mov	ebp, esp
; Line 1691
	mov	eax, DWORD PTR __Off$[ebp]
	push	1
	push	eax
	lea	edx, DWORD PTR __Ch$[ebp]
	push	edx
	call	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Line 1692
	pop	ebp
	ret	8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of, COMDAT
; _this$ = ecx
; Line 1702
	push	ebp
	mov	ebp, esp
; Line 1708
	cmp	DWORD PTR __Count$[ebp], 0
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	jbe	SHORT $LN2@find_first
	mov	ebx, DWORD PTR [edi+16]
	mov	edx, DWORD PTR __Off$[ebp]
	cmp	edx, ebx
	jae	SHORT $LN2@find_first
; Line 1710
	mov	ecx, DWORD PTR [edi+20]
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN10@find_first
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN11@find_first
$LN10@find_first:
	mov	eax, edi
$LN11@find_first:
	add	ebx, eax
; Line 1711
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN14@find_first
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN15@find_first
$LN14@find_first:
	mov	eax, edi
$LN15@find_first:
	lea	esi, DWORD PTR [eax+edx]
	cmp	esi, ebx
	jae	SHORT $LN2@find_first
	npad	6
$LL25@find_first:
; Line 1712
	mov	eax, DWORD PTR __Count$[ebp]
	movsx	ecx, BYTE PTR [esi]
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	eax
	push	ecx
	push	edx
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN23@find_first
; Line 1711
	inc	esi
	cmp	esi, ebx
	jb	SHORT $LL25@find_first
$LN2@find_first:
	pop	edi
	pop	esi
; Line 1716
	or	eax, -1
	pop	ebx
; Line 1717
	pop	ebp
	ret	12					; 0000000cH
$LN23@find_first:
; Line 1713
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN20@find_first
	mov	edi, DWORD PTR [edi]
$LN20@find_first:
	mov	eax, esi
	sub	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 1717
	pop	ebp
	ret	12					; 0000000cH
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
_TEXT	ENDS
PUBLIC	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of, COMDAT
; _this$ = ecx
; Line 1720
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1722
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@find_first@2:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@find_first@2
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	push	esi
	call	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
	pop	edi
	pop	esi
; Line 1723
	pop	ebp
	ret	8
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
_TEXT	ENDS
PUBLIC	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of, COMDAT
; _this$ = ecx
; Line 1726
	push	ebp
	mov	ebp, esp
; Line 1727
	mov	eax, DWORD PTR __Off$[ebp]
	push	1
	push	eax
	lea	edx, DWORD PTR __Ch$[ebp]
	push	edx
	call	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Line 1728
	pop	ebp
	ret	8
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
_TEXT	ENDS
PUBLIC	?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of, COMDAT
; _this$ = ecx
; Line 1738
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
; Line 1744
	mov	edi, DWORD PTR __Count$[ebp]
	mov	DWORD PTR _this$[ebp], ecx
	test	edi, edi
	je	SHORT $LN24@find_last_
	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	je	SHORT $LN24@find_last_
; Line 1747
	mov	edx, DWORD PTR __Off$[ebp]
	cmp	edx, eax
	jae	SHORT $LN10@find_last_
	mov	eax, edx
	jmp	SHORT $LN11@find_last_
$LN10@find_last_:
	dec	eax
$LN11@find_last_:
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN14@find_last_
	mov	esi, DWORD PTR [ecx]
	jmp	SHORT $LN15@find_last_
$LN14@find_last_:
	mov	esi, ecx
$LN15@find_last_:
; Line 1749
	mov	ebx, DWORD PTR __imp__memchr
	add	esi, eax
	movsx	eax, BYTE PTR [esi]
	push	edi
	mov	edi, DWORD PTR __Ptr$[ebp]
	push	eax
	push	edi
	call	ebx
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN23@find_last_
	npad	6
$LL6@find_last_:
; Line 1751
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	cmp	esi, eax
	je	SHORT $LN24@find_last_
; Line 1749
	mov	ecx, DWORD PTR __Count$[ebp]
	movsx	edx, BYTE PTR [esi-1]
	dec	esi
	push	ecx
	push	edx
	push	edi
	call	ebx
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LL6@find_last_
$LN23@find_last_:
; Line 1750
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN20@find_last_
	mov	ecx, DWORD PTR [ecx]
$LN20@find_last_:
	pop	edi
	mov	eax, esi
	pop	esi
	sub	eax, ecx
	pop	ebx
; Line 1756
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN24@find_last_:
	pop	edi
	pop	esi
; Line 1755
	or	eax, -1
	pop	ebx
; Line 1756
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
_TEXT	ENDS
PUBLIC	?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of, COMDAT
; _this$ = ecx
; Line 1760
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1762
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@find_last_@2:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@find_last_@2
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	push	esi
	call	?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
	pop	edi
	pop	esi
; Line 1763
	pop	ebp
	ret	8
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
_TEXT	ENDS
PUBLIC	?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of, COMDAT
; _this$ = ecx
; Line 1766
	push	ebp
	mov	ebp, esp
; Line 1767
	mov	eax, DWORD PTR __Off$[ebp]
	push	1
	push	eax
	lea	edx, DWORD PTR __Ch$[ebp]
	push	edx
	call	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Line 1768
	pop	ebp
	ret	8
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
_TEXT	ENDS
PUBLIC	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of, COMDAT
; _this$ = ecx
; Line 1779
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 1785
	mov	esi, DWORD PTR __Off$[ebp]
	push	edi
	mov	edi, ecx
	mov	edx, DWORD PTR [edi+16]
	cmp	esi, edx
	jae	SHORT $LN2@find_first@3
; Line 1787
	mov	ecx, DWORD PTR [edi+20]
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN10@find_first@3
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN11@find_first@3
$LN10@find_first@3:
	mov	eax, edi
$LN11@find_first@3:
	lea	ebx, DWORD PTR [edx+eax]
; Line 1788
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN14@find_first@3
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN15@find_first@3
$LN14@find_first@3:
	mov	eax, edi
$LN15@find_first@3:
	add	esi, eax
	cmp	esi, ebx
	jae	SHORT $LN2@find_first@3
$LL4@find_first@3:
; Line 1789
	mov	eax, DWORD PTR __Count$[ebp]
	movsx	ecx, BYTE PTR [esi]
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	eax
	push	ecx
	push	edx
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@find_first@3
; Line 1788
	inc	esi
	cmp	esi, ebx
	jb	SHORT $LL4@find_first@3
$LN2@find_first@3:
	pop	edi
	pop	esi
; Line 1792
	or	eax, -1
	pop	ebx
; Line 1793
	pop	ebp
	ret	12					; 0000000cH
$LN23@find_first@3:
; Line 1790
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN20@find_first@3
	mov	edi, DWORD PTR [edi]
$LN20@find_first@3:
	mov	eax, esi
	sub	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 1793
	pop	ebp
	ret	12					; 0000000cH
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
_TEXT	ENDS
PUBLIC	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of, COMDAT
; _this$ = ecx
; Line 1797
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1799
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@find_first@4:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@find_first@4
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	push	esi
	call	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
	pop	edi
	pop	esi
; Line 1800
	pop	ebp
	ret	8
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
_TEXT	ENDS
PUBLIC	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of, COMDAT
; _this$ = ecx
; Line 1803
	push	ebp
	mov	ebp, esp
; Line 1804
	mov	eax, DWORD PTR __Off$[ebp]
	push	1
	push	eax
	lea	edx, DWORD PTR __Ch$[ebp]
	push	edx
	call	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
; Line 1805
	pop	ebp
	ret	8
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
_TEXT	ENDS
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx
; Line 1815
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, ecx
; Line 1821
	mov	edx, DWORD PTR [eax+16]
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], eax
	test	edx, edx
	je	SHORT $LN24@find_last_@3
; Line 1824
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, edx
	jae	SHORT $LN10@find_last_@3
	mov	edx, ecx
	jmp	SHORT $LN11@find_last_@3
$LN10@find_last_@3:
	dec	edx
$LN11@find_last_@3:
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN14@find_last_@3
	mov	eax, DWORD PTR [eax]
$LN14@find_last_@3:
; Line 1826
	mov	edi, DWORD PTR __Count$[ebp]
	mov	ebx, DWORD PTR __Ptr$[ebp]
	lea	esi, DWORD PTR [eax+edx]
	movsx	eax, BYTE PTR [esi]
	push	edi
	push	eax
	push	ebx
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN23@find_last_@3
$LL6@find_last_@3:
; Line 1828
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	cmp	esi, eax
	je	SHORT $LN24@find_last_@3
; Line 1825
	movsx	ecx, BYTE PTR [esi-1]
	dec	esi
; Line 1826
	push	edi
	push	ecx
	push	ebx
	call	DWORD PTR __imp__memchr
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LL6@find_last_@3
$LN23@find_last_@3:
; Line 1827
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN20@find_last_@3
	mov	ecx, DWORD PTR [ecx]
$LN20@find_last_@3:
	pop	edi
	mov	eax, esi
	pop	esi
	sub	eax, ecx
	pop	ebx
; Line 1832
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN24@find_last_@3:
	pop	edi
	pop	esi
; Line 1831
	or	eax, -1
	pop	ebx
; Line 1832
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
_TEXT	ENDS
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx
; Line 1836
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1838
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@find_last_@4:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@find_last_@4
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	push	esi
	call	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
	pop	edi
	pop	esi
; Line 1839
	pop	ebp
	ret	8
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
_TEXT	ENDS
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx
; Line 1842
	push	ebp
	mov	ebp, esp
; Line 1843
	mov	eax, DWORD PTR __Off$[ebp]
	push	1
	push	eax
	lea	edx, DWORD PTR __Ch$[ebp]
	push	edx
	call	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Line 1844
	pop	ebp
	ret	8
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx
; Line 1887
	push	ebp
	mov	ebp, esp
; Line 1893
	mov	eax, DWORD PTR [ecx+16]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Off$[ebp]
	cmp	eax, edi
	jae	SHORT $LN2@compare@2
; Line 1894
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN2@compare@2:
; Line 1895
	mov	esi, DWORD PTR __N0$[ebp]
	sub	eax, edi
	cmp	eax, esi
	jae	SHORT $LN1@compare@2
; Line 1896
	mov	esi, eax
$LN1@compare@2:
; Line 1899
	mov	ebx, DWORD PTR __Count$[ebp]
	mov	edx, esi
	cmp	esi, ebx
	jb	SHORT $LN6@compare@2
	mov	edx, ebx
$LN6@compare@2:
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN16@compare@2
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN17@compare@2
$LN16@compare@2:
	mov	eax, ecx
$LN17@compare@2:
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	edx
	push	ecx
	add	eax, edi
	push	eax
	call	?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare
	add	esp, 12					; 0000000cH
; Line 1901
	test	eax, eax
	jne	SHORT $LN8@compare@2
	cmp	esi, ebx
	jae	SHORT $LN7@compare@2
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 1902
	pop	ebp
	ret	16					; 00000010H
$LN7@compare@2:
; Line 1901
	xor	eax, eax
	cmp	esi, ebx
	setne	al
$LN8@compare@2:
	pop	edi
	pop	esi
	pop	ebx
; Line 1902
	pop	ebp
	ret	16					; 00000010H
$LN18@compare@2:
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
; Function compile flags: /Ogtp
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$ = ecx
; Line 1905
	push	ebp
	mov	ebp, esp
; Line 1906
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1907
	pop	ebp
	ret	4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Function compile flags: /Ogtp
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx
; Line 1910
	push	ebp
	mov	ebp, esp
; Line 1911
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, 1
	jne	SHORT $LN2@Chassign
; Line 1912
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@Chassign
	mov	ecx, DWORD PTR [ecx]
$LN7@Chassign:
	mov	al, BYTE PTR __Ch$[ebp]
	mov	edx, DWORD PTR __Off$[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 1915
	pop	ebp
	ret	12					; 0000000cH
$LN2@Chassign:
; Line 1914
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN13@Chassign
	mov	ecx, DWORD PTR [ecx]
$LN13@Chassign:
	add	ecx, DWORD PTR __Off$[ebp]
	push	eax
	movsx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1915
	pop	ebp
	ret	12					; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogtp
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx
; Line 1952
	push	ebp
	mov	ebp, esp
; Line 1953
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+16], eax
	jb	SHORT $LN5@Eos
	mov	ecx, DWORD PTR [ecx]
$LN5@Eos:
	mov	BYTE PTR [ecx+eax], 0
; Line 1954
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogtp
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx
; Line 1972
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1973
	mov	esi, DWORD PTR __Ptr$[ebp]
	test	esi, esi
	je	SHORT $LN2@Inside
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN8@Inside
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN9@Inside
$LN8@Inside:
	mov	eax, ecx
$LN9@Inside:
	cmp	esi, eax
	jb	SHORT $LN2@Inside
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN12@Inside
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN13@Inside
$LN12@Inside:
	mov	eax, ecx
$LN13@Inside:
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	cmp	ecx, esi
	jbe	SHORT $LN2@Inside
; Line 1976
	mov	al, 1
	pop	esi
; Line 1977
	pop	ebp
	ret	4
$LN2@Inside:
; Line 1974
	xor	al, al
	pop	esi
; Line 1977
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx
; Line 1987
	push	ebp
	mov	ebp, esp
; Line 1988
	cmp	BYTE PTR __Built$[ebp], 0
	push	esi
	push	edi
	mov	edi, DWORD PTR __Newsize$[ebp]
	mov	esi, ecx
	je	SHORT $LN9@Tidy
; Line 1990
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN9@Tidy
; Line 1992
	push	ebx
	mov	ebx, DWORD PTR [esi]
; Line 1993
	test	edi, edi
	je	SHORT $LN7@Tidy
; Line 1994
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@Tidy:
; Line 1995
	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	ebx
$LN9@Tidy:
; Line 1998
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	BYTE PTR [edi+esi], 0
	pop	edi
	pop	esi
; Line 1999
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z PROC ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 454
	mov	eax, ecx
; Line 455
	ret	4
??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
$T366242 = -12						; size = 12
$T366240 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate
	cmp	ecx, -1
	ja	SHORT $LN3@allocate
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate
$LN3@allocate:
	lea	eax, DWORD PTR $T366240[ebp]
	push	eax
	lea	ecx, DWORD PTR $T366242[ebp]
	mov	DWORD PTR $T366240[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T366242[ebp]
	push	ecx
	mov	DWORD PTR $T366242[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN1@allocate:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate:
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::max_size
; Function compile flags: /Ogtp
;	COMDAT ?max_size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::max_size, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 884
	mov	eax, 1073741823				; 3fffffffH
; Line 885
	ret	0
?max_size@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QBEIXZ ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@1@@Z ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@1@@Z PROC ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >, COMDAT
; _this$ = ecx
; Line 426
	mov	eax, ecx
; Line 427
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
; Line 428
	mov	DWORD PTR [eax+4], ecx
; Line 429
	mov	DWORD PTR [eax+8], ecx
; Line 430
	ret	4
??0?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@1@@Z ENDP ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z ; std::allocator<osg::ref_ptr<vtMaterial> >::allocate
; Function compile flags: /Ogtp
;	COMDAT ?allocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z
_TEXT	SEGMENT
$T366284 = -12						; size = 12
$T366276 = 8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z PROC ; std::allocator<osg::ref_ptr<vtMaterial> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 186
	push	ebp
	mov	ebp, esp
; Line 187
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	esp, 12					; 0000000cH
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $LN1@allocate@2
	cmp	ecx, 1073741823				; 3fffffffH
	ja	SHORT $LN3@allocate@2
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@allocate@2
$LN3@allocate@2:
	lea	ecx, DWORD PTR $T366276[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T366284[ebp]
	mov	DWORD PTR $T366276[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T366284[ebp]
	push	edx
	mov	DWORD PTR $T366284[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN1@allocate@2:
; Line 188
	mov	esp, ebp
	pop	ebp
	ret	4
$LN12@allocate@2:
?allocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z ENDP ; std::allocator<osg::ref_ptr<vtMaterial> >::allocate
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogtp
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 201
	push	ebp
	mov	ebp, esp
; Line 203
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[ebp]
	sub	eax, DWORD PTR [ecx]
; Line 204
	pop	ebp
	ret	4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==
; Function compile flags: /Ogtp
;	COMDAT ??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==, COMDAT
; _this$ = ecx
; Line 212
	push	ebp
	mov	ebp, esp
; Line 214
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	al
; Line 215
	pop	ebp
	ret	4
??8?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator==
_TEXT	ENDS
PUBLIC	??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator!=
; Function compile flags: /Ogtp
;	COMDAT ??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator!=, COMDAT
; _this$ = ecx
; Line 218
	push	ebp
	mov	ebp, esp
; Line 219
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	al
; Line 220
	pop	ebp
	ret	4
??9?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
; Line 1249
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1250
	pop	ebp
	ret	4
??0?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??0?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
; Line 1249
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1250
	pop	ebp
	ret	4
??0?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
PUBLIC	??Z?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-=
; Function compile flags: /Ogtp
;	COMDAT ??Z?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 190
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 191
	mov	ecx, DWORD PTR __Off$[ebp]
	sub	DWORD PTR [eax], ecx
; Line 192
	pop	ebp
	ret	4
??Z?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-=
_TEXT	ENDS
PUBLIC	??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx
; Line 378
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 379
	mov	ecx, DWORD PTR __Off$[ebp]
	add	DWORD PTR [eax], ecx
; Line 381
	pop	ebp
	ret	4
??Y?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??Z?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-=
; Function compile flags: /Ogtp
;	COMDAT ??Z?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Z?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-=, COMDAT
; _this$ = ecx
; Line 390
	push	ebp
	mov	ebp, esp
	mov	eax, ecx
; Line 391
	mov	ecx, DWORD PTR __Off$[ebp]
	sub	DWORD PTR [eax], ecx
; Line 392
	pop	ebp
	ret	4
??Z?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-=
_TEXT	ENDS
PUBLIC	??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@	; vtArray<vtMaterialDescriptor *>::`vftable'
PUBLIC	??0?$vtArray@PAVvtMaterialDescriptor@@@@QAE@I@Z	; vtArray<vtMaterialDescriptor *>::vtArray<vtMaterialDescriptor *>
PUBLIC	??_R4?$vtArray@PAVvtMaterialDescriptor@@@@6B@	; vtArray<vtMaterialDescriptor *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$vtArray@PAVvtMaterialDescriptor@@@@@8	; vtArray<vtMaterialDescriptor *> `RTTI Type Descriptor'
PUBLIC	??_R3?$vtArray@PAVvtMaterialDescriptor@@@@8	; vtArray<vtMaterialDescriptor *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$vtArray@PAVvtMaterialDescriptor@@@@8	; vtArray<vtMaterialDescriptor *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$vtArray@PAVvtMaterialDescriptor@@@@8 ; vtArray<vtMaterialDescriptor *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?DestructItems@?$vtArray@PAVvtMaterialDescriptor@@@@MAEXII@Z ; vtArray<vtMaterialDescriptor *>::DestructItems
EXTRN	??_E?$vtArray@PAVvtMaterialDescriptor@@@@UAEPAXI@Z:PROC ; vtArray<vtMaterialDescriptor *>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$vtArray@PAVvtMaterialDescriptor@@@@8
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\array.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$vtArray@PAVvtMaterialDescriptor@@@@8 DD FLAT:??_R0?AV?$vtArray@PAVvtMaterialDescriptor@@@@@8 ; vtArray<vtMaterialDescriptor *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$vtArray@PAVvtMaterialDescriptor@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$vtArray@PAVvtMaterialDescriptor@@@@8
rdata$r	SEGMENT
??_R2?$vtArray@PAVvtMaterialDescriptor@@@@8 DD FLAT:??_R1A@?0A@EA@?$vtArray@PAVvtMaterialDescriptor@@@@8 ; vtArray<vtMaterialDescriptor *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$vtArray@PAVvtMaterialDescriptor@@@@8
rdata$r	SEGMENT
??_R3?$vtArray@PAVvtMaterialDescriptor@@@@8 DD 00H	; vtArray<vtMaterialDescriptor *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$vtArray@PAVvtMaterialDescriptor@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$vtArray@PAVvtMaterialDescriptor@@@@@8
_DATA	SEGMENT
??_R0?AV?$vtArray@PAVvtMaterialDescriptor@@@@@8 DD FLAT:??_7type_info@@6B@ ; vtArray<vtMaterialDescriptor *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$vtArray@PAVvtMaterialDescriptor@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$vtArray@PAVvtMaterialDescriptor@@@@6B@
rdata$r	SEGMENT
??_R4?$vtArray@PAVvtMaterialDescriptor@@@@6B@ DD 00H	; vtArray<vtMaterialDescriptor *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$vtArray@PAVvtMaterialDescriptor@@@@@8
	DD	FLAT:??_R3?$vtArray@PAVvtMaterialDescriptor@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@
CONST	SEGMENT
??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@ DD FLAT:??_R4?$vtArray@PAVvtMaterialDescriptor@@@@6B@ ; vtArray<vtMaterialDescriptor *>::`vftable'
	DD	FLAT:??_E?$vtArray@PAVvtMaterialDescriptor@@@@UAEPAXI@Z
	DD	FLAT:?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z
	DD	FLAT:?DestructItems@?$vtArray@PAVvtMaterialDescriptor@@@@MAEXII@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0?$vtArray@PAVvtMaterialDescriptor@@@@QAE@I@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
??0?$vtArray@PAVvtMaterialDescriptor@@@@QAE@I@Z PROC	; vtArray<vtMaterialDescriptor *>::vtArray<vtMaterialDescriptor *>, COMDAT
; _this$ = ecx
; Line 115
	push	ebp
	mov	ebp, esp
; Line 119
	mov	eax, DWORD PTR _size$[ebp]
	push	esi
	mov	esi, ecx
	xor	ecx, ecx
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+12], ecx
	cmp	eax, ecx
	jbe	SHORT $LN4@vtArray
; Line 120
	push	eax
	mov	ecx, esi
	call	?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z ; vtArray<vtMaterialDescriptor *>::Grow
$LN4@vtArray:
; Line 121
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$vtArray@PAVvtMaterialDescriptor@@@@QAE@I@Z ENDP	; vtArray<vtMaterialDescriptor *>::vtArray<vtMaterialDescriptor *>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DestructItems@?$vtArray@PAVvtMaterialDescriptor@@@@MAEXII@Z
_TEXT	SEGMENT
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?DestructItems@?$vtArray@PAVvtMaterialDescriptor@@@@MAEXII@Z PROC ; vtArray<vtMaterialDescriptor *>::DestructItems, COMDAT
; _this$ = ecx
; Line 177
	ret	8
?DestructItems@?$vtArray@PAVvtMaterialDescriptor@@@@MAEXII@Z ENDP ; vtArray<vtMaterialDescriptor *>::DestructItems
_TEXT	ENDS
PUBLIC	??1?$vtArray@PAVvtMaterialDescriptor@@@@UAE@XZ	; vtArray<vtMaterialDescriptor *>::~vtArray<vtMaterialDescriptor *>
; Function compile flags: /Ogtp
;	COMDAT ??1?$vtArray@PAVvtMaterialDescriptor@@@@UAE@XZ
_TEXT	SEGMENT
??1?$vtArray@PAVvtMaterialDescriptor@@@@UAE@XZ PROC	; vtArray<vtMaterialDescriptor *>::~vtArray<vtMaterialDescriptor *>, COMDAT
; _this$ = ecx
; Line 184
	push	esi
	mov	esi, ecx
; Line 186
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@
	test	eax, eax
	je	SHORT $LN3@vtArray@2
	dec	eax
	push	eax
	push	0
	call	DWORD PTR ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@+8
$LN3@vtArray@2:
; Line 187
	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	DWORD PTR [esi+4], 0
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 188
	mov	DWORD PTR [esi+12], 0
; Line 189
	mov	DWORD PTR [esi+8], 0
	pop	esi
; Line 190
	ret	0
??1?$vtArray@PAVvtMaterialDescriptor@@@@UAE@XZ ENDP	; vtArray<vtMaterialDescriptor *>::~vtArray<vtMaterialDescriptor *>
_TEXT	ENDS
PUBLIC	??_7?$vtArray@PAVvtStructure@@@@6B@		; vtArray<vtStructure *>::`vftable'
PUBLIC	??1?$vtArray@PAVvtStructure@@@@UAE@XZ		; vtArray<vtStructure *>::~vtArray<vtStructure *>
PUBLIC	??_R4?$vtArray@PAVvtStructure@@@@6B@		; vtArray<vtStructure *>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$vtArray@PAVvtStructure@@@@@8		; vtArray<vtStructure *> `RTTI Type Descriptor'
PUBLIC	??_R3?$vtArray@PAVvtStructure@@@@8		; vtArray<vtStructure *>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$vtArray@PAVvtStructure@@@@8		; vtArray<vtStructure *>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$vtArray@PAVvtStructure@@@@8	; vtArray<vtStructure *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Grow@?$vtArray@PAVvtStructure@@@@MAE_NI@Z	; vtArray<vtStructure *>::Grow
PUBLIC	?DestructItems@?$vtArray@PAVvtStructure@@@@MAEXII@Z ; vtArray<vtStructure *>::DestructItems
EXTRN	??_E?$vtArray@PAVvtStructure@@@@UAEPAXI@Z:PROC	; vtArray<vtStructure *>::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$vtArray@PAVvtStructure@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$vtArray@PAVvtStructure@@@@8 DD FLAT:??_R0?AV?$vtArray@PAVvtStructure@@@@@8 ; vtArray<vtStructure *>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$vtArray@PAVvtStructure@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$vtArray@PAVvtStructure@@@@8
rdata$r	SEGMENT
??_R2?$vtArray@PAVvtStructure@@@@8 DD FLAT:??_R1A@?0A@EA@?$vtArray@PAVvtStructure@@@@8 ; vtArray<vtStructure *>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$vtArray@PAVvtStructure@@@@8
rdata$r	SEGMENT
??_R3?$vtArray@PAVvtStructure@@@@8 DD 00H		; vtArray<vtStructure *>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$vtArray@PAVvtStructure@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$vtArray@PAVvtStructure@@@@@8
_DATA	SEGMENT
??_R0?AV?$vtArray@PAVvtStructure@@@@@8 DD FLAT:??_7type_info@@6B@ ; vtArray<vtStructure *> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$vtArray@PAVvtStructure@@@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$vtArray@PAVvtStructure@@@@6B@
rdata$r	SEGMENT
??_R4?$vtArray@PAVvtStructure@@@@6B@ DD 00H		; vtArray<vtStructure *>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$vtArray@PAVvtStructure@@@@@8
	DD	FLAT:??_R3?$vtArray@PAVvtStructure@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$vtArray@PAVvtStructure@@@@6B@
CONST	SEGMENT
??_7?$vtArray@PAVvtStructure@@@@6B@ DD FLAT:??_R4?$vtArray@PAVvtStructure@@@@6B@ ; vtArray<vtStructure *>::`vftable'
	DD	FLAT:??_E?$vtArray@PAVvtStructure@@@@UAEPAXI@Z
	DD	FLAT:?Grow@?$vtArray@PAVvtStructure@@@@MAE_NI@Z
	DD	FLAT:?DestructItems@?$vtArray@PAVvtStructure@@@@MAEXII@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1?$vtArray@PAVvtStructure@@@@UAE@XZ
_TEXT	SEGMENT
??1?$vtArray@PAVvtStructure@@@@UAE@XZ PROC		; vtArray<vtStructure *>::~vtArray<vtStructure *>, COMDAT
; _this$ = ecx
; Line 184
	push	esi
	mov	esi, ecx
; Line 186
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@PAVvtStructure@@@@6B@
	test	eax, eax
	je	SHORT $LN3@vtArray@3
	dec	eax
	push	eax
	push	0
	call	DWORD PTR ??_7?$vtArray@PAVvtStructure@@@@6B@+8
$LN3@vtArray@3:
; Line 187
	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	DWORD PTR [esi+4], 0
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 188
	mov	DWORD PTR [esi+12], 0
; Line 189
	mov	DWORD PTR [esi+8], 0
	pop	esi
; Line 190
	ret	0
??1?$vtArray@PAVvtStructure@@@@UAE@XZ ENDP		; vtArray<vtStructure *>::~vtArray<vtStructure *>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Grow@?$vtArray@PAVvtStructure@@@@MAE_NI@Z
_TEXT	SEGMENT
_growto$ = 8						; size = 4
?Grow@?$vtArray@PAVvtStructure@@@@MAE_NI@Z PROC		; vtArray<vtStructure *>::Grow, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 207
	mov	edi, DWORD PTR _growto$[ebp]
	mov	esi, ecx
	mov	eax, edi
	sub	eax, DWORD PTR [esi+8]
; Line 210
	js	SHORT $LN6@Grow@2
; Line 212
	mov	ebx, DWORD PTR [esi+12]
	test	ebx, ebx
	jne	SHORT $LN5@Grow@2
; Line 215
	lea	ecx, DWORD PTR [edi*4]
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR [esi+12], eax
; Line 216
	test	eax, eax
	jne	SHORT $LN1@Grow@2
; Line 218
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
; Line 234
	pop	ebp
	ret	4
$LN5@Grow@2:
; Line 222
	cmp	edi, 4
	jae	SHORT $LN2@Grow@2
	mov	edi, 4
$LN2@Grow@2:
; Line 224
	lea	edx, DWORD PTR [edi*4]
	push	edx
	call	DWORD PTR __imp__malloc
; Line 225
	mov	ecx, DWORD PTR [esi+4]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	ebx
	push	eax
	mov	DWORD PTR [esi+12], eax
	call	_memcpy
; Line 226
	push	ebx
	call	DWORD PTR __imp__free
	add	esp, 20					; 00000014H
; Line 227
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN1@Grow@2
; Line 229
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
; Line 234
	pop	ebp
	ret	4
$LN1@Grow@2:
; Line 231
	mov	DWORD PTR [esi+8], edi
$LN6@Grow@2:
	pop	edi
	pop	esi
; Line 233
	mov	al, 1
	pop	ebx
; Line 234
	pop	ebp
	ret	4
?Grow@?$vtArray@PAVvtStructure@@@@MAE_NI@Z ENDP		; vtArray<vtStructure *>::Grow
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DestructItems@?$vtArray@PAVvtStructure@@@@MAEXII@Z
_TEXT	SEGMENT
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?DestructItems@?$vtArray@PAVvtStructure@@@@MAEXII@Z PROC ; vtArray<vtStructure *>::DestructItems, COMDAT
; _this$ = ecx
; Line 177
	ret	8
?DestructItems@?$vtArray@PAVvtStructure@@@@MAEXII@Z ENDP ; vtArray<vtStructure *>::DestructItems
_TEXT	ENDS
PUBLIC	??_7?$vtArray@H@@6B@				; vtArray<int>::`vftable'
PUBLIC	??1?$vtArray@H@@UAE@XZ				; vtArray<int>::~vtArray<int>
PUBLIC	??_R4?$vtArray@H@@6B@				; vtArray<int>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$vtArray@H@@@8				; vtArray<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$vtArray@H@@8				; vtArray<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$vtArray@H@@8				; vtArray<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$vtArray@H@@8			; vtArray<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_E?$vtArray@H@@UAEPAXI@Z			; vtArray<int>::`vector deleting destructor'
PUBLIC	?Grow@?$vtArray@H@@MAE_NI@Z			; vtArray<int>::Grow
PUBLIC	?DestructItems@?$vtArray@H@@MAEXII@Z		; vtArray<int>::DestructItems
;	COMDAT ??_R1A@?0A@EA@?$vtArray@H@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$vtArray@H@@8 DD FLAT:??_R0?AV?$vtArray@H@@@8 ; vtArray<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$vtArray@H@@8
rdata$r	ENDS
;	COMDAT ??_R2?$vtArray@H@@8
rdata$r	SEGMENT
??_R2?$vtArray@H@@8 DD FLAT:??_R1A@?0A@EA@?$vtArray@H@@8 ; vtArray<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$vtArray@H@@8
rdata$r	SEGMENT
??_R3?$vtArray@H@@8 DD 00H				; vtArray<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$vtArray@H@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$vtArray@H@@@8
_DATA	SEGMENT
??_R0?AV?$vtArray@H@@@8 DD FLAT:??_7type_info@@6B@	; vtArray<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$vtArray@H@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$vtArray@H@@6B@
rdata$r	SEGMENT
??_R4?$vtArray@H@@6B@ DD 00H				; vtArray<int>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$vtArray@H@@@8
	DD	FLAT:??_R3?$vtArray@H@@8
rdata$r	ENDS
;	COMDAT ??_7?$vtArray@H@@6B@
CONST	SEGMENT
??_7?$vtArray@H@@6B@ DD FLAT:??_R4?$vtArray@H@@6B@	; vtArray<int>::`vftable'
	DD	FLAT:??_E?$vtArray@H@@UAEPAXI@Z
	DD	FLAT:?Grow@?$vtArray@H@@MAE_NI@Z
	DD	FLAT:?DestructItems@?$vtArray@H@@MAEXII@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??1?$vtArray@H@@UAE@XZ
_TEXT	SEGMENT
??1?$vtArray@H@@UAE@XZ PROC				; vtArray<int>::~vtArray<int>, COMDAT
; _this$ = ecx
; Line 184
	push	esi
	mov	esi, ecx
; Line 186
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@H@@6B@
	test	eax, eax
	je	SHORT $LN3@vtArray@4
	dec	eax
	push	eax
	push	0
	call	DWORD PTR ??_7?$vtArray@H@@6B@+8
$LN3@vtArray@4:
; Line 187
	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	DWORD PTR [esi+4], 0
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 188
	mov	DWORD PTR [esi+12], 0
; Line 189
	mov	DWORD PTR [esi+8], 0
	pop	esi
; Line 190
	ret	0
??1?$vtArray@H@@UAE@XZ ENDP				; vtArray<int>::~vtArray<int>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?Grow@?$vtArray@H@@MAE_NI@Z
_TEXT	SEGMENT
_growto$ = 8						; size = 4
?Grow@?$vtArray@H@@MAE_NI@Z PROC			; vtArray<int>::Grow, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
; Line 207
	mov	edi, DWORD PTR _growto$[ebp]
	mov	esi, ecx
	mov	eax, edi
	sub	eax, DWORD PTR [esi+8]
; Line 210
	js	SHORT $LN6@Grow@3
; Line 212
	mov	ebx, DWORD PTR [esi+12]
	test	ebx, ebx
	jne	SHORT $LN5@Grow@3
; Line 215
	lea	ecx, DWORD PTR [edi*4]
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR [esi+12], eax
; Line 216
	test	eax, eax
	jne	SHORT $LN1@Grow@3
; Line 218
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
; Line 234
	pop	ebp
	ret	4
$LN5@Grow@3:
; Line 222
	cmp	edi, 4
	jae	SHORT $LN2@Grow@3
	mov	edi, 4
$LN2@Grow@3:
; Line 224
	lea	edx, DWORD PTR [edi*4]
	push	edx
	call	DWORD PTR __imp__malloc
; Line 225
	mov	ecx, DWORD PTR [esi+4]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	ebx
	push	eax
	mov	DWORD PTR [esi+12], eax
	call	_memcpy
; Line 226
	push	ebx
	call	DWORD PTR __imp__free
	add	esp, 20					; 00000014H
; Line 227
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN1@Grow@3
; Line 229
	pop	edi
	pop	esi
	xor	al, al
	pop	ebx
; Line 234
	pop	ebp
	ret	4
$LN1@Grow@3:
; Line 231
	mov	DWORD PTR [esi+8], edi
$LN6@Grow@3:
	pop	edi
	pop	esi
; Line 233
	mov	al, 1
	pop	ebx
; Line 234
	pop	ebp
	ret	4
?Grow@?$vtArray@H@@MAE_NI@Z ENDP			; vtArray<int>::Grow
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DestructItems@?$vtArray@H@@MAEXII@Z
_TEXT	SEGMENT
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?DestructItems@?$vtArray@H@@MAEXII@Z PROC		; vtArray<int>::DestructItems, COMDAT
; _this$ = ecx
; Line 177
	ret	8
?DestructItems@?$vtArray@H@@MAEXII@Z ENDP		; vtArray<int>::DestructItems
_TEXT	ENDS
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
; Function compile flags: /Ogtp
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 271
	xor	al, al
; Line 272
	ret	0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
PUBLIC	??$swap@T_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@0@Z ; std::swap<std::_String_val<char,std::allocator<char> >::_Bxty>
; Function compile flags: /Ogtp
;	COMDAT ??$swap@T_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@0@Z
_TEXT	SEGMENT
__Tmp$ = -16						; size = 16
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@T_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@0@Z PROC ; std::swap<std::_String_val<char,std::allocator<char> >::_Bxty>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
; Line 101
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 102
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$[ebp+12], ecx
; Line 103
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	ebx, DWORD PTR [ecx]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebx
	mov	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebx
	mov	ebx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebx
; Line 104
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Tmp$[ebp+12]
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	pop	edi
	pop	esi
	mov	DWORD PTR [ecx+12], edx
	pop	ebx
; Line 105
	mov	esp, ebp
	pop	ebp
	ret	0
??$swap@T_Bxty@?$_String_val@DV?$allocator@D@std@@@std@@@std@@YAXAAT_Bxty@?$_String_val@DV?$allocator@D@std@@@0@0@Z ENDP ; std::swap<std::_String_val<char,std::allocator<char> >::_Bxty>
_TEXT	ENDS
PUBLIC	??$swap@I@std@@YAXAAI0@Z			; std::swap<unsigned int>
; Function compile flags: /Ogtp
;	COMDAT ??$swap@I@std@@YAXAAI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@I@std@@YAXAAI0@Z PROC				; std::swap<unsigned int>, COMDAT
; Line 101
	push	ebp
	mov	ebp, esp
; Line 103
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
; Line 104
	mov	DWORD PTR [edx], ecx
	pop	esi
; Line 105
	pop	ebp
	ret	0
??$swap@I@std@@YAXAAI0@Z ENDP				; std::swap<unsigned int>
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G?$vtArray@PAVvtMaterialDescriptor@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$vtArray@PAVvtMaterialDescriptor@@@@UAEPAXI@Z PROC	; vtArray<vtMaterialDescriptor *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@
	test	eax, eax
	je	SHORT $LN6@scalar@25
	dec	eax
	push	eax
	push	0
	call	DWORD PTR ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@+8
$LN6@scalar@25:
	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	DWORD PTR [esi+4], 0
	call	DWORD PTR __imp__free
	add	esp, 4
	test	BYTE PTR ___flags$[ebp], 1
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+8], 0
	je	SHORT $LN9@scalar@25
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@scalar@25:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_G?$vtArray@PAVvtMaterialDescriptor@@@@UAEPAXI@Z ENDP	; vtArray<vtMaterialDescriptor *>::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_G?$vtArray@PAVvtStructure@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$vtArray@PAVvtStructure@@@@UAEPAXI@Z PROC		; vtArray<vtStructure *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@PAVvtStructure@@@@6B@
	test	eax, eax
	je	SHORT $LN6@scalar@26
	dec	eax
	push	eax
	push	0
	call	DWORD PTR ??_7?$vtArray@PAVvtStructure@@@@6B@+8
$LN6@scalar@26:
	mov	eax, DWORD PTR [esi+12]
	push	eax
	mov	DWORD PTR [esi+4], 0
	call	DWORD PTR __imp__free
	add	esp, 4
	test	BYTE PTR ___flags$[ebp], 1
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+8], 0
	je	SHORT $LN9@scalar@26
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@scalar@26:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_G?$vtArray@PAVvtStructure@@@@UAEPAXI@Z ENDP		; vtArray<vtStructure *>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_G?$ref_ptr@VvtMaterial@@@osg@@QAEPAXI@Z	; osg::ref_ptr<vtMaterial>::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$ref_ptr@VvtMaterial@@@osg@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ref_ptr@VvtMaterial@@@osg@@QAEPAXI@Z PROC		; osg::ref_ptr<vtMaterial>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@scalar@27
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN4@scalar@27:
	test	BYTE PTR ___flags$[ebp], 1
	mov	DWORD PTR [esi], 0
	je	SHORT $LN10@scalar@27
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN10@scalar@27:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_G?$ref_ptr@VvtMaterial@@@osg@@QAEPAXI@Z ENDP		; osg::ref_ptr<vtMaterial>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z ; std::allocator<osg::ref_ptr<vtMaterial> >::construct
;	COMDAT xdata$x
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z$0
__ehfuncinfo$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z
_TEXT	SEGMENT
$T366420 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z PROC ; std::allocator<osg::ref_ptr<vtMaterial> >::construct, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 201
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 202
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T366420[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	test	eax, eax
	je	SHORT $LN13@construct
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN13@construct:
; Line 203
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T366420[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV34@@Z ENDP ; std::allocator<osg::ref_ptr<vtMaterial> >::construct
PUBLIC	??_7vtMaterialDescriptorArray@@6B@		; vtMaterialDescriptorArray::`vftable'
PUBLIC	??1vtMaterialDescriptorArray@@UAE@XZ		; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
PUBLIC	??_R4vtMaterialDescriptorArray@@6B@		; vtMaterialDescriptorArray::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtMaterialDescriptorArray@@@8		; vtMaterialDescriptorArray `RTTI Type Descriptor'
PUBLIC	??_R3vtMaterialDescriptorArray@@8		; vtMaterialDescriptorArray::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtMaterialDescriptorArray@@8		; vtMaterialDescriptorArray::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtMaterialDescriptorArray@@8	; vtMaterialDescriptorArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?DestructItems@vtMaterialDescriptorArray@@UAEXII@Z ; vtMaterialDescriptorArray::DestructItems
EXTRN	??_EvtMaterialDescriptorArray@@UAEPAXI@Z:PROC	; vtMaterialDescriptorArray::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@vtMaterialDescriptorArray@@8
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\array.h
rdata$r	SEGMENT
??_R1A@?0A@EA@vtMaterialDescriptorArray@@8 DD FLAT:??_R0?AVvtMaterialDescriptorArray@@@8 ; vtMaterialDescriptorArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtMaterialDescriptorArray@@8
rdata$r	ENDS
;	COMDAT ??_R2vtMaterialDescriptorArray@@8
rdata$r	SEGMENT
??_R2vtMaterialDescriptorArray@@8 DD FLAT:??_R1A@?0A@EA@vtMaterialDescriptorArray@@8 ; vtMaterialDescriptorArray::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$vtArray@PAVvtMaterialDescriptor@@@@8
rdata$r	ENDS
;	COMDAT ??_R3vtMaterialDescriptorArray@@8
rdata$r	SEGMENT
??_R3vtMaterialDescriptorArray@@8 DD 00H		; vtMaterialDescriptorArray::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2vtMaterialDescriptorArray@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtMaterialDescriptorArray@@@8
_DATA	SEGMENT
??_R0?AVvtMaterialDescriptorArray@@@8 DD FLAT:??_7type_info@@6B@ ; vtMaterialDescriptorArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtMaterialDescriptorArray@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtMaterialDescriptorArray@@6B@
rdata$r	SEGMENT
??_R4vtMaterialDescriptorArray@@6B@ DD 00H		; vtMaterialDescriptorArray::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtMaterialDescriptorArray@@@8
	DD	FLAT:??_R3vtMaterialDescriptorArray@@8
rdata$r	ENDS
;	COMDAT ??_7vtMaterialDescriptorArray@@6B@
CONST	SEGMENT
??_7vtMaterialDescriptorArray@@6B@ DD FLAT:??_R4vtMaterialDescriptorArray@@6B@ ; vtMaterialDescriptorArray::`vftable'
	DD	FLAT:??_EvtMaterialDescriptorArray@@UAEPAXI@Z
	DD	FLAT:?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z
	DD	FLAT:?DestructItems@vtMaterialDescriptorArray@@UAEXII@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1vtMaterialDescriptorArray@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1vtMaterialDescriptorArray@@UAE@XZ$0
__ehfuncinfo$??1vtMaterialDescriptorArray@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1vtMaterialDescriptorArray@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1vtMaterialDescriptorArray@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1vtMaterialDescriptorArray@@UAE@XZ PROC		; vtMaterialDescriptorArray::~vtMaterialDescriptorArray, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\structure.h
; Line 185
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1vtMaterialDescriptorArray@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	DWORD PTR [esi], OFFSET ??_7vtMaterialDescriptorArray@@6B@
	mov	eax, DWORD PTR [esi+4]
	xor	edi, edi
	mov	DWORD PTR __$EHRec$[ebp+8], edi
	cmp	eax, edi
	jbe	SHORT $LN4@vtMaterial
	dec	eax
	push	eax
	push	edi
	call	DWORD PTR ??_7vtMaterialDescriptorArray@@6B@+8
$LN4@vtMaterial:
	mov	eax, DWORD PTR [esi+12]
	mov	ebx, DWORD PTR __imp__free
	push	eax
	mov	DWORD PTR [esi+4], edi
	call	ebx
	mov	eax, DWORD PTR [esi+4]
	add	esp, 4
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@
	cmp	eax, edi
	jbe	SHORT $LN9@vtMaterial
	dec	eax
	push	eax
	push	edi
	mov	ecx, esi
	call	DWORD PTR ??_7?$vtArray@PAVvtMaterialDescriptor@@@@6B@+8
$LN9@vtMaterial:
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+4], edi
	call	ebx
	add	esp, 4
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+8], edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1vtMaterialDescriptorArray@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vtArray@PAVvtMaterialDescriptor@@@@UAE@XZ ; vtArray<vtMaterialDescriptor *>::~vtArray<vtMaterialDescriptor *>
__ehhandler$??1vtMaterialDescriptorArray@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1vtMaterialDescriptorArray@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1vtMaterialDescriptorArray@@UAE@XZ ENDP		; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
PUBLIC	??_GvtMaterialDescriptor@@QAEPAXI@Z		; vtMaterialDescriptor::`scalar deleting destructor'
EXTRN	??1vtMaterialDescriptor@@QAE@XZ:PROC		; vtMaterialDescriptor::~vtMaterialDescriptor
; Function compile flags: /Ogtp
;	COMDAT ??_GvtMaterialDescriptor@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GvtMaterialDescriptor@@QAEPAXI@Z PROC		; vtMaterialDescriptor::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1vtMaterialDescriptor@@QAE@XZ		; vtMaterialDescriptor::~vtMaterialDescriptor
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@28
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@28:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GvtMaterialDescriptor@@QAEPAXI@Z ENDP		; vtMaterialDescriptor::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DestructItems@vtMaterialDescriptorArray@@UAEXII@Z
_TEXT	SEGMENT
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?DestructItems@vtMaterialDescriptorArray@@UAEXII@Z PROC	; vtMaterialDescriptorArray::DestructItems, COMDAT
; _this$ = ecx
; Line 187
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 188
	mov	esi, DWORD PTR _first$[ebp]
	mov	ebx, ecx
	cmp	esi, DWORD PTR _last$[ebp]
	ja	SHORT $LN1@DestructIt
	push	edi
$LL3@DestructIt:
; Line 189
	mov	eax, DWORD PTR [ebx+12]
	mov	edi, DWORD PTR [eax+esi*4]
	test	edi, edi
	je	SHORT $LN2@DestructIt
	mov	ecx, edi
	call	??1vtMaterialDescriptor@@QAE@XZ		; vtMaterialDescriptor::~vtMaterialDescriptor
	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@DestructIt:
; Line 188
	inc	esi
	cmp	esi, DWORD PTR _last$[ebp]
	jbe	SHORT $LL3@DestructIt
	pop	edi
$LN1@DestructIt:
	pop	esi
	pop	ebx
; Line 190
	pop	ebp
	ret	8
?DestructItems@vtMaterialDescriptorArray@@UAEXII@Z ENDP	; vtMaterialDescriptorArray::DestructItems
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GvtMaterialDescriptorArray@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GvtMaterialDescriptorArray@@UAEPAXI@Z PROC		; vtMaterialDescriptorArray::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@29
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@29:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GvtMaterialDescriptorArray@@UAEPAXI@Z ENDP		; vtMaterialDescriptorArray::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??BCPLString@@QBEPBDXZ				; CPLString::operator char const *
; Function compile flags: /Ogtp
;	COMDAT ??BCPLString@@QBEPBDXZ
_TEXT	SEGMENT
??BCPLString@@QBEPBDXZ PROC				; CPLString::operator char const *, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\cpl_string.h
; Line 232
	mov	eax, ecx
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jb	SHORT $LN8@operator@8
	mov	eax, DWORD PTR [eax]
$LN8@operator@8:
	ret	0
??BCPLString@@QBEPBDXZ ENDP				; CPLString::operator char const *
_TEXT	ENDS
PUBLIC	??ACPLString@@QAEAADI@Z				; CPLString::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??ACPLString@@QAEAADI@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??ACPLString@@QAEAADI@Z PROC				; CPLString::operator[], COMDAT
; _this$ = ecx
; Line 235
	push	ebp
	mov	ebp, esp
; Line 236
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@operator@9
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx
; Line 237
	pop	ebp
	ret	4
; Line 236
$LN7@operator@9:
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx]
; Line 237
	pop	ebp
	ret	4
??ACPLString@@QAEAADI@Z ENDP				; CPLString::operator[]
_TEXT	ENDS
PUBLIC	??ACPLString@@QBEABDI@Z				; CPLString::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??ACPLString@@QBEABDI@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??ACPLString@@QBEABDI@Z PROC				; CPLString::operator[], COMDAT
; _this$ = ecx
; Line 240
	push	ebp
	mov	ebp, esp
; Line 241
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@operator@10
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx
; Line 242
	pop	ebp
	ret	4
; Line 241
$LN7@operator@10:
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx]
; Line 242
	pop	ebp
	ret	4
??ACPLString@@QBEABDI@Z ENDP				; CPLString::operator[]
_TEXT	ENDS
PUBLIC	??ACPLString@@QAEAADH@Z				; CPLString::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??ACPLString@@QAEAADH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??ACPLString@@QAEAADH@Z PROC				; CPLString::operator[], COMDAT
; _this$ = ecx
; Line 245
	push	ebp
	mov	ebp, esp
; Line 246
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@operator@11
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx
; Line 247
	pop	ebp
	ret	4
; Line 246
$LN7@operator@11:
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx]
; Line 247
	pop	ebp
	ret	4
??ACPLString@@QAEAADH@Z ENDP				; CPLString::operator[]
_TEXT	ENDS
PUBLIC	??ACPLString@@QBEABDH@Z				; CPLString::operator[]
; Function compile flags: /Ogtp
;	COMDAT ??ACPLString@@QBEABDH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??ACPLString@@QBEABDH@Z PROC				; CPLString::operator[], COMDAT
; _this$ = ecx
; Line 250
	push	ebp
	mov	ebp, esp
; Line 251
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@operator@12
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, ecx
; Line 252
	pop	ebp
	ret	4
; Line 251
$LN7@operator@12:
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [ecx+edx]
; Line 252
	pop	ebp
	ret	4
??ACPLString@@QBEABDH@Z ENDP				; CPLString::operator[]
_TEXT	ENDS
PUBLIC	??_F?$_String_val@DV?$allocator@D@std@@@std@@QAEXXZ ; std::_String_val<char,std::allocator<char> >::`default constructor closure'
; Function compile flags: /Ogtp
;	COMDAT ??_F?$_String_val@DV?$allocator@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??_F?$_String_val@DV?$allocator@D@std@@@std@@QAEXXZ PROC ; std::_String_val<char,std::allocator<char> >::`default constructor closure', COMDAT
; _this$ = ecx
	ret	0
??_F?$_String_val@DV?$allocator@D@std@@@std@@QAEXXZ ENDP ; std::_String_val<char,std::allocator<char> >::`default constructor closure'
_TEXT	ENDS
PUBLIC	??_7vtStructureArray@@6B@			; vtStructureArray::`vftable'
PUBLIC	??1vtStructureArray@@UAE@XZ			; vtStructureArray::~vtStructureArray
PUBLIC	??_R4vtStructureArray@@6B@			; vtStructureArray::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtStructureArray@@@8			; vtStructureArray `RTTI Type Descriptor'
PUBLIC	??_R3vtStructureArray@@8			; vtStructureArray::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtStructureArray@@8			; vtStructureArray::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtStructureArray@@8		; vtStructureArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?DestroyStructure@vtStructureArray@@UAEXH@Z	; vtStructureArray::DestroyStructure
EXTRN	??1vtProjection@@UAE@XZ:PROC			; vtProjection::~vtProjection
EXTRN	??_EvtStructureArray@@UAEPAXI@Z:PROC		; vtStructureArray::`vector deleting destructor'
EXTRN	?DestructItems@vtStructureArray@@UAEXII@Z:PROC	; vtStructureArray::DestructItems
EXTRN	?NewBuilding@vtStructureArray@@UAEPAVvtBuilding@@XZ:PROC ; vtStructureArray::NewBuilding
EXTRN	?NewFence@vtStructureArray@@UAEPAVvtFence@@XZ:PROC ; vtStructureArray::NewFence
EXTRN	?NewInstance@vtStructureArray@@UAEPAVvtStructInstance@@XZ:PROC ; vtStructureArray::NewInstance
;	COMDAT ??_R1A@?0A@EA@vtStructureArray@@8
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\array.h
rdata$r	SEGMENT
??_R1A@?0A@EA@vtStructureArray@@8 DD FLAT:??_R0?AVvtStructureArray@@@8 ; vtStructureArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtStructureArray@@8
rdata$r	ENDS
;	COMDAT ??_R2vtStructureArray@@8
rdata$r	SEGMENT
??_R2vtStructureArray@@8 DD FLAT:??_R1A@?0A@EA@vtStructureArray@@8 ; vtStructureArray::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$vtArray@PAVvtStructure@@@@8
rdata$r	ENDS
;	COMDAT ??_R3vtStructureArray@@8
rdata$r	SEGMENT
??_R3vtStructureArray@@8 DD 00H				; vtStructureArray::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2vtStructureArray@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtStructureArray@@@8
_DATA	SEGMENT
??_R0?AVvtStructureArray@@@8 DD FLAT:??_7type_info@@6B@	; vtStructureArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtStructureArray@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtStructureArray@@6B@
rdata$r	SEGMENT
??_R4vtStructureArray@@6B@ DD 00H			; vtStructureArray::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtStructureArray@@@8
	DD	FLAT:??_R3vtStructureArray@@8
rdata$r	ENDS
;	COMDAT ??_7vtStructureArray@@6B@
CONST	SEGMENT
??_7vtStructureArray@@6B@ DD FLAT:??_R4vtStructureArray@@6B@ ; vtStructureArray::`vftable'
	DD	FLAT:??_EvtStructureArray@@UAEPAXI@Z
	DD	FLAT:?Grow@?$vtArray@PAVvtStructure@@@@MAE_NI@Z
	DD	FLAT:?DestructItems@vtStructureArray@@UAEXII@Z
	DD	FLAT:?DestroyStructure@vtStructureArray@@UAEXH@Z
	DD	FLAT:?NewBuilding@vtStructureArray@@UAEPAVvtBuilding@@XZ
	DD	FLAT:?NewFence@vtStructureArray@@UAEPAVvtFence@@XZ
	DD	FLAT:?NewInstance@vtStructureArray@@UAEPAVvtStructInstance@@XZ
	DD	FLAT:?SetEditedEdge@vtStructureArray@@UAEXPAVvtBuilding@@HH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1vtStructureArray@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1vtStructureArray@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1vtStructureArray@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1vtStructureArray@@UAE@XZ$2
__ehfuncinfo$??1vtStructureArray@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1vtStructureArray@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1vtStructureArray@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1vtStructureArray@@UAE@XZ PROC			; vtStructureArray::~vtStructureArray, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\structarray.h
; Line 74
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1vtStructureArray@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	DWORD PTR [esi], OFFSET ??_7vtStructureArray@@6B@
	mov	eax, DWORD PTR [esi+4]
	xor	ebx, ebx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	eax, ebx
	jbe	SHORT $LN6@vtStructur@3
	dec	eax
	push	eax
	push	ebx
	call	DWORD PTR ??_7vtStructureArray@@6B@+8
$LN6@vtStructur@3:
	mov	eax, DWORD PTR [esi+12]
	mov	edi, DWORD PTR __imp__free
	push	eax
	mov	DWORD PTR [esi+4], ebx
	call	edi
	add	esp, 4
	lea	ecx, DWORD PTR [esi+72]
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	??1vtString@@QAE@XZ			; vtString::~vtString
	lea	ecx, DWORD PTR [esi+16]
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	call	??1vtProjection@@UAE@XZ			; vtProjection::~vtProjection
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@PAVvtStructure@@@@6B@
	cmp	eax, ebx
	jbe	SHORT $LN11@vtStructur@3
	dec	eax
	push	eax
	push	ebx
	mov	ecx, esi
	call	DWORD PTR ??_7?$vtArray@PAVvtStructure@@@@6B@+8
$LN11@vtStructur@3:
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+4], ebx
	call	edi
	add	esp, 4
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1vtStructureArray@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vtArray@PAVvtStructure@@@@UAE@XZ	; vtArray<vtStructure *>::~vtArray<vtStructure *>
__unwindfunclet$??1vtStructureArray@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1vtProjection@@UAE@XZ			; vtProjection::~vtProjection
__unwindfunclet$??1vtStructureArray@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__ehhandler$??1vtStructureArray@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1vtStructureArray@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1vtStructureArray@@UAE@XZ ENDP			; vtStructureArray::~vtStructureArray
; Function compile flags: /Ogtp
;	COMDAT ?DestroyStructure@vtStructureArray@@UAEXH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?DestroyStructure@vtStructureArray@@UAEXH@Z PROC	; vtStructureArray::DestroyStructure, COMDAT
; _this$ = ecx
; Line 83
	ret	4
?DestroyStructure@vtStructureArray@@UAEXH@Z ENDP	; vtStructureArray::DestroyStructure
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GvtStructureArray@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GvtStructureArray@@UAEPAXI@Z PROC			; vtStructureArray::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1vtStructureArray@@UAE@XZ		; vtStructureArray::~vtStructureArray
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN4@scalar@30
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@30:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GvtStructureArray@@UAEPAXI@Z ENDP			; vtStructureArray::`scalar deleting destructor'
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_E?$vtArray@H@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_E?$vtArray@H@@UAEPAXI@Z PROC				; vtArray<int>::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ebx
	mov	bl, BYTE PTR ___flags$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector@24
	mov	eax, DWORD PTR [esi-4]
	push	OFFSET ??1?$vtArray@H@@UAE@XZ		; vtArray<int>::~vtArray<int>
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	16					; 00000010H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector@24
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector@24:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
$LN3@vector@24:
	mov	eax, DWORD PTR [esi+4]
	xor	edi, edi
	mov	DWORD PTR [esi], OFFSET ??_7?$vtArray@H@@6B@
	cmp	eax, edi
	jbe	SHORT $LN8@vector@24
	dec	eax
	push	eax
	push	edi
	call	DWORD PTR ??_7?$vtArray@H@@6B@+8
$LN8@vector@24:
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	mov	DWORD PTR [esi+4], edi
	call	DWORD PTR __imp__free
	add	esp, 4
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+8], edi
	test	bl, 1
	je	SHORT $LN1@vector@24
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector@24:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??_E?$vtArray@H@@UAEPAXI@Z ENDP				; vtArray<int>::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1vtMaterialDescriptorArray3d@@UAE@XZ		; vtMaterialDescriptorArray3d::~vtMaterialDescriptorArray3d
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1vtMaterialDescriptorArray3d@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1vtMaterialDescriptorArray3d@@UAE@XZ$0
__ehfuncinfo$??1vtMaterialDescriptorArray3d@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1vtMaterialDescriptorArray3d@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1vtMaterialDescriptorArray3d@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1vtMaterialDescriptorArray3d@@UAE@XZ PROC		; vtMaterialDescriptorArray3d::~vtMaterialDescriptorArray3d, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1vtMaterialDescriptorArray3d@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	ecx, ecx
	je	SHORT $LN5@vtMaterial@2
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN5@vtMaterial@2:
	mov	ecx, esi
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1vtMaterialDescriptorArray3d@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
__ehhandler$??1vtMaterialDescriptorArray3d@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1vtMaterialDescriptorArray3d@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1vtMaterialDescriptorArray3d@@UAE@XZ ENDP		; vtMaterialDescriptorArray3d::~vtMaterialDescriptorArray3d
PUBLIC	??_7vtStructInstance3d@@6BvtStructure3d@@@	; vtStructInstance3d::`vftable'
PUBLIC	??_7vtStructInstance3d@@6BvtStructInstance@@@	; vtStructInstance3d::`vftable'
PUBLIC	??0vtStructInstance3d@@QAE@XZ			; vtStructInstance3d::vtStructInstance3d
PUBLIC	??_R4vtStructInstance3d@@6BvtStructInstance@@@	; vtStructInstance3d::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtStructInstance3d@@@8			; vtStructInstance3d `RTTI Type Descriptor'
PUBLIC	??_R3vtStructInstance3d@@8			; vtStructInstance3d::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtStructInstance3d@@8			; vtStructInstance3d::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtStructInstance3d@@8		; vtStructInstance3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@vtStructInstance@@8		; vtStructInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVvtStructInstance@@@8			; vtStructInstance `RTTI Type Descriptor'
PUBLIC	??_R3vtStructInstance@@8			; vtStructInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtStructInstance@@8			; vtStructInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtStructure@@8			; vtStructure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVvtStructure@@@8				; vtStructure `RTTI Type Descriptor'
PUBLIC	??_R3vtStructure@@8				; vtStructure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtStructure@@8				; vtStructure::`RTTI Base Class Array'
PUBLIC	??_R1BE@?0A@EA@Selectable@@8			; Selectable::`RTTI Base Class Descriptor at (20,-1,0,64)'
PUBLIC	??_R0?AVSelectable@@@8				; Selectable `RTTI Type Descriptor'
PUBLIC	??_R3Selectable@@8				; Selectable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Selectable@@8				; Selectable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Selectable@@8			; Selectable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@vtTagArray@@8			; vtTagArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVvtTagArray@@@8				; vtTagArray `RTTI Type Descriptor'
PUBLIC	??_R3vtTagArray@@8				; vtTagArray::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtTagArray@@8				; vtTagArray::`RTTI Base Class Array'
PUBLIC	??_R1EI@?0A@EA@vtStructure3d@@8			; vtStructure3d::`RTTI Base Class Descriptor at (72,-1,0,64)'
PUBLIC	?OverrideValue@vtTagArray@@UAE_NPBDABVvtString@@@Z ; vtTagArray::OverrideValue
PUBLIC	?WriteOverridesToXML@vtTagArray@@UBEXPAU_iobuf@@@Z ; vtTagArray::WriteOverridesToXML
PUBLIC	??_R4vtStructInstance3d@@6BvtStructure3d@@@	; vtStructInstance3d::`RTTI Complete Object Locator'
PUBLIC	?GetContained@vtStructInstance3d@@UAEPAVNode@osg@@XZ ; vtStructInstance3d::GetContained
EXTRN	??0vtStructInstance@@QAE@XZ:PROC		; vtStructInstance::vtStructInstance
EXTRN	??_EvtStructInstance3d@@UAEPAXI@Z:PROC		; vtStructInstance3d::`vector deleting destructor'
EXTRN	?GetExtents@vtStructInstance@@UBE_NAAVDRECT@@@Z:PROC ; vtStructInstance::GetExtents
EXTRN	?IsContainedBy@vtStructInstance@@UBE_NABVDRECT@@@Z:PROC ; vtStructInstance::IsContainedBy
EXTRN	?WriteXML@vtStructInstance@@UBEXAAVGZOutput@@_N@Z:PROC ; vtStructInstance::WriteXML
;	COMDAT ??_R4vtStructInstance3d@@6BvtStructure3d@@@
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
rdata$r	SEGMENT
??_R4vtStructInstance3d@@6BvtStructure3d@@@ DD 00H	; vtStructInstance3d::`RTTI Complete Object Locator'
	DD	048H
	DD	00H
	DD	FLAT:??_R0?AVvtStructInstance3d@@@8
	DD	FLAT:??_R3vtStructInstance3d@@8
rdata$r	ENDS
;	COMDAT ??_R1EI@?0A@EA@vtStructure3d@@8
rdata$r	SEGMENT
??_R1EI@?0A@EA@vtStructure3d@@8 DD FLAT:??_R0?AVvtStructure3d@@@8 ; vtStructure3d::`RTTI Base Class Descriptor at (72,-1,0,64)'
	DD	00H
	DD	048H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtStructure3d@@8
rdata$r	ENDS
;	COMDAT ??_R2vtTagArray@@8
rdata$r	SEGMENT
??_R2vtTagArray@@8 DD FLAT:??_R1A@?0A@EA@vtTagArray@@8	; vtTagArray::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3vtTagArray@@8
rdata$r	SEGMENT
??_R3vtTagArray@@8 DD 00H				; vtTagArray::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2vtTagArray@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtTagArray@@@8
_DATA	SEGMENT
??_R0?AVvtTagArray@@@8 DD FLAT:??_7type_info@@6B@	; vtTagArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtTagArray@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@vtTagArray@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vtTagArray@@8 DD FLAT:??_R0?AVvtTagArray@@@8 ; vtTagArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtTagArray@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Selectable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Selectable@@8 DD FLAT:??_R0?AVSelectable@@@8 ; Selectable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Selectable@@8
rdata$r	ENDS
;	COMDAT ??_R2Selectable@@8
rdata$r	SEGMENT
??_R2Selectable@@8 DD FLAT:??_R1A@?0A@EA@Selectable@@8	; Selectable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Selectable@@8
rdata$r	SEGMENT
??_R3Selectable@@8 DD 00H				; Selectable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Selectable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSelectable@@@8
_DATA	SEGMENT
??_R0?AVSelectable@@@8 DD FLAT:??_7type_info@@6B@	; Selectable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSelectable@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BE@?0A@EA@Selectable@@8
rdata$r	SEGMENT
??_R1BE@?0A@EA@Selectable@@8 DD FLAT:??_R0?AVSelectable@@@8 ; Selectable::`RTTI Base Class Descriptor at (20,-1,0,64)'
	DD	00H
	DD	014H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Selectable@@8
rdata$r	ENDS
;	COMDAT ??_R2vtStructure@@8
rdata$r	SEGMENT
??_R2vtStructure@@8 DD FLAT:??_R1A@?0A@EA@vtStructure@@8 ; vtStructure::`RTTI Base Class Array'
	DD	FLAT:??_R1BE@?0A@EA@Selectable@@8
	DD	FLAT:??_R1A@?0A@EA@vtTagArray@@8
rdata$r	ENDS
;	COMDAT ??_R3vtStructure@@8
rdata$r	SEGMENT
??_R3vtStructure@@8 DD 00H				; vtStructure::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2vtStructure@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtStructure@@@8
_DATA	SEGMENT
??_R0?AVvtStructure@@@8 DD FLAT:??_7type_info@@6B@	; vtStructure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtStructure@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@vtStructure@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vtStructure@@8 DD FLAT:??_R0?AVvtStructure@@@8 ; vtStructure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtStructure@@8
rdata$r	ENDS
;	COMDAT ??_R2vtStructInstance@@8
rdata$r	SEGMENT
??_R2vtStructInstance@@8 DD FLAT:??_R1A@?0A@EA@vtStructInstance@@8 ; vtStructInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@vtStructure@@8
	DD	FLAT:??_R1BE@?0A@EA@Selectable@@8
	DD	FLAT:??_R1A@?0A@EA@vtTagArray@@8
rdata$r	ENDS
;	COMDAT ??_R3vtStructInstance@@8
rdata$r	SEGMENT
??_R3vtStructInstance@@8 DD 00H				; vtStructInstance::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2vtStructInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtStructInstance@@@8
_DATA	SEGMENT
??_R0?AVvtStructInstance@@@8 DD FLAT:??_7type_info@@6B@	; vtStructInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtStructInstance@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@vtStructInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vtStructInstance@@8 DD FLAT:??_R0?AVvtStructInstance@@@8 ; vtStructInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtStructInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vtStructInstance3d@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vtStructInstance3d@@8 DD FLAT:??_R0?AVvtStructInstance3d@@@8 ; vtStructInstance3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtStructInstance3d@@8
rdata$r	ENDS
;	COMDAT ??_R2vtStructInstance3d@@8
rdata$r	SEGMENT
??_R2vtStructInstance3d@@8 DD FLAT:??_R1A@?0A@EA@vtStructInstance3d@@8 ; vtStructInstance3d::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@vtStructInstance@@8
	DD	FLAT:??_R1A@?0A@EA@vtStructure@@8
	DD	FLAT:??_R1BE@?0A@EA@Selectable@@8
	DD	FLAT:??_R1A@?0A@EA@vtTagArray@@8
	DD	FLAT:??_R1EI@?0A@EA@vtStructure3d@@8
rdata$r	ENDS
;	COMDAT ??_R3vtStructInstance3d@@8
rdata$r	SEGMENT
??_R3vtStructInstance3d@@8 DD 00H			; vtStructInstance3d::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2vtStructInstance3d@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtStructInstance3d@@@8
_DATA	SEGMENT
??_R0?AVvtStructInstance3d@@@8 DD FLAT:??_7type_info@@6B@ ; vtStructInstance3d `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtStructInstance3d@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtStructInstance3d@@6BvtStructInstance@@@
rdata$r	SEGMENT
??_R4vtStructInstance3d@@6BvtStructInstance@@@ DD 00H	; vtStructInstance3d::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtStructInstance3d@@@8
	DD	FLAT:??_R3vtStructInstance3d@@8
rdata$r	ENDS
;	COMDAT ??_7vtStructInstance3d@@6BvtStructure3d@@@
CONST	SEGMENT
??_7vtStructInstance3d@@6BvtStructure3d@@@ DD FLAT:??_R4vtStructInstance3d@@6BvtStructure3d@@@ ; vtStructInstance3d::`vftable'
	DD	FLAT:?GetContained@vtStructInstance3d@@UAEPAVNode@osg@@XZ
	DD	FLAT:?CreateNode@vtStructInstance3d@@UAE_NPAVvtTerrain@@@Z
	DD	FLAT:?IsCreated@vtStructInstance3d@@UAE_NXZ
	DD	FLAT:?GetGeom@vtStructure3d@@UAEPAVvtGeode@@XZ
	DD	FLAT:?DeleteNode@vtStructInstance3d@@UAEXXZ
	DD	FLAT:?ShowBounds@vtStructInstance3d@@UAEX_N@Z
CONST	ENDS
;	COMDAT ??_7vtStructInstance3d@@6BvtStructInstance@@@
CONST	SEGMENT
??_7vtStructInstance3d@@6BvtStructInstance@@@ DD FLAT:??_R4vtStructInstance3d@@6BvtStructInstance@@@ ; vtStructInstance3d::`vftable'
	DD	FLAT:??_EvtStructInstance3d@@UAEPAXI@Z
	DD	FLAT:?OverrideValue@vtTagArray@@UAE_NPBDABVvtString@@@Z
	DD	FLAT:?WriteOverridesToXML@vtTagArray@@UBEXPAU_iobuf@@@Z
	DD	FLAT:?GetExtents@vtStructInstance@@UBE_NAAVDRECT@@@Z
	DD	FLAT:?IsContainedBy@vtStructInstance@@UBE_NABVDRECT@@@Z
	DD	FLAT:?WriteXML@vtStructInstance@@UBEXAAVGZOutput@@_N@Z
	DD	FLAT:?DistanceToPoint@vtStructInstance3d@@UBENABVDPoint2@@M@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0vtStructInstance3d@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$2
__ehfuncinfo$??0vtStructInstance3d@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0vtStructInstance3d@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0vtStructInstance3d@@QAE@XZ
_TEXT	SEGMENT
$T366669 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0vtStructInstance3d@@QAE@XZ PROC			; vtStructInstance3d::vtStructInstance3d, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 39
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0vtStructInstance3d@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	call	??0vtStructInstance@@QAE@XZ		; vtStructInstance::vtStructInstance
	lea	edi, DWORD PTR [esi+72]
	xor	ebx, ebx
	mov	DWORD PTR [edi], OFFSET ??_7vtStructure3d@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	DWORD PTR $T366669[ebp], edi
	mov	DWORD PTR [edi+4], ebx
	mov	ecx, ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	ecx, ebx
	je	SHORT $LN11@vtStructIn
	mov	DWORD PTR [edi+4], ebx
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN11@vtStructIn:
	mov	WORD PTR [edi+8], bx
	mov	DWORD PTR [esi], OFFSET ??_7vtStructInstance3d@@6BvtStructInstance@@@
	mov	DWORD PTR [esi+72], OFFSET ??_7vtStructInstance3d@@6BvtStructure3d@@@
	mov	DWORD PTR [esi+88], ebx
; Line 40
	mov	ecx, DWORD PTR [esi+76]
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	ecx, ebx
	je	SHORT $LN23@vtStructIn
	mov	DWORD PTR [esi+76], ebx
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN23@vtStructIn:
; Line 41
	mov	DWORD PTR [esi+84], ebx
; Line 42
	mov	ecx, DWORD PTR [esi+88]
	cmp	ecx, ebx
	je	SHORT $LN44@vtStructIn
	mov	DWORD PTR [esi+88], ebx
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN44@vtStructIn:
; Line 43
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1vtStructInstance@@UAE@XZ
__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$3:
	mov	ecx, DWORD PTR $T366669[ebp]
	add	ecx, 4
	jmp	??1?$ref_ptr@VvtTransform@@@osg@@QAE@XZ	; osg::ref_ptr<vtTransform>::~ref_ptr<vtTransform>
__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1vtStructure3d@@QAE@XZ
__unwindfunclet$??0vtStructInstance3d@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	jmp	??1?$ref_ptr@VNode@osg@@@osg@@QAE@XZ	; osg::ref_ptr<osg::Node>::~ref_ptr<osg::Node>
__ehhandler$??0vtStructInstance3d@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0vtStructInstance3d@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0vtStructInstance3d@@QAE@XZ ENDP			; vtStructInstance3d::vtStructInstance3d
; Function compile flags: /Ogtp
;	COMDAT ?OverrideValue@vtTagArray@@UAE_NPBDABVvtString@@@Z
_TEXT	SEGMENT
_szTagName$ = 8						; size = 4
_string$ = 12						; size = 4
?OverrideValue@vtTagArray@@UAE_NPBDABVvtString@@@Z PROC	; vtTagArray::OverrideValue, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\content.h
; Line 123
	xor	al, al
; Line 124
	ret	8
?OverrideValue@vtTagArray@@UAE_NPBDABVvtString@@@Z ENDP	; vtTagArray::OverrideValue
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?WriteOverridesToXML@vtTagArray@@UBEXPAU_iobuf@@@Z
_TEXT	SEGMENT
_fp$ = 8						; size = 4
?WriteOverridesToXML@vtTagArray@@UBEXPAU_iobuf@@@Z PROC	; vtTagArray::WriteOverridesToXML, COMDAT
; _this$ = ecx
; Line 125
	ret	4
?WriteOverridesToXML@vtTagArray@@UBEXPAU_iobuf@@@Z ENDP	; vtTagArray::WriteOverridesToXML
_TEXT	ENDS
PUBLIC	?get@?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@2@XZ	; osg::ref_ptr<osg::Node>::get
; Function compile flags: /Ogtp
;	COMDAT ?get@?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@2@XZ
_TEXT	SEGMENT
?get@?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@2@XZ PROC	; osg::ref_ptr<osg::Node>::get, COMDAT
; _this$ = ecx
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\ref_ptr
; Line 92
	mov	eax, DWORD PTR [ecx]
	ret	0
?get@?$ref_ptr@VNode@osg@@@osg@@QBEPAVNode@2@XZ ENDP	; osg::ref_ptr<osg::Node>::get
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?GetContained@vtStructInstance3d@@UAEPAVNode@osg@@XZ
_TEXT	SEGMENT
?GetContained@vtStructInstance3d@@UAEPAVNode@osg@@XZ PROC ; vtStructInstance3d::GetContained, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.h
; Line 156
	mov	eax, DWORD PTR [ecx+16]
	ret	0
?GetContained@vtStructInstance3d@@UAEPAVNode@osg@@XZ ENDP ; vtStructInstance3d::GetContained
_TEXT	ENDS
PUBLIC	??1vtStructInstance3d@@UAE@XZ			; vtStructInstance3d::~vtStructInstance3d
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1vtStructInstance3d@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1vtStructInstance3d@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1vtStructInstance3d@@UAE@XZ$1
__ehfuncinfo$??1vtStructInstance3d@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1vtStructInstance3d@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1vtStructInstance3d@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1vtStructInstance3d@@UAE@XZ PROC			; vtStructInstance3d::~vtStructInstance3d, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1vtStructInstance3d@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	ecx, DWORD PTR [esi+88]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	test	ecx, ecx
	je	SHORT $LN6@vtStructIn@2
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN6@vtStructIn@2:
	mov	DWORD PTR [esi+88], 0
	mov	ecx, DWORD PTR [esi+76]
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	test	ecx, ecx
	je	SHORT $LN15@vtStructIn@2
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN15@vtStructIn@2:
	mov	ecx, esi
	mov	DWORD PTR [esi+76], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtStructure@@UAE@XZ			; vtStructure::~vtStructure
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1vtStructInstance3d@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1vtStructInstance@@UAE@XZ
__unwindfunclet$??1vtStructInstance3d@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1vtStructure3d@@QAE@XZ
__ehhandler$??1vtStructInstance3d@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1vtStructInstance3d@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1vtStructInstance3d@@UAE@XZ ENDP			; vtStructInstance3d::~vtStructInstance3d
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GvtStructInstance3d@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GvtStructInstance3d@@UAEPAXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??_GvtStructInstance3d@@UAEPAXI@Z$1
__ehfuncinfo$??_GvtStructInstance3d@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GvtStructInstance3d@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_GvtStructInstance3d@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GvtStructInstance3d@@UAEPAXI@Z PROC			; vtStructInstance3d::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_GvtStructInstance3d@@UAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	ecx, DWORD PTR [esi+88]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	test	ecx, ecx
	je	SHORT $LN9@scalar@31
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN9@scalar@31:
	mov	DWORD PTR [esi+88], 0
	mov	ecx, DWORD PTR [esi+76]
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	test	ecx, ecx
	je	SHORT $LN18@scalar@31
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN18@scalar@31:
	mov	ecx, esi
	mov	DWORD PTR [esi+76], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtStructure@@UAE@XZ			; vtStructure::~vtStructure
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN27@scalar@31
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN27@scalar@31:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GvtStructInstance3d@@UAEPAXI@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1vtStructInstance@@UAE@XZ
__unwindfunclet$??_GvtStructInstance3d@@UAEPAXI@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1vtStructure3d@@QAE@XZ
__ehhandler$??_GvtStructInstance3d@@UAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_GvtStructInstance3d@@UAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_GvtStructInstance3d@@UAEPAXI@Z ENDP			; vtStructInstance3d::`scalar deleting destructor'
PUBLIC	??_7vtStructureArray3d@@6BvtEnabledBase@@@	; vtStructureArray3d::`vftable'
PUBLIC	??_7vtStructureArray3d@@6BvtStructureArray@@@	; vtStructureArray3d::`vftable'
PUBLIC	??0vtStructureArray3d@@QAE@XZ			; vtStructureArray3d::vtStructureArray3d
PUBLIC	??_R4vtStructureArray3d@@6BvtStructureArray@@@	; vtStructureArray3d::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtStructureArray3d@@@8			; vtStructureArray3d `RTTI Type Descriptor'
PUBLIC	??_R3vtStructureArray3d@@8			; vtStructureArray3d::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtStructureArray3d@@8			; vtStructureArray3d::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtStructureArray3d@@8		; vtStructureArray3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1GA@?0A@EA@vtEnabledBase@@8			; vtEnabledBase::`RTTI Base Class Descriptor at (96,-1,0,64)'
PUBLIC	?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ ; vtStructureArray3d::NewInstance
PUBLIC	??_R4vtStructureArray3d@@6BvtEnabledBase@@@	; vtStructureArray3d::`RTTI Complete Object Locator'
EXTRN	??0vtStructureArray@@QAE@XZ:PROC		; vtStructureArray::vtStructureArray
EXTRN	??_EvtStructureArray3d@@UAEPAXI@Z:PROC		; vtStructureArray3d::`vector deleting destructor'
;	COMDAT ??_R4vtStructureArray3d@@6BvtEnabledBase@@@
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\engine.h
rdata$r	SEGMENT
??_R4vtStructureArray3d@@6BvtEnabledBase@@@ DD 00H	; vtStructureArray3d::`RTTI Complete Object Locator'
	DD	060H
	DD	00H
	DD	FLAT:??_R0?AVvtStructureArray3d@@@8
	DD	FLAT:??_R3vtStructureArray3d@@8
rdata$r	ENDS
;	COMDAT ??_R1GA@?0A@EA@vtEnabledBase@@8
rdata$r	SEGMENT
??_R1GA@?0A@EA@vtEnabledBase@@8 DD FLAT:??_R0?AVvtEnabledBase@@@8 ; vtEnabledBase::`RTTI Base Class Descriptor at (96,-1,0,64)'
	DD	00H
	DD	060H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtEnabledBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vtStructureArray3d@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vtStructureArray3d@@8 DD FLAT:??_R0?AVvtStructureArray3d@@@8 ; vtStructureArray3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtStructureArray3d@@8
rdata$r	ENDS
;	COMDAT ??_R2vtStructureArray3d@@8
rdata$r	SEGMENT
??_R2vtStructureArray3d@@8 DD FLAT:??_R1A@?0A@EA@vtStructureArray3d@@8 ; vtStructureArray3d::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@vtStructureArray@@8
	DD	FLAT:??_R1A@?0A@EA@?$vtArray@PAVvtStructure@@@@8
	DD	FLAT:??_R1GA@?0A@EA@vtEnabledBase@@8
rdata$r	ENDS
;	COMDAT ??_R3vtStructureArray3d@@8
rdata$r	SEGMENT
??_R3vtStructureArray3d@@8 DD 00H			; vtStructureArray3d::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2vtStructureArray3d@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtStructureArray3d@@@8
_DATA	SEGMENT
??_R0?AVvtStructureArray3d@@@8 DD FLAT:??_7type_info@@6B@ ; vtStructureArray3d `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtStructureArray3d@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtStructureArray3d@@6BvtStructureArray@@@
rdata$r	SEGMENT
??_R4vtStructureArray3d@@6BvtStructureArray@@@ DD 00H	; vtStructureArray3d::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtStructureArray3d@@@8
	DD	FLAT:??_R3vtStructureArray3d@@8
rdata$r	ENDS
;	COMDAT ??_7vtStructureArray3d@@6BvtEnabledBase@@@
CONST	SEGMENT
??_7vtStructureArray3d@@6BvtEnabledBase@@@ DD FLAT:??_R4vtStructureArray3d@@6BvtEnabledBase@@@ ; vtStructureArray3d::`vftable'
	DD	FLAT:?SetEnabled@vtStructureArray3d@@UAEX_N@Z
CONST	ENDS
;	COMDAT ??_7vtStructureArray3d@@6BvtStructureArray@@@
CONST	SEGMENT
??_7vtStructureArray3d@@6BvtStructureArray@@@ DD FLAT:??_R4vtStructureArray3d@@6BvtStructureArray@@@ ; vtStructureArray3d::`vftable'
	DD	FLAT:??_EvtStructureArray3d@@UAEPAXI@Z
	DD	FLAT:?Grow@?$vtArray@PAVvtStructure@@@@MAE_NI@Z
	DD	FLAT:?DestructItems@vtStructureArray@@UAEXII@Z
	DD	FLAT:?DestroyStructure@vtStructureArray3d@@UAEXH@Z
	DD	FLAT:?NewBuilding@vtStructureArray3d@@UAEPAVvtBuilding@@XZ
	DD	FLAT:?NewFence@vtStructureArray3d@@UAEPAVvtFence@@XZ
	DD	FLAT:?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ
	DD	FLAT:?SetEditedEdge@vtStructureArray3d@@UAEXPAVvtBuilding@@HH@Z
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ??0vtStructureArray3d@@QAE@XZ
_TEXT	SEGMENT
??0vtStructureArray3d@@QAE@XZ PROC			; vtStructureArray3d::vtStructureArray3d, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 265
	push	esi
	mov	esi, ecx
	call	??0vtStructureArray@@QAE@XZ		; vtStructureArray::vtStructureArray
	mov	DWORD PTR [esi+96], OFFSET ??_7vtEnabledBase@@6B@
	mov	BYTE PTR [esi+100], 1
	mov	DWORD PTR [esi], OFFSET ??_7vtStructureArray3d@@6BvtStructureArray@@@
	mov	DWORD PTR [esi+96], OFFSET ??_7vtStructureArray3d@@6BvtEnabledBase@@@
; Line 266
	mov	DWORD PTR [esi+104], 0
; Line 267
	mov	eax, esi
	pop	esi
	ret	0
??0vtStructureArray3d@@QAE@XZ ENDP			; vtStructureArray3d::vtStructureArray3d
_TEXT	ENDS
PUBLIC	??1vtStructureArray3d@@UAE@XZ			; vtStructureArray3d::~vtStructureArray3d
; Function compile flags: /Ogtp
;	COMDAT ??1vtStructureArray3d@@UAE@XZ
_TEXT	SEGMENT
??1vtStructureArray3d@@UAE@XZ PROC			; vtStructureArray3d::~vtStructureArray3d, COMDAT
; _this$ = ecx
	jmp	??1vtStructureArray@@UAE@XZ		; vtStructureArray::~vtStructureArray
??1vtStructureArray3d@@UAE@XZ ENDP			; vtStructureArray3d::~vtStructureArray3d
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ$0
__ehfuncinfo$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ
_TEXT	SEGMENT
$T366819 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ PROC ; vtStructureArray3d::NewInstance, COMDAT
; _this$ = ecx
; Line 280
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 281
	push	96					; 00000060H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T366819[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN3@NewInstanc
	mov	ecx, eax
	call	??0vtStructInstance3d@@QAE@XZ		; vtStructInstance3d::vtStructInstance3d
; Line 282
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@NewInstanc:
; Line 281
	xor	eax, eax
; Line 282
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ$0:
	mov	eax, DWORD PTR $T366819[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewInstance@vtStructureArray3d@@UAEPAVvtStructInstance@@XZ ENDP ; vtStructureArray3d::NewInstance
PUBLIC	??0vtMaterialDescriptorArray@@QAE@XZ		; vtMaterialDescriptorArray::vtMaterialDescriptorArray
; Function compile flags: /Ogtp
;	COMDAT ??0vtMaterialDescriptorArray@@QAE@XZ
_TEXT	SEGMENT
??0vtMaterialDescriptorArray@@QAE@XZ PROC		; vtMaterialDescriptorArray::vtMaterialDescriptorArray, COMDAT
; _this$ = ecx
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax], OFFSET ??_7vtMaterialDescriptorArray@@6B@
	ret	0
??0vtMaterialDescriptorArray@@QAE@XZ ENDP		; vtMaterialDescriptorArray::vtMaterialDescriptorArray
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 550
	mov	eax, ecx
; Line 551
	mov	DWORD PTR [eax+20], 15			; 0000000fH
	mov	DWORD PTR [eax+16], 0
	mov	BYTE PTR [eax], 0
; Line 552
	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 556
	mov	eax, ecx
; Line 557
	mov	DWORD PTR [eax+20], 15			; 0000000fH
	mov	DWORD PTR [eax+16], 0
	mov	BYTE PTR [eax], 0
; Line 558
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 752
	push	esi
	mov	esi, ecx
; Line 753
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN11@basic_stri
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN11@basic_stri:
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	pop	esi
; Line 754
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; Line 1108
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 1109
	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR __Off$[ebp]
	push	edi
	cmp	eax, ecx
	jae	SHORT $LN3@erase
; Line 1110
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN3@erase:
; Line 1111
	mov	edi, DWORD PTR __Count$[ebp]
	sub	eax, ecx
	cmp	eax, edi
	jae	SHORT $LN2@erase
; Line 1112
	mov	edi, eax
$LN2@erase:
; Line 1113
	test	edi, edi
	je	SHORT $LN25@erase
; Line 1116
	mov	edx, DWORD PTR [esi+20]
	push	ebx
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN11@erase
	mov	ebx, DWORD PTR [esi]
	jmp	SHORT $LN12@erase
$LN11@erase:
	mov	ebx, esi
$LN12@erase:
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN15@erase
	mov	edx, DWORD PTR [esi]
	jmp	SHORT $LN16@erase
$LN15@erase:
	mov	edx, esi
$LN16@erase:
	sub	eax, edi
	add	ebx, ecx
	push	eax
	add	ebx, edi
	add	edx, ecx
	push	ebx
	push	edx
	call	DWORD PTR __imp__memmove
; Line 1117
	mov	eax, DWORD PTR [esi+16]
	add	esp, 12					; 0000000cH
	sub	eax, edi
; Line 1118
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], eax
	pop	ebx
	jb	SHORT $LN23@erase
	mov	ecx, DWORD PTR [esi]
	mov	BYTE PTR [ecx+eax], 0
	pop	edi
; Line 1120
	mov	eax, esi
	pop	esi
; Line 1121
	pop	ebp
	ret	8
; Line 1118
$LN23@erase:
	mov	ecx, esi
	mov	BYTE PTR [ecx+eax], 0
$LN25@erase:
; Line 1120
	pop	edi
	mov	eax, esi
	pop	esi
; Line 1121
	pop	ebp
	ret	8
$LN27@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
; Function compile flags: /Ogtp
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx
; Line 1139
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	DWORD PTR [ecx+16], 0
	jb	SHORT $LN7@clear
	mov	ecx, DWORD PTR [ecx]
$LN7@clear:
	mov	BYTE PTR [ecx], 0
; Line 1140
	ret	0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
PUBLIC	?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin
; Function compile flags: /Ogtp
;	COMDAT ?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin, COMDAT
; _this$ = ecx
; Line 1370
	push	ebp
	mov	ebp, esp
; Line 1371
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@rbegin
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1372
	pop	ebp
	ret	4
; Line 1371
$LN7@rbegin:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1372
	pop	ebp
	ret	4
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin
_TEXT	ENDS
PUBLIC	?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin
; Function compile flags: /Ogtp
;	COMDAT ?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin, COMDAT
; _this$ = ecx
; Line 1375
	push	ebp
	mov	ebp, esp
; Line 1376
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@rbegin@2
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1377
	pop	ebp
	ret	4
; Line 1376
$LN7@rbegin@2:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1377
	pop	ebp
	ret	4
?rbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rbegin
_TEXT	ENDS
PUBLIC	?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend
; Function compile flags: /Ogtp
;	COMDAT ?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend, COMDAT
; _this$ = ecx
; Line 1380
	push	ebp
	mov	ebp, esp
; Line 1381
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jb	SHORT $LN7@rend
	mov	ecx, DWORD PTR [ecx]
$LN7@rend:
	mov	DWORD PTR [eax], ecx
; Line 1382
	pop	ebp
	ret	4
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$reverse_iterator@V?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend
_TEXT	ENDS
PUBLIC	?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend
; Function compile flags: /Ogtp
;	COMDAT ?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend, COMDAT
; _this$ = ecx
; Line 1385
	push	ebp
	mov	ebp, esp
; Line 1386
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jb	SHORT $LN7@rend@2
	mov	ecx, DWORD PTR [ecx]
$LN7@rend@2:
	mov	DWORD PTR [eax], ecx
; Line 1387
	pop	ebp
	ret	4
?rend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rend
_TEXT	ENDS
PUBLIC	?crbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::crbegin
; Function compile flags: /Ogtp
;	COMDAT ?crbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?crbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::crbegin, COMDAT
; _this$ = ecx
; Line 1401
	push	ebp
	mov	ebp, esp
; Line 1402
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN9@crbegin
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1403
	pop	ebp
	ret	4
; Line 1402
$LN9@crbegin:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1403
	pop	ebp
	ret	4
?crbegin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::crbegin
_TEXT	ENDS
PUBLIC	?crend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::crend
; Function compile flags: /Ogtp
;	COMDAT ?crend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?crend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::crend, COMDAT
; _this$ = ecx
; Line 1406
	push	ebp
	mov	ebp, esp
; Line 1407
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jb	SHORT $LN9@crend
	mov	ecx, DWORD PTR [ecx]
$LN9@crend:
	mov	DWORD PTR [eax], ecx
; Line 1408
	pop	ebp
	ret	4
?crend@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$reverse_iterator@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::crend
_TEXT	ENDS
PUBLIC	?pop_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::pop_back
; Function compile flags: /Ogtp
;	COMDAT ?pop_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::pop_back, COMDAT
; _this$ = ecx
; Line 1470
	mov	eax, DWORD PTR [ecx+16]
	push	-1
	dec	eax
	push	eax
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Line 1471
	ret	0
?pop_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::pop_back
_TEXT	ENDS
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Function compile flags: /Ogtp
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx
; Line 1611
	push	ebp
	mov	ebp, esp
; Line 1612
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	edx, DWORD PTR [eax+16]
	jb	SHORT $LN7@find@3
	mov	eax, DWORD PTR [eax]
$LN7@find@3:
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	push	eax
	call	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
; Line 1613
	pop	ebp
	ret	8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Function compile flags: /Ogtp
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx
; Line 1652
	push	ebp
	mov	ebp, esp
; Line 1653
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	edx, DWORD PTR [eax+16]
	jb	SHORT $LN7@rfind@3
	mov	eax, DWORD PTR [eax]
$LN7@rfind@3:
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	push	eax
	call	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
; Line 1654
	pop	ebp
	ret	8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
PUBLIC	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of, COMDAT
; _this$ = ecx
; Line 1696
	push	ebp
	mov	ebp, esp
; Line 1697
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	edx, DWORD PTR [eax+16]
	jb	SHORT $LN7@find_first@5
	mov	eax, DWORD PTR [eax]
$LN7@find_first@5:
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	push	eax
	call	?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
; Line 1698
	pop	ebp
	ret	8
?find_first_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_of
_TEXT	ENDS
PUBLIC	?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of, COMDAT
; _this$ = ecx
; Line 1732
	push	ebp
	mov	ebp, esp
; Line 1733
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	edx, DWORD PTR [eax+16]
	jb	SHORT $LN7@find_last_@5
	mov	eax, DWORD PTR [eax]
$LN7@find_last_@5:
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	push	eax
	call	?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
; Line 1734
	pop	ebp
	ret	8
?find_last_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_of
_TEXT	ENDS
PUBLIC	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of, COMDAT
; _this$ = ecx
; Line 1772
	push	ebp
	mov	ebp, esp
; Line 1774
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	edx, DWORD PTR [eax+16]
	jb	SHORT $LN7@find_first@6
	mov	eax, DWORD PTR [eax]
$LN7@find_first@6:
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	push	eax
	call	?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
; Line 1775
	pop	ebp
	ret	8
?find_first_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_first_not_of
_TEXT	ENDS
PUBLIC	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Function compile flags: /Ogtp
;	COMDAT ?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Off$ = 12						; size = 4
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of, COMDAT
; _this$ = ecx
; Line 1809
	push	ebp
	mov	ebp, esp
; Line 1810
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	edx, DWORD PTR [eax+16]
	jb	SHORT $LN7@find_last_@6
	mov	eax, DWORD PTR [eax]
$LN7@find_last_@6:
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	push	eax
	call	?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIPBDII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
; Line 1811
	pop	ebp
	ret	8
?find_last_not_of@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find_last_not_of
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx
; Line 1852
	push	ebp
	mov	ebp, esp
; Line 1853
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	edx, DWORD PTR [eax+16]
	jb	SHORT $LN7@compare@3
	mov	eax, DWORD PTR [eax]
$LN7@compare@3:
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+16]
	push	eax
	push	0
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Line 1854
	pop	ebp
	ret	4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Right$ = 16						; size = 4
__Roff$ = 20						; size = 4
__Count$ = 24						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx
; Line 1865
	push	ebp
	mov	ebp, esp
; Line 1866
	mov	edx, DWORD PTR __Roff$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edi+16]
	cmp	eax, edx
	jae	SHORT $LN2@compare@4
; Line 1867
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN2@compare@4:
; Line 1868
	mov	esi, DWORD PTR __Count$[ebp]
	sub	eax, edx
	cmp	eax, esi
	jae	SHORT $LN1@compare@4
; Line 1869
	mov	esi, eax
$LN1@compare@4:
; Line 1870
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN12@compare@4
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN13@compare@4
$LN12@compare@4:
	mov	eax, edi
$LN13@compare@4:
	push	esi
	add	eax, edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	eax
	mov	eax, DWORD PTR __N0$[ebp]
	push	eax
	push	edx
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
	pop	edi
	pop	esi
; Line 1871
	pop	ebp
	ret	20					; 00000014H
$LN14@compare@4:
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx
; Line 1874
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1876
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@compare@5:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@compare@5
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR [ecx+16]
	push	esi
	push	eax
	push	0
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
	pop	edi
	pop	esi
; Line 1877
	pop	ebp
	ret	4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBD@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx
; Line 1880
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1882
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@compare@6:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@compare@6
	mov	edx, DWORD PTR __Off$[ebp]
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __N0$[ebp]
	push	esi
	push	eax
	push	edx
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
	pop	edi
	pop	esi
; Line 1883
	pop	ebp
	ret	12					; 0000000cH
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
$T367584 = -40						; size = 12
__Newres$ = -28						; size = 4
$T367561 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 1918
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	edi, ecx
	mov	DWORD PTR _this$[ebp], edi
; Line 1919
	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	esi, eax
	or	esi, 15					; 0000000fH
; Line 1920
	cmp	esi, -2					; fffffffeH
	jbe	SHORT $LN9@Copy
; Line 1921
	mov	esi, eax
	jmp	SHORT $LN39@Copy
$LN9@Copy:
; Line 1922
	mov	ebx, DWORD PTR [edi+20]
	mov	eax, -1431655765			; aaaaaaabH
	mul	esi
	mov	ecx, ebx
	shr	ecx, 1
	shr	edx, 1
	cmp	ecx, edx
	jbe	SHORT $LN39@Copy
; Line 1924
	mov	eax, -2					; fffffffeH
	sub	eax, ecx
; Line 1926
	lea	esi, DWORD PTR [ecx+ebx]
	cmp	ebx, eax
	jbe	SHORT $LN39@Copy
; Line 1928
	mov	esi, -2					; fffffffeH
$LN39@Copy:
; Line 1931
	xor	eax, eax
; Line 1932
	lea	ecx, DWORD PTR [esi+1]
	mov	DWORD PTR __$EHRec$[ebp+12], eax
	cmp	ecx, eax
	jbe	SHORT $LN47@Copy
	cmp	ecx, -1
	ja	SHORT $LN46@Copy
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN46@Copy
$LN47@Copy:
	mov	DWORD PTR __Ptr$[ebp], eax
	jmp	SHORT $LN19@Copy
$LN46@Copy:
	lea	ecx, DWORD PTR $T367561[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T367584[ebp]
	mov	DWORD PTR $T367561[ebp], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	edx, DWORD PTR $T367584[ebp]
	push	edx
	mov	DWORD PTR $T367584[ebp], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:
; Line 1934
	mov	eax, DWORD PTR __Newsize$[ebp]
; Line 1936
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	inc	eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	push	eax
	add	ecx, 24					; 00000018H
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __Ptr$[ebp], eax
; Line 1941
	mov	eax, $LN107@Copy
	ret	0
$LN107@Copy:
	mov	edi, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR __Newres$[ebp]
$LN19@Copy:
; Line 1943
	mov	ebx, DWORD PTR __Oldlen$[ebp]
	test	ebx, ebx
	je	SHORT $LN78@Copy
; Line 1944
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN76@Copy
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN77@Copy
$LN76@Copy:
	mov	eax, edi
$LN77@Copy:
	push	ebx
	push	eax
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN78@Copy:
; Line 1945
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jb	SHORT $LN88@Copy
	mov	ecx, DWORD PTR [edi]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN88@Copy:
; Line 1946
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [edi], 0
	mov	DWORD PTR [edi], eax
; Line 1947
	mov	DWORD PTR [edi+20], esi
; Line 1948
	mov	DWORD PTR [edi+16], ebx
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN102@Copy
	mov	edi, eax
$LN102@Copy:
	mov	BYTE PTR [edi+ebx], 0
; Line 1949
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:
; Line 1938
	mov	esi, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN64@Copy
	mov	edx, DWORD PTR [esi]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN64@Copy:
; Line 1939
	push	0
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	0
	mov	BYTE PTR [esi], 0
	call	__CxxThrowException@8
$LN111@Copy:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
; Function compile flags: /Ogtp
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx
; Line 1958
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1959
	mov	ebx, DWORD PTR __Newsize$[ebp]
	push	esi
	mov	esi, ecx
	cmp	ebx, -2					; fffffffeH
	jbe	SHORT $LN6@Grow@4
; Line 1960
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN6@Grow@4:
; Line 1961
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	jae	SHORT $LN5@Grow@4
; Line 1962
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	ebx
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Line 1968
	xor	ecx, ecx
	cmp	ecx, ebx
	sbb	eax, eax
	pop	esi
	neg	eax
	pop	ebx
; Line 1969
	pop	ebp
	ret	8
$LN5@Grow@4:
; Line 1963
	cmp	BYTE PTR __Trim$[ebp], 0
	je	SHORT $LN3@Grow@4
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN3@Grow@4
; Line 1965
	push	edi
	mov	edi, DWORD PTR [esi+16]
	cmp	ebx, edi
	jae	SHORT $LN9@Grow@4
	mov	edi, ebx
$LN9@Grow@4:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN30@Grow@4
	mov	ebx, DWORD PTR [esi]
	test	edi, edi
	je	SHORT $LN28@Grow@4
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN28@Grow@4:
	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	mov	ebx, DWORD PTR __Newsize$[ebp]
	add	esp, 4
$LN30@Grow@4:
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
; Line 1968
	xor	ecx, ecx
	mov	BYTE PTR [edi+esi], 0
	cmp	ecx, ebx
	pop	edi
	sbb	eax, eax
	pop	esi
	neg	eax
	pop	ebx
; Line 1969
	pop	ebp
	ret	8
$LN3@Grow@4:
; Line 1966
	test	ebx, ebx
	jne	SHORT $LN46@Grow@4
; Line 1967
	mov	DWORD PTR [esi+16], ebx
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN44@Grow@4
	mov	esi, DWORD PTR [esi]
$LN44@Grow@4:
	mov	BYTE PTR [esi], 0
$LN46@Grow@4:
; Line 1968
	xor	ecx, ecx
	cmp	ecx, ebx
	sbb	eax, eax
	pop	esi
	neg	eax
	pop	ebx
; Line 1969
	pop	ebp
	ret	8
$LN48@Grow@4:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
; Function compile flags: /Ogtp
;	COMDAT ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__P2$ = 8						; size = 4
__P1$ = 12						; size = 4
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif, COMDAT
; Line 1981
	push	ebp
	mov	ebp, esp
; Line 1982
	mov	eax, DWORD PTR __P2$[ebp]
	test	eax, eax
	jne	SHORT $LN3@Pdif
; Line 1983
	pop	ebp
	ret	0
$LN3@Pdif:
; Line 1982
	sub	eax, DWORD PTR __P1$[ebp]
; Line 1983
	pop	ebp
	ret	0
?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Pdif
_TEXT	ENDS
PUBLIC	??0?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
; Function compile flags: /Ogtp
;	COMDAT ??0?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 507
	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
; Line 508
	ret	0
??0?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
_TEXT	ENDS
PUBLIC	??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogtp
;	COMDAT ??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z PROC ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 195
	push	ebp
	mov	ebp, esp
; Line 197
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 198
	pop	ebp
	ret	8
??G?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ENDP ; std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+
; Function compile flags: /Ogtp
;	COMDAT ??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+, COMDAT
; _this$ = ecx
; Line 384
	push	ebp
	mov	ebp, esp
; Line 386
	mov	ecx, DWORD PTR [ecx]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 387
	pop	ebp
	ret	8
??H?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator+
_TEXT	ENDS
PUBLIC	??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
; Function compile flags: /Ogtp
;	COMDAT ??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-, COMDAT
; _this$ = ecx
; Line 395
	push	ebp
	mov	ebp, esp
; Line 397
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 398
	pop	ebp
	ret	8
??G?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >::operator-
_TEXT	ENDS
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN14@scalar@32
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN14@scalar@32:
	test	BYTE PTR ___flags$[ebp], 1
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	je	SHORT $LN26@scalar@32
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN26@scalar@32:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z ; std::_Cons_val<std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial>,osg::ref_ptr<vtMaterial> >
;	COMDAT xdata$x
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
xdata$x	SEGMENT
__unwindtable$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z$0
__ehfuncinfo$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z
_TEXT	SEGMENT
$T368001 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z PROC ; std::_Cons_val<std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial>,osg::ref_ptr<vtMaterial> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 279
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 280
	mov	ecx, DWORD PTR __Pdest$[ebp]
	mov	DWORD PTR $T368001[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	ecx, ecx
	je	SHORT $LN17@Cons_val
	mov	eax, DWORD PTR __Src$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	test	eax, eax
	je	SHORT $LN17@Cons_val
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN17@Cons_val:
; Line 281
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z$0:
	mov	eax, DWORD PTR __Pdest$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T368001[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Cons_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@V34@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@$$QAV23@@Z ENDP ; std::_Cons_val<std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial>,osg::ref_ptr<vtMaterial> >
PUBLIC	??$_Destroy@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z ; std::_Destroy<osg::ref_ptr<vtMaterial> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z PROC ; std::_Destroy<osg::ref_ptr<vtMaterial> >, COMDAT
; Line 62
	push	ebp
	mov	ebp, esp
	push	esi
; Line 63
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN12@Destroy
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN12@Destroy:
	mov	DWORD PTR [esi], 0
	pop	esi
; Line 64
	pop	ebp
	ret	0
??$_Destroy@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z ENDP ; std::_Destroy<osg::ref_ptr<vtMaterial> >
_TEXT	ENDS
PUBLIC	??1ObjectProperty@osgDB@@QAE@XZ			; osgDB::ObjectProperty::~ObjectProperty
; Function compile flags: /Ogtp
;	COMDAT ??1ObjectProperty@osgDB@@QAE@XZ
_TEXT	SEGMENT
??1ObjectProperty@osgDB@@QAE@XZ PROC			; osgDB::ObjectProperty::~ObjectProperty, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN14@ObjectProp
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN14@ObjectProp:
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	pop	esi
	ret	0
??1ObjectProperty@osgDB@@QAE@XZ ENDP			; osgDB::ObjectProperty::~ObjectProperty
_TEXT	ENDS
PUBLIC	??1ObjectMark@osgDB@@QAE@XZ			; osgDB::ObjectMark::~ObjectMark
; Function compile flags: /Ogtp
;	COMDAT ??1ObjectMark@osgDB@@QAE@XZ
_TEXT	SEGMENT
??1ObjectMark@osgDB@@QAE@XZ PROC			; osgDB::ObjectMark::~ObjectMark, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN14@ObjectMark
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN14@ObjectMark:
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	pop	esi
	ret	0
??1ObjectMark@osgDB@@QAE@XZ ENDP			; osgDB::ObjectMark::~ObjectMark
_TEXT	ENDS
PUBLIC	??0CPLString@@QAE@XZ				; CPLString::CPLString
; Function compile flags: /Ogtp
;	COMDAT ??0CPLString@@QAE@XZ
_TEXT	SEGMENT
??0CPLString@@QAE@XZ PROC				; CPLString::CPLString, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\cpl_string.h
; Line 228
	mov	eax, ecx
	mov	DWORD PTR [eax+20], 15			; 0000000fH
	mov	DWORD PTR [eax+16], 0
	mov	BYTE PTR [eax], 0
	ret	0
??0CPLString@@QAE@XZ ENDP				; CPLString::CPLString
_TEXT	ENDS
PUBLIC	??1CPLString@@QAE@XZ				; CPLString::~CPLString
; Function compile flags: /Ogtp
;	COMDAT ??1CPLString@@QAE@XZ
_TEXT	SEGMENT
??1CPLString@@QAE@XZ PROC				; CPLString::~CPLString, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN14@CPLString
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN14@CPLString:
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	pop	esi
	ret	0
??1CPLString@@QAE@XZ ENDP				; CPLString::~CPLString
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??_GvtStructureArray3d@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GvtStructureArray3d@@UAEPAXI@Z PROC			; vtStructureArray3d::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	call	??1vtStructureArray@@UAE@XZ		; vtStructureArray::~vtStructureArray
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN7@scalar@33
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@scalar@33:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_GvtStructureArray3d@@UAEPAXI@Z ENDP			; vtStructureArray3d::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7vtMaterialDescriptorArray3d@@6B@		; vtMaterialDescriptorArray3d::`vftable'
PUBLIC	??0vtMaterialDescriptorArray3d@@QAE@XZ		; vtMaterialDescriptorArray3d::vtMaterialDescriptorArray3d
PUBLIC	??_R4vtMaterialDescriptorArray3d@@6B@		; vtMaterialDescriptorArray3d::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtMaterialDescriptorArray3d@@@8		; vtMaterialDescriptorArray3d `RTTI Type Descriptor'
PUBLIC	??_R3vtMaterialDescriptorArray3d@@8		; vtMaterialDescriptorArray3d::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtMaterialDescriptorArray3d@@8		; vtMaterialDescriptorArray3d::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtMaterialDescriptorArray3d@@8	; vtMaterialDescriptorArray3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_EvtMaterialDescriptorArray3d@@UAEPAXI@Z:PROC	; vtMaterialDescriptorArray3d::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@vtMaterialDescriptorArray3d@@8
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
rdata$r	SEGMENT
??_R1A@?0A@EA@vtMaterialDescriptorArray3d@@8 DD FLAT:??_R0?AVvtMaterialDescriptorArray3d@@@8 ; vtMaterialDescriptorArray3d::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtMaterialDescriptorArray3d@@8
rdata$r	ENDS
;	COMDAT ??_R2vtMaterialDescriptorArray3d@@8
rdata$r	SEGMENT
??_R2vtMaterialDescriptorArray3d@@8 DD FLAT:??_R1A@?0A@EA@vtMaterialDescriptorArray3d@@8 ; vtMaterialDescriptorArray3d::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@vtMaterialDescriptorArray@@8
	DD	FLAT:??_R1A@?0A@EA@?$vtArray@PAVvtMaterialDescriptor@@@@8
rdata$r	ENDS
;	COMDAT ??_R3vtMaterialDescriptorArray3d@@8
rdata$r	SEGMENT
??_R3vtMaterialDescriptorArray3d@@8 DD 00H		; vtMaterialDescriptorArray3d::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2vtMaterialDescriptorArray3d@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtMaterialDescriptorArray3d@@@8
_DATA	SEGMENT
??_R0?AVvtMaterialDescriptorArray3d@@@8 DD FLAT:??_7type_info@@6B@ ; vtMaterialDescriptorArray3d `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtMaterialDescriptorArray3d@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtMaterialDescriptorArray3d@@6B@
rdata$r	SEGMENT
??_R4vtMaterialDescriptorArray3d@@6B@ DD 00H		; vtMaterialDescriptorArray3d::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtMaterialDescriptorArray3d@@@8
	DD	FLAT:??_R3vtMaterialDescriptorArray3d@@8
rdata$r	ENDS
;	COMDAT ??_7vtMaterialDescriptorArray3d@@6B@
CONST	SEGMENT
??_7vtMaterialDescriptorArray3d@@6B@ DD FLAT:??_R4vtMaterialDescriptorArray3d@@6B@ ; vtMaterialDescriptorArray3d::`vftable'
	DD	FLAT:??_EvtMaterialDescriptorArray3d@@UAEPAXI@Z
	DD	FLAT:?Grow@?$vtArray@PAVvtMaterialDescriptor@@@@MAE_NI@Z
	DD	FLAT:?DestructItems@vtMaterialDescriptorArray@@UAEXII@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0vtMaterialDescriptorArray3d@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0vtMaterialDescriptorArray3d@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0vtMaterialDescriptorArray3d@@QAE@XZ$1
__ehfuncinfo$??0vtMaterialDescriptorArray3d@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0vtMaterialDescriptorArray3d@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0vtMaterialDescriptorArray3d@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0vtMaterialDescriptorArray3d@@QAE@XZ PROC		; vtMaterialDescriptorArray3d::vtMaterialDescriptorArray3d, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 479
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0vtMaterialDescriptorArray3d@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	ebx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	xor	ebx, ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi], OFFSET ??_7vtMaterialDescriptorArray3d@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	DWORD PTR [esi+16], ebx
; Line 480
	mov	ecx, ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	ecx, ebx
	je	SHORT $LN31@vtMaterial@3
	mov	DWORD PTR [esi+16], ebx
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN31@vtMaterial@3:
; Line 482
	mov	eax, esi
; Line 481
	mov	BYTE PTR [esi+20], bl
; Line 482
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0vtMaterialDescriptorArray3d@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
__unwindfunclet$??0vtMaterialDescriptorArray3d@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ ; osg::ref_ptr<vtMaterialArray>::~ref_ptr<vtMaterialArray>
__ehhandler$??0vtMaterialDescriptorArray3d@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0vtMaterialDescriptorArray3d@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0vtMaterialDescriptorArray3d@@QAE@XZ ENDP		; vtMaterialDescriptorArray3d::vtMaterialDescriptorArray3d
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z$0
__ehfuncinfo$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z PROC		; vtMaterialDescriptorArray3d::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	ecx, ecx
	je	SHORT $LN8@scalar@34
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN8@scalar@34:
	mov	ecx, esi
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN14@scalar@34
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN14@scalar@34:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
__ehhandler$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_GvtMaterialDescriptorArray3d@@UAEPAXI@Z ENDP		; vtMaterialDescriptorArray3d::`scalar deleting destructor'
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 798
	push	ebp
	mov	ebp, esp
; Line 799
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Roff$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN4@append
; Line 800
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@append:
; Line 802
	mov	ebx, DWORD PTR __Count$[ebp]
	sub	eax, ecx
	cmp	eax, ebx
	jae	SHORT $LN3@append
; Line 803
	mov	ebx, eax
$LN3@append:
; Line 804
	mov	eax, DWORD PTR [esi+16]
	or	ecx, -1
	sub	ecx, eax
	cmp	ecx, ebx
	ja	SHORT $LN2@append
; Line 805
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2@append:
; Line 807
	test	ebx, ebx
	je	$LN79@append
	push	edi
	lea	edi, DWORD PTR [eax+ebx]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN21@append
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN21@append:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, edi
	jae	SHORT $LN20@append
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	edx, DWORD PTR __Right$[ebp]
	test	edi, edi
	je	SHORT $LN81@append
$LN84@append:
; Line 810
	mov	eax, 16					; 00000010H
	cmp	DWORD PTR [edx+20], eax
	jb	SHORT $LN65@append
	mov	ecx, DWORD PTR [edx]
	jmp	SHORT $LN66@append
; Line 807
$LN20@append:
	test	edi, edi
	jne	SHORT $LN84@append
	mov	DWORD PTR [esi+16], edi
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN59@append
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 813
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 814
	pop	ebp
	ret	12					; 0000000cH
; Line 807
$LN59@append:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 814
	pop	ebp
	ret	12					; 0000000cH
; Line 810
$LN65@append:
	mov	ecx, edx
$LN66@append:
	cmp	DWORD PTR [esi+20], eax
	jb	SHORT $LN69@append
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN70@append
$LN69@append:
	mov	eax, esi
$LN70@append:
	add	ecx, DWORD PTR __Roff$[ebp]
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	add	ecx, eax
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 811
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN77@append
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 813
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 814
	pop	ebp
	ret	12					; 0000000cH
; Line 811
$LN77@append:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN81@append:
	pop	edi
$LN79@append:
; Line 813
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 814
	pop	ebp
	ret	12					; 0000000cH
$LN82@append:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; Line 817
	push	ebp
	mov	ebp, esp
; Line 823
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	test	edx, edx
	je	SHORT $LN88@append@2
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN13@append@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN14@append@2
$LN13@append@2:
	mov	eax, esi
$LN14@append@2:
	cmp	edx, eax
	jb	SHORT $LN88@append@2
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN17@append@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN18@append@2
$LN17@append@2:
	mov	eax, esi
$LN18@append@2:
	mov	edi, DWORD PTR [esi+16]
	add	edi, eax
	cmp	edi, edx
	jbe	SHORT $LN88@append@2
; Line 824
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN21@append@2
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	sub	edx, eax
	push	edx
	push	esi
	mov	ecx, esi
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
	pop	edi
	pop	esi
; Line 835
	pop	ebp
	ret	8
; Line 824
$LN21@append@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	eax, esi
	push	ecx
	sub	edx, eax
	push	edx
	push	esi
	mov	ecx, esi
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
	pop	edi
	pop	esi
; Line 835
	pop	ebp
	ret	8
$LN88@append@2:
; Line 825
	mov	eax, DWORD PTR [esi+16]
	or	ecx, -1
	push	ebx
	mov	ebx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	cmp	ecx, ebx
	ja	SHORT $LN2@append@2
; Line 826
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2@append@2:
; Line 829
	test	ebx, ebx
	je	$LN85@append@2
	lea	edi, DWORD PTR [eax+ebx]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN31@append@2
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@append@2:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, edi
	jae	SHORT $LN30@append@2
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	edx, DWORD PTR __Ptr$[ebp]
	test	edi, edi
	je	SHORT $LN85@append@2
$LN91@append@2:
; Line 831
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN75@append@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN76@append@2
; Line 829
$LN30@append@2:
	test	edi, edi
	jne	SHORT $LN91@append@2
	mov	DWORD PTR [esi+16], edi
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN69@append@2
	mov	eax, DWORD PTR [esi]
	pop	ebx
	mov	BYTE PTR [eax], 0
	pop	edi
; Line 834
	mov	eax, esi
	pop	esi
; Line 835
	pop	ebp
	ret	8
; Line 829
$LN69@append@2:
	pop	ebx
	mov	eax, esi
	pop	edi
	mov	BYTE PTR [eax], 0
	pop	esi
; Line 835
	pop	ebp
	ret	8
; Line 831
$LN75@append@2:
	mov	eax, esi
$LN76@append@2:
	push	ebx
	push	edx
	mov	edx, DWORD PTR [esi+16]
	add	edx, eax
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 832
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN83@append@2
	mov	eax, DWORD PTR [esi]
	pop	ebx
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 834
	mov	eax, esi
	pop	esi
; Line 835
	pop	ebp
	ret	8
; Line 832
$LN83@append@2:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN85@append@2:
; Line 834
	pop	ebx
	pop	edi
	mov	eax, esi
	pop	esi
; Line 835
	pop	ebp
	ret	8
$LN89@append@2:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; Line 838
	push	ebp
	mov	ebp, esp
	push	esi
; Line 840
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@append@3:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@append@3
	sub	eax, edi
	push	eax
	push	esi
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
	pop	edi
	pop	esi
; Line 841
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; Line 844
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 845
	mov	ebx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+16]
	or	ecx, -1
	sub	ecx, eax
	cmp	ecx, ebx
	ja	SHORT $LN2@append@4
; Line 846
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2@append@4:
; Line 849
	test	ebx, ebx
	je	SHORT $LN61@append@4
	push	edi
	lea	edi, DWORD PTR [eax+ebx]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN13@append@4
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN13@append@4:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, edi
	jae	SHORT $LN12@append@4
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
	je	SHORT $LN63@append@4
$LN66@append@4:
; Line 851
	mov	edx, DWORD PTR __Ch$[ebp]
	mov	eax, DWORD PTR [esi+16]
	push	edx
	push	ebx
	push	eax
	mov	ecx, esi
	call	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Line 852
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN59@append@4
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 854
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 855
	pop	ebp
	ret	8
; Line 849
$LN12@append@4:
	test	edi, edi
	jne	SHORT $LN66@append@4
	mov	DWORD PTR [esi+16], edi
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN51@append@4
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 854
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 855
	pop	ebp
	ret	8
; Line 849
$LN51@append@4:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 855
	pop	ebp
	ret	8
; Line 852
$LN59@append@4:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN63@append@4:
	pop	edi
$LN61@append@4:
; Line 854
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 855
	pop	ebp
	ret	8
$LN64@append@4:
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; Line 892
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 893
	mov	ebx, DWORD PTR __Roff$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	push	edi
	mov	edi, DWORD PTR [ecx+16]
	cmp	edi, ebx
	jae	SHORT $LN5@assign
; Line 894
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN5@assign:
; Line 896
	mov	eax, DWORD PTR __Count$[ebp]
	sub	edi, ebx
	cmp	eax, edi
	jae	SHORT $LN4@assign
; Line 897
	mov	edi, eax
$LN4@assign:
; Line 899
	cmp	esi, ecx
	jne	SHORT $LN3@assign
; Line 900
	push	-1
	add	edi, ebx
	push	edi
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	push	ebx
	push	0
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi
; Line 906
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
$LN3@assign:
; Line 901
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN20@assign
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN20@assign:
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edi
	jae	SHORT $LN19@assign
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	ecx, DWORD PTR __Right$[ebp]
	test	edi, edi
	je	SHORT $LN78@assign
$LN82@assign:
; Line 903
	mov	eax, 16					; 00000010H
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN64@assign
	mov	ecx, DWORD PTR [ecx]
$LN64@assign:
	cmp	DWORD PTR [esi+20], eax
	jb	SHORT $LN68@assign
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN69@assign
; Line 901
$LN19@assign:
	test	edi, edi
	jne	SHORT $LN82@assign
	mov	DWORD PTR [esi+16], edi
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN58@assign
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 906
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
; Line 901
$LN58@assign:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
; Line 903
$LN68@assign:
	mov	eax, esi
$LN69@assign:
	push	edi
	add	ecx, ebx
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 904
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN76@assign
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 906
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
; Line 904
$LN76@assign:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN78@assign:
; Line 906
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 907
	pop	ebp
	ret	12					; 0000000cH
$LN80@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; Line 910
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 916
	mov	ebx, DWORD PTR __Ptr$[ebp]
	push	esi
	mov	esi, ecx
	test	ebx, ebx
	je	SHORT $LN85@assign@2
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN12@assign@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN13@assign@2
$LN12@assign@2:
	mov	eax, esi
$LN13@assign@2:
	cmp	ebx, eax
	jb	SHORT $LN85@assign@2
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN16@assign@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN17@assign@2
$LN16@assign@2:
	mov	eax, esi
$LN17@assign@2:
	mov	edx, DWORD PTR [esi+16]
	add	edx, eax
	cmp	edx, ebx
	jbe	SHORT $LN85@assign@2
; Line 917
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN20@assign@2
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	sub	ebx, eax
	push	ebx
	push	esi
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 917
$LN20@assign@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	eax, esi
	push	ecx
	sub	ebx, eax
	push	ebx
	push	esi
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
$LN85@assign@2:
	push	edi
; Line 919
	mov	edi, DWORD PTR __Count$[ebp]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN27@assign@2
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN27@assign@2:
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edi
	jae	SHORT $LN26@assign@2
	mov	edx, DWORD PTR [esi+16]
	push	edx
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
	je	SHORT $LN82@assign@2
$LN88@assign@2:
; Line 921
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN72@assign@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN73@assign@2
; Line 919
$LN26@assign@2:
	test	edi, edi
	jne	SHORT $LN88@assign@2
	mov	DWORD PTR [esi+16], edi
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN65@assign@2
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 924
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 919
$LN65@assign@2:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 921
$LN72@assign@2:
	mov	eax, esi
$LN73@assign@2:
	push	edi
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 922
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN80@assign@2
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 924
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
; Line 922
$LN80@assign@2:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN82@assign@2:
; Line 924
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 925
	pop	ebp
	ret	8
$LN86@assign@2:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; Line 928
	push	ebp
	mov	ebp, esp
	push	esi
; Line 930
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@assign@3:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@assign@3
	sub	eax, edi
	push	eax
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	pop	esi
; Line 931
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; Line 934
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 935
	mov	edi, DWORD PTR __Count$[ebp]
	mov	esi, ecx
	cmp	edi, -1
	jne	SHORT $LN2@assign@4
; Line 936
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2@assign@4:
; Line 938
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN13@assign@4
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN13@assign@4:
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, edi
	jae	SHORT $LN12@assign@4
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	edi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
	je	SHORT $LN77@assign@4
$LN81@assign@4:
; Line 940
	cmp	edi, 1
	jne	SHORT $LN56@assign@4
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN61@assign@4
	mov	eax, DWORD PTR [esi]
	mov	cl, BYTE PTR __Ch$[ebp]
	mov	BYTE PTR [eax], cl
	jmp	SHORT $LN69@assign@4
; Line 938
$LN12@assign@4:
	test	edi, edi
	jne	SHORT $LN81@assign@4
	mov	DWORD PTR [esi+16], edi
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN51@assign@4
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax], 0
	pop	edi
; Line 943
	mov	eax, esi
	pop	esi
; Line 944
	pop	ebp
	ret	8
; Line 938
$LN51@assign@4:
	mov	eax, esi
	pop	edi
	mov	BYTE PTR [eax], 0
	pop	esi
; Line 944
	pop	ebp
	ret	8
; Line 940
$LN61@assign@4:
	mov	cl, BYTE PTR __Ch$[ebp]
	mov	eax, esi
	mov	BYTE PTR [eax], cl
	jmp	SHORT $LN69@assign@4
$LN56@assign@4:
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN67@assign@4
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN68@assign@4
$LN67@assign@4:
	mov	eax, esi
$LN68@assign@4:
	movsx	edx, BYTE PTR __Ch$[ebp]
	push	edi
	push	edx
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN69@assign@4:
; Line 941
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN75@assign@4
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 943
	mov	eax, esi
	pop	esi
; Line 944
	pop	ebp
	ret	8
; Line 941
$LN75@assign@4:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN77@assign@4:
; Line 943
	pop	edi
	mov	eax, esi
	pop	esi
; Line 944
	pop	ebp
	ret	8
$LN79@assign@4:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
__Roff$ = 16						; size = 4
__Num$ = 20						; size = 4
__Count$ = 20						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 981
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 982
	mov	ecx, DWORD PTR [esi+16]
	push	edi
	cmp	ecx, DWORD PTR __Off$[ebp]
	jb	$LN6@insert
	mov	eax, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	edx, DWORD PTR __Roff$[ebp]
	cmp	eax, edx
	jb	$LN6@insert
; Line 985
	mov	edi, DWORD PTR __Count$[ebp]
	sub	eax, edx
	cmp	eax, edi
	jae	SHORT $LN5@insert
; Line 986
	mov	edi, eax
$LN5@insert:
; Line 987
	or	edx, -1
	sub	edx, ecx
	cmp	edx, edi
	ja	SHORT $LN4@insert
; Line 988
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@insert:
; Line 990
	test	edi, edi
	je	$LN104@insert
	push	ebx
	lea	ebx, DWORD PTR [ecx+edi]
	mov	DWORD PTR __Num$[ebp], ebx
	cmp	ebx, -2					; fffffffeH
	jbe	SHORT $LN26@insert
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN26@insert:
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	jae	SHORT $LN25@insert
	push	ecx
	push	ebx
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	ebx, ebx
	je	$LN106@insert
$LN109@insert:
; Line 993
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN70@insert
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN71@insert
; Line 990
$LN25@insert:
	test	ebx, ebx
	jne	SHORT $LN109@insert
	mov	DWORD PTR [esi+16], ebx
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN64@insert
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax], bl
	pop	ebx
	pop	edi
; Line 1003
	mov	eax, esi
	pop	esi
; Line 1004
	pop	ebp
	ret	16					; 00000010H
; Line 990
$LN64@insert:
	pop	ebx
	mov	eax, esi
	pop	edi
	mov	BYTE PTR [eax], 0
	pop	esi
; Line 1004
	pop	ebp
	ret	16					; 00000010H
; Line 993
$LN70@insert:
	mov	ecx, esi
$LN71@insert:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN74@insert
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN75@insert
$LN74@insert:
	mov	eax, esi
$LN75@insert:
	mov	edx, DWORD PTR [esi+16]
	sub	edx, DWORD PTR __Off$[ebp]
	mov	ebx, DWORD PTR __Off$[ebp]
	push	edx
	add	ecx, ebx
	add	eax, ebx
	push	ecx
	add	eax, edi
	push	eax
	call	DWORD PTR __imp__memmove
; Line 994
	mov	eax, DWORD PTR __Right$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, eax
	jne	SHORT $LN2@insert
; Line 997
	mov	eax, DWORD PTR __Roff$[ebp]
	lea	edx, DWORD PTR [eax+edi]
	cmp	ebx, eax
	jb	SHORT $LN11@insert
	mov	edx, eax
$LN11@insert:
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN80@insert
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN81@insert
$LN80@insert:
	mov	ecx, esi
$LN81@insert:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN84@insert
	mov	eax, DWORD PTR [esi]
	push	edi
	add	ecx, edx
	push	ecx
	add	eax, ebx
	push	eax
	call	DWORD PTR __imp__memmove
; Line 998
	jmp	SHORT $LN110@insert
; Line 997
$LN84@insert:
	push	edi
	add	ecx, edx
	mov	eax, esi
	push	ecx
	add	eax, ebx
	push	eax
	call	DWORD PTR __imp__memmove
; Line 998
	jmp	SHORT $LN110@insert
$LN2@insert:
; Line 1000
	mov	edx, 16					; 00000010H
	cmp	DWORD PTR [eax+20], edx
	jb	SHORT $LN90@insert
	mov	ecx, DWORD PTR [eax]
	jmp	SHORT $LN91@insert
$LN90@insert:
	mov	ecx, eax
$LN91@insert:
	cmp	DWORD PTR [esi+20], edx
	jb	SHORT $LN94@insert
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN95@insert
$LN94@insert:
	mov	eax, esi
$LN95@insert:
	add	ecx, DWORD PTR __Roff$[ebp]
	push	edi
	push	ecx
	add	eax, ebx
	push	eax
	call	_memcpy
$LN110@insert:
; Line 1001
	mov	ecx, DWORD PTR __Num$[ebp]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], ecx
	jb	SHORT $LN102@insert
	mov	eax, DWORD PTR [esi]
	pop	ebx
	mov	BYTE PTR [eax+ecx], 0
	pop	edi
; Line 1003
	mov	eax, esi
	pop	esi
; Line 1004
	pop	ebp
	ret	16					; 00000010H
; Line 1001
$LN102@insert:
	mov	eax, esi
	mov	BYTE PTR [eax+ecx], 0
$LN106@insert:
	pop	ebx
$LN104@insert:
; Line 1003
	pop	edi
	mov	eax, esi
	pop	esi
; Line 1004
	pop	ebp
	ret	16					; 00000010H
$LN6@insert:
; Line 983
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN107@insert:
	int	3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1008
	push	ebp
	mov	ebp, esp
; Line 1014
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	test	eax, eax
	je	SHORT $LN101@insert@2
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN15@insert@2
	mov	ecx, DWORD PTR [esi]
$LN15@insert@2:
	cmp	eax, ecx
	jb	SHORT $LN101@insert@2
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN18@insert@2
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN19@insert@2
$LN18@insert@2:
	mov	ecx, esi
$LN19@insert@2:
	mov	edi, DWORD PTR [esi+16]
	add	edi, ecx
	cmp	edi, eax
	jbe	SHORT $LN101@insert@2
; Line 1016
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN22@insert@2
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN23@insert@2
$LN22@insert@2:
	mov	ecx, esi
$LN23@insert@2:
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	sub	eax, ecx
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	esi
	push	eax
	mov	ecx, esi
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
	pop	edi
	pop	esi
; Line 1030
	pop	ebp
	ret	12					; 0000000cH
$LN101@insert@2:
; Line 1017
	mov	eax, DWORD PTR [esi+16]
	push	ebx
	mov	ebx, DWORD PTR __Off$[ebp]
	cmp	eax, ebx
	jae	SHORT $LN3@insert@2
; Line 1018
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN3@insert@2:
; Line 1019
	mov	ecx, DWORD PTR __Count$[ebp]
	or	edx, -1
	sub	edx, eax
	cmp	edx, ecx
	ja	SHORT $LN2@insert@2
; Line 1020
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2@insert@2:
; Line 1022
	test	ecx, ecx
	je	$LN98@insert@2
	lea	edi, DWORD PTR [eax+ecx]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN34@insert@2
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN34@insert@2:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, edi
	jae	SHORT $LN33@insert@2
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
	je	$LN98@insert@2
$LN104@insert@2:
; Line 1025
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN78@insert@2
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN79@insert@2
; Line 1022
$LN33@insert@2:
	test	edi, edi
	jne	SHORT $LN104@insert@2
	mov	DWORD PTR [esi+16], edi
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN72@insert@2
	mov	eax, DWORD PTR [esi]
	pop	ebx
	mov	BYTE PTR [eax], 0
	pop	edi
; Line 1029
	mov	eax, esi
	pop	esi
; Line 1030
	pop	ebp
	ret	12					; 0000000cH
; Line 1022
$LN72@insert@2:
	pop	ebx
	mov	eax, esi
	pop	edi
	mov	BYTE PTR [eax], 0
	pop	esi
; Line 1030
	pop	ebp
	ret	12					; 0000000cH
; Line 1025
$LN78@insert@2:
	mov	ecx, esi
$LN79@insert@2:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN82@insert@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN83@insert@2
$LN82@insert@2:
	mov	eax, esi
$LN83@insert@2:
	mov	edx, DWORD PTR [esi+16]
	sub	edx, ebx
	push	edx
	add	eax, ebx
	add	eax, DWORD PTR __Count$[ebp]
	add	ecx, ebx
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; Line 1026
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN88@insert@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN89@insert@2
$LN88@insert@2:
	mov	eax, esi
$LN89@insert@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	ecx
	push	edx
	add	eax, ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1027
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN96@insert@2
	mov	eax, DWORD PTR [esi]
	pop	ebx
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 1029
	mov	eax, esi
	pop	esi
; Line 1030
	pop	ebp
	ret	12					; 0000000cH
; Line 1027
$LN96@insert@2:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN98@insert@2:
; Line 1029
	pop	ebx
	pop	edi
	mov	eax, esi
	pop	esi
; Line 1030
	pop	ebp
	ret	12					; 0000000cH
$LN102@insert@2:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Ptr$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1033
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1035
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@insert@3:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@insert@3
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	esi
	push	eax
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
	pop	edi
	pop	esi
; Line 1036
	pop	ebp
	ret	8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1040
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 1041
	mov	ebx, DWORD PTR __Off$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	jae	SHORT $LN3@insert@4
; Line 1042
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN3@insert@4:
; Line 1043
	mov	ecx, DWORD PTR __Count$[ebp]
	or	edx, -1
	sub	edx, eax
	cmp	edx, ecx
	ja	SHORT $LN2@insert@4
; Line 1044
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN2@insert@4:
; Line 1046
	test	ecx, ecx
	je	$LN74@insert@4
	push	edi
	lea	edi, DWORD PTR [eax+ecx]
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN16@insert@4
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN16@insert@4:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, edi
	jae	SHORT $LN15@insert@4
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	test	edi, edi
	je	$LN76@insert@4
$LN79@insert@4:
; Line 1049
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN60@insert@4
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN61@insert@4
; Line 1046
$LN15@insert@4:
	test	edi, edi
	jne	SHORT $LN79@insert@4
	mov	DWORD PTR [esi+16], edi
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN54@insert@4
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 1053
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1054
	pop	ebp
	ret	12					; 0000000cH
; Line 1046
$LN54@insert@4:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 1054
	pop	ebp
	ret	12					; 0000000cH
; Line 1049
$LN60@insert@4:
	mov	ecx, esi
$LN61@insert@4:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN64@insert@4
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN65@insert@4
$LN64@insert@4:
	mov	eax, esi
$LN65@insert@4:
	mov	edx, DWORD PTR [esi+16]
	sub	edx, ebx
	push	edx
	add	eax, ebx
	add	eax, DWORD PTR __Count$[ebp]
	add	ecx, ebx
	push	ecx
	push	eax
	call	DWORD PTR __imp__memmove
; Line 1050
	mov	eax, DWORD PTR __Ch$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	push	ebx
	mov	ecx, esi
	call	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Line 1051
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN72@insert@4
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 1053
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1054
	pop	ebp
	ret	12					; 0000000cH
; Line 1051
$LN72@insert@4:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN76@insert@4:
	pop	edi
$LN74@insert@4:
; Line 1053
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1054
	pop	ebp
	ret	12					; 0000000cH
$LN77@insert@4:
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1062
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 1063
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	push	edi
	jb	SHORT $LN8@insert@5
	mov	ecx, DWORD PTR [esi]
$LN8@insert@5:
	mov	eax, DWORD PTR __Where$[ebp]
	test	eax, eax
	jne	SHORT $LN17@insert@5
	xor	edi, edi
	jmp	SHORT $LN18@insert@5
$LN17@insert@5:
	sub	eax, ecx
	mov	edi, eax
$LN18@insert@5:
; Line 1064
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	push	1
	push	edi
	mov	ecx, esi
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Line 1065
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN27@insert@5
	mov	esi, DWORD PTR [esi]
$LN27@insert@5:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esi, edi
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
; Line 1066
	pop	ebp
	ret	12					; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ID@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1069
	push	ebp
	mov	ebp, esp
; Line 1070
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@insert@6
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN8@insert@6
$LN7@insert@6:
	mov	edx, ecx
$LN8@insert@6:
	mov	eax, DWORD PTR __Where$[ebp]
	test	eax, eax
	jne	SHORT $LN17@insert@6
; Line 1071
	mov	edx, DWORD PTR __Ch$[ebp]
	push	edx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	push	eax
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Line 1072
	pop	ebp
	ret	12					; 0000000cH
; Line 1070
$LN17@insert@6:
	sub	eax, edx
; Line 1071
	mov	edx, DWORD PTR __Ch$[ebp]
	push	edx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	push	eax
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Line 1072
	pop	ebp
	ret	12					; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; Line 1124
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 1125
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	push	edi
	jb	SHORT $LN8@erase@2
	mov	ecx, DWORD PTR [esi]
$LN8@erase@2:
	mov	eax, DWORD PTR __Where$[ebp]
	test	eax, eax
	jne	SHORT $LN17@erase@2
	xor	edi, edi
	jmp	SHORT $LN18@erase@2
$LN17@erase@2:
	sub	eax, ecx
	mov	edi, eax
$LN18@erase@2:
; Line 1126
	push	1
	push	edi
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Line 1127
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN25@erase@2
	mov	esi, DWORD PTR [esi]
$LN25@erase@2:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esi, edi
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
; Line 1128
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Function compile flags: /Ogtp
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx
; Line 1131
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 1132
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	push	edi
	jb	SHORT $LN7@erase@3
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN8@erase@3
$LN7@erase@3:
	mov	eax, esi
$LN8@erase@3:
	mov	ecx, DWORD PTR __First$[ebp]
	test	ecx, ecx
	jne	SHORT $LN17@erase@3
	xor	edi, edi
	jmp	SHORT $LN18@erase@3
$LN17@erase@3:
	mov	edi, ecx
	sub	edi, eax
$LN18@erase@3:
; Line 1133
	mov	eax, DWORD PTR __Last$[ebp]
	test	eax, eax
	je	SHORT $LN26@erase@3
$LN25@erase@3:
	sub	eax, ecx
$LN26@erase@3:
	push	eax
	push	edi
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Line 1134
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN33@erase@3
	mov	esi, DWORD PTR [esi]
$LN33@erase@3:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esi, edi
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
; Line 1135
	pop	ebp
	ret	12					; 0000000cH
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z
_TEXT	SEGMENT
__Nm$ = 8						; size = 4
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
tv746 = 16						; size = 4
__Right$ = 16						; size = 4
__Roff$ = 20						; size = 4
__Newsize$ = 24						; size = 4
__Count$ = 24						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1149
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 1150
	mov	edx, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR __Off$[ebp]
	cmp	edx, edi
	jb	$LN13@replace
	mov	eax, DWORD PTR __Right$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [eax+16]
	cmp	ebx, DWORD PTR __Roff$[ebp]
	jb	$LN13@replace
; Line 1152
	mov	eax, edx
	sub	eax, edi
	cmp	eax, DWORD PTR __N0$[ebp]
	jae	SHORT $LN12@replace
; Line 1153
	mov	DWORD PTR __N0$[ebp], eax
$LN12@replace:
; Line 1154
	sub	ebx, DWORD PTR __Roff$[ebp]
	mov	ecx, ebx
; Line 1155
	mov	ebx, DWORD PTR __Count$[ebp]
	cmp	ecx, ebx
	jae	SHORT $LN11@replace
; Line 1156
	mov	ebx, ecx
$LN11@replace:
; Line 1157
	mov	ecx, edx
	sub	ecx, DWORD PTR __N0$[ebp]
	or	edx, -1
	sub	edx, ebx
	cmp	edx, ecx
	ja	SHORT $LN10@replace
; Line 1158
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN10@replace:
; Line 1160
	sub	eax, DWORD PTR __N0$[ebp]
	mov	DWORD PTR __Nm$[ebp], eax
; Line 1161
	lea	eax, DWORD PTR [ecx+ebx]
; Line 1162
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR __Newsize$[ebp], eax
	cmp	ecx, eax
	jae	SHORT $LN191@replace
; Line 1163
	cmp	eax, -2					; fffffffeH
	jbe	SHORT $LN31@replace
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN31@replace:
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, eax
	jae	SHORT $LN30@replace
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	ecx
	push	eax
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN191@replace
$LN30@replace:
	test	eax, eax
	jne	SHORT $LN191@replace
	mov	DWORD PTR [esi+16], eax
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN69@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN70@replace
$LN69@replace:
	mov	eax, esi
$LN70@replace:
	mov	BYTE PTR [eax], 0
$LN191@replace:
; Line 1165
	cmp	esi, DWORD PTR __Right$[ebp]
	je	SHORT $LN8@replace
; Line 1168
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN75@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN76@replace
$LN75@replace:
	mov	ecx, esi
$LN76@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN79@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN80@replace
$LN79@replace:
	mov	eax, esi
$LN80@replace:
	mov	edx, DWORD PTR __Nm$[ebp]
	add	ecx, edi
	add	ecx, DWORD PTR __N0$[ebp]
	push	edx
	add	eax, edi
	push	ecx
	add	eax, ebx
	push	eax
	call	DWORD PTR __imp__memmove
; Line 1170
	mov	eax, DWORD PTR __Right$[ebp]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	mov	ecx, eax
	jb	SHORT $LN86@replace
	mov	ecx, DWORD PTR [ecx]
$LN86@replace:
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN89@replace
	add	ecx, DWORD PTR __Roff$[ebp]
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ecx
	add	eax, edi
	push	eax
	call	_memcpy
	jmp	$LN194@replace
$LN89@replace:
	add	ecx, DWORD PTR __Roff$[ebp]
	push	ebx
	mov	eax, esi
	push	ecx
	add	eax, edi
	push	eax
	call	_memcpy
	jmp	$LN194@replace
$LN8@replace:
; Line 1172
	mov	ecx, DWORD PTR __N0$[ebp]
	cmp	ebx, ecx
	ja	SHORT $LN6@replace
; Line 1175
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN95@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN96@replace
$LN95@replace:
	mov	ecx, esi
$LN96@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN99@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN100@replace
$LN99@replace:
	mov	eax, esi
$LN100@replace:
	add	ecx, DWORD PTR __Roff$[ebp]
	push	ebx
	push	ecx
	add	eax, edi
	push	eax
	call	DWORD PTR __imp__memmove
; Line 1177
	mov	eax, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN105@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN106@replace
$LN105@replace:
	mov	ecx, esi
$LN106@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN109@replace
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR __Nm$[ebp]
	add	ecx, edi
	add	ecx, DWORD PTR __N0$[ebp]
	push	edx
	add	eax, edi
	push	ecx
	add	eax, ebx
	jmp	$LN195@replace
$LN109@replace:
	mov	edx, DWORD PTR __Nm$[ebp]
	add	ecx, edi
	add	ecx, DWORD PTR __N0$[ebp]
	mov	eax, esi
	push	edx
	add	eax, edi
	push	ecx
	add	eax, ebx
	jmp	$LN195@replace
$LN6@replace:
; Line 1179
	mov	eax, DWORD PTR __Roff$[ebp]
	cmp	eax, edi
	ja	SHORT $LN4@replace
; Line 1182
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN115@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN116@replace
$LN115@replace:
	mov	ecx, esi
$LN116@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN119@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN120@replace
$LN119@replace:
	mov	eax, esi
$LN120@replace:
	mov	edx, DWORD PTR __Nm$[ebp]
	add	ecx, edi
	add	ecx, DWORD PTR __N0$[ebp]
	push	edx
	add	eax, edi
	push	ecx
	add	eax, ebx
	push	eax
	call	DWORD PTR __imp__memmove
; Line 1184
	mov	eax, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN125@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN126@replace
$LN125@replace:
	mov	ecx, esi
$LN126@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN129@replace
	add	ecx, DWORD PTR __Roff$[ebp]
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ecx
	add	eax, edi
	jmp	$LN195@replace
$LN129@replace:
	add	ecx, DWORD PTR __Roff$[ebp]
	mov	eax, esi
	push	ebx
	push	ecx
	add	eax, edi
	jmp	$LN195@replace
$LN4@replace:
; Line 1186
	add	ecx, edi
	cmp	ecx, eax
; Line 1189
	mov	eax, DWORD PTR [esi+20]
	ja	SHORT $LN2@replace
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN135@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN136@replace
$LN135@replace:
	mov	ecx, esi
$LN136@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN139@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN140@replace
$LN139@replace:
	mov	eax, esi
$LN140@replace:
	mov	edx, DWORD PTR __Nm$[ebp]
	add	ecx, edi
	add	ecx, DWORD PTR __N0$[ebp]
	push	edx
	add	eax, edi
	push	ecx
	add	eax, ebx
	push	eax
	call	DWORD PTR __imp__memmove
; Line 1191
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN145@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN146@replace
$LN145@replace:
	mov	eax, esi
$LN146@replace:
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LN149@replace
	sub	eax, DWORD PTR __N0$[ebp]
	mov	ecx, DWORD PTR [esi]
	add	eax, DWORD PTR __Roff$[ebp]
	push	ebx
	add	eax, ebx
	push	eax
	add	ecx, edi
	push	ecx
; Line 1193
	jmp	$LN196@replace
; Line 1191
$LN149@replace:
	sub	eax, DWORD PTR __N0$[ebp]
	push	ebx
	add	eax, DWORD PTR __Roff$[ebp]
	mov	ecx, esi
	add	eax, ebx
	push	eax
	add	ecx, edi
	push	ecx
; Line 1193
	jmp	$LN196@replace
$LN2@replace:
; Line 1196
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN155@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN156@replace
$LN155@replace:
	mov	ecx, esi
$LN156@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN159@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN160@replace
$LN159@replace:
	mov	eax, esi
$LN160@replace:
	mov	edx, DWORD PTR __N0$[ebp]
	add	ecx, DWORD PTR __Roff$[ebp]
	push	edx
	push	ecx
	add	eax, edi
	push	eax
	call	DWORD PTR __imp__memmove
; Line 1198
	mov	eax, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN165@replace
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN166@replace
$LN165@replace:
	mov	ecx, esi
$LN166@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN169@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN170@replace
$LN169@replace:
	mov	eax, esi
$LN170@replace:
	mov	edx, DWORD PTR __Nm$[ebp]
	add	ecx, edi
	add	ecx, DWORD PTR __N0$[ebp]
	push	edx
	add	eax, edi
	push	ecx
	add	eax, ebx
	push	eax
	call	DWORD PTR __imp__memmove
; Line 1200
	mov	eax, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN175@replace
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR tv746[ebp], ecx
	jmp	SHORT $LN176@replace
$LN175@replace:
	mov	DWORD PTR tv746[ebp], esi
$LN176@replace:
	cmp	eax, 16					; 00000010H
	jb	SHORT $LN179@replace
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN180@replace
$LN179@replace:
	mov	eax, esi
$LN180@replace:
	mov	edx, ebx
	sub	edx, DWORD PTR __N0$[ebp]
	add	eax, edi
	push	edx
	mov	edx, DWORD PTR tv746[ebp]
	add	edx, DWORD PTR __Roff$[ebp]
	add	edx, ebx
	add	eax, DWORD PTR __N0$[ebp]
	push	edx
$LN195@replace:
	push	eax
$LN196@replace:
	call	DWORD PTR __imp__memmove
$LN194@replace:
; Line 1203
	mov	ecx, DWORD PTR __Newsize$[ebp]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], ecx
	pop	ebx
	jb	SHORT $LN187@replace
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+ecx], 0
	pop	edi
; Line 1204
	mov	eax, esi
	pop	esi
; Line 1205
	pop	ebp
	ret	20					; 00000014H
; Line 1203
$LN187@replace:
	mov	eax, esi
	pop	edi
	mov	BYTE PTR [eax+ecx], 0
	pop	esi
; Line 1205
	pop	ebp
	ret	20					; 00000014H
$LN13@replace:
; Line 1151
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN193@replace:
	int	3
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z
_TEXT	SEGMENT
__Nm$ = -4						; size = 4
__Off$ = 8						; size = 4
tv446 = 12						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1209
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1215
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	esi
	push	edi
	mov	esi, ecx
	test	eax, eax
	je	SHORT $LN115@replace@2
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN19@replace@2
	mov	ecx, DWORD PTR [esi]
$LN19@replace@2:
	cmp	eax, ecx
	jb	SHORT $LN115@replace@2
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN22@replace@2
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN23@replace@2
$LN22@replace@2:
	mov	ecx, esi
$LN23@replace@2:
	mov	edi, DWORD PTR [esi+16]
	add	edi, ecx
	cmp	edi, eax
	jbe	SHORT $LN115@replace@2
; Line 1217
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN26@replace@2
	mov	ecx, DWORD PTR [esi]
	jmp	SHORT $LN27@replace@2
$LN26@replace@2:
	mov	ecx, esi
$LN27@replace@2:
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	sub	eax, ecx
	mov	ecx, DWORD PTR __Off$[ebp]
	push	eax
	mov	eax, DWORD PTR __N0$[ebp]
	push	esi
	push	eax
	push	ecx
	mov	ecx, esi
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	edi
	pop	esi
; Line 1240
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN115@replace@2:
; Line 1218
	mov	edx, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	edx, ecx
	jae	SHORT $LN7@replace@2
; Line 1219
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN7@replace@2:
; Line 1220
	mov	eax, edx
	push	ebx
	mov	ebx, DWORD PTR __N0$[ebp]
	sub	eax, ecx
	cmp	eax, ebx
	jae	SHORT $LN6@replace@2
; Line 1221
	mov	ebx, eax
$LN6@replace@2:
; Line 1222
	mov	ecx, DWORD PTR __Count$[ebp]
	or	edi, -1
	sub	edx, ebx
	sub	edi, ecx
	cmp	edi, edx
	ja	SHORT $LN5@replace@2
; Line 1223
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN5@replace@2:
; Line 1224
	sub	eax, ebx
	mov	DWORD PTR __Nm$[ebp], eax
; Line 1226
	cmp	ecx, ebx
	jae	SHORT $LN116@replace@2
; Line 1228
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN35@replace@2
	mov	edi, DWORD PTR [esi]
	jmp	SHORT $LN36@replace@2
$LN35@replace@2:
	mov	edi, esi
$LN36@replace@2:
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN39@replace@2
	mov	edx, DWORD PTR [esi]
	jmp	SHORT $LN40@replace@2
$LN39@replace@2:
	mov	edx, esi
$LN40@replace@2:
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	add	edi, eax
	add	edx, eax
	add	edi, ebx
	add	edx, ecx
	push	edi
	push	edx
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR __Count$[ebp]
	add	esp, 12					; 0000000cH
$LN116@replace@2:
; Line 1231
	test	ecx, ecx
	jne	SHORT $LN2@replace@2
	test	ebx, ebx
	je	$LN112@replace@2
$LN2@replace@2:
	mov	eax, DWORD PTR [esi+16]
	mov	edi, eax
	sub	edi, ebx
	add	edi, ecx
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN48@replace@2
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN48@replace@2:
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, edi
	jae	SHORT $LN47@replace@2
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	ecx, DWORD PTR __Count$[ebp]
	test	edi, edi
	je	$LN112@replace@2
$LN120@replace@2:
; Line 1233
	cmp	ebx, ecx
	jae	SHORT $LN98@replace@2
; Line 1235
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN92@replace@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN93@replace@2
; Line 1231
$LN47@replace@2:
	test	edi, edi
	jne	SHORT $LN120@replace@2
	mov	DWORD PTR [esi+16], edi
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN86@replace@2
	mov	eax, DWORD PTR [esi]
	pop	ebx
	mov	BYTE PTR [eax], 0
	pop	edi
; Line 1239
	mov	eax, esi
	pop	esi
; Line 1240
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
; Line 1231
$LN86@replace@2:
	pop	ebx
	mov	eax, esi
	pop	edi
	mov	BYTE PTR [eax], 0
	pop	esi
; Line 1240
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
; Line 1235
$LN92@replace@2:
	mov	eax, esi
$LN93@replace@2:
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN96@replace@2
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR tv446[ebp], edx
	jmp	SHORT $LN97@replace@2
$LN96@replace@2:
	mov	DWORD PTR tv446[ebp], esi
$LN97@replace@2:
	mov	edx, DWORD PTR __Nm$[ebp]
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	add	eax, edx
	add	eax, ebx
	push	eax
	mov	eax, DWORD PTR tv446[ebp]
	add	eax, edx
	add	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR __Count$[ebp]
	add	esp, 12					; 0000000cH
$LN98@replace@2:
; Line 1236
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN102@replace@2
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN103@replace@2
$LN102@replace@2:
	mov	eax, esi
$LN103@replace@2:
	add	eax, DWORD PTR __Off$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1237
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN110@replace@2
	mov	eax, DWORD PTR [esi]
	pop	ebx
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 1239
	mov	eax, esi
	pop	esi
; Line 1240
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
; Line 1237
$LN110@replace@2:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN112@replace@2:
; Line 1239
	pop	ebx
	pop	edi
	mov	eax, esi
	pop	esi
; Line 1240
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN118@replace@2:
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBD@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Ptr$ = 16						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1243
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1245
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL5@replace@3:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL5@replace@3
	mov	edx, DWORD PTR __Off$[ebp]
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR __N0$[ebp]
	push	esi
	push	eax
	push	edx
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	edi
	pop	esi
; Line 1246
	pop	ebp
	ret	12					; 0000000cH
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIID@Z
_TEXT	SEGMENT
tv370 = -4						; size = 4
__Off$ = 8						; size = 4
__Nm$ = 12						; size = 4
__N0$ = 12						; size = 4
__Count$ = 16						; size = 4
__Ch$ = 20						; size = 1
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1250
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
; Line 1251
	mov	ecx, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR __Off$[ebp]
	cmp	ecx, edi
	jae	SHORT $LN7@replace@4
; Line 1252
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN7@replace@4:
; Line 1253
	mov	ebx, DWORD PTR __N0$[ebp]
	mov	eax, ecx
	sub	eax, edi
	cmp	eax, ebx
	jae	SHORT $LN6@replace@4
; Line 1254
	mov	ebx, eax
$LN6@replace@4:
; Line 1255
	or	edx, -1
	sub	edx, DWORD PTR __Count$[ebp]
	sub	ecx, ebx
	cmp	edx, ecx
	ja	SHORT $LN5@replace@4
; Line 1256
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN5@replace@4:
; Line 1259
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	eax, ebx
	mov	DWORD PTR __Nm$[ebp], eax
	cmp	ecx, ebx
	jae	SHORT $LN23@replace@4
; Line 1261
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN17@replace@4
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN18@replace@4
$LN17@replace@4:
	mov	eax, esi
$LN18@replace@4:
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN21@replace@4
	mov	edx, DWORD PTR [esi]
	jmp	SHORT $LN22@replace@4
$LN21@replace@4:
	mov	edx, esi
$LN22@replace@4:
	push	DWORD PTR __Nm$[ebp]
	add	eax, edi
	add	eax, ebx
	add	edx, edi
	push	eax
	add	edx, ecx
	push	edx
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR __Count$[ebp]
	add	esp, 12					; 0000000cH
$LN23@replace@4:
; Line 1264
	test	ecx, ecx
	jne	SHORT $LN2@replace@4
	test	ebx, ebx
	je	$LN88@replace@4
$LN2@replace@4:
	mov	eax, DWORD PTR [esi+16]
	mov	edi, eax
	sub	edi, ebx
	add	edi, ecx
	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN30@replace@4
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN30@replace@4:
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, edi
	jae	SHORT $LN29@replace@4
	push	eax
	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	ecx, DWORD PTR __Count$[ebp]
	test	edi, edi
	je	$LN88@replace@4
$LN93@replace@4:
; Line 1266
	cmp	ebx, ecx
	jae	SHORT $LN80@replace@4
; Line 1268
	mov	edx, DWORD PTR [esi+20]
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN74@replace@4
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN75@replace@4
; Line 1264
$LN29@replace@4:
	test	edi, edi
	jne	SHORT $LN93@replace@4
	mov	DWORD PTR [esi+16], edi
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN68@replace@4
	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	BYTE PTR [eax], 0
; Line 1272
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1273
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
; Line 1264
$LN68@replace@4:
	pop	edi
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [eax], 0
	pop	ebx
; Line 1273
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
; Line 1268
$LN74@replace@4:
	mov	eax, esi
$LN75@replace@4:
	cmp	edx, 16					; 00000010H
	jb	SHORT $LN78@replace@4
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR tv370[ebp], edx
	jmp	SHORT $LN79@replace@4
$LN78@replace@4:
	mov	DWORD PTR tv370[ebp], esi
$LN79@replace@4:
	mov	edx, DWORD PTR __Nm$[ebp]
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	add	eax, edx
	add	eax, ebx
	push	eax
	mov	eax, DWORD PTR tv370[ebp]
	add	eax, edx
	add	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	mov	ecx, DWORD PTR __Count$[ebp]
	add	esp, 12					; 0000000cH
$LN80@replace@4:
; Line 1269
	mov	edx, DWORD PTR __Ch$[ebp]
	mov	eax, DWORD PTR __Off$[ebp]
	push	edx
	push	ecx
	push	eax
	mov	ecx, esi
	call	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
; Line 1270
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN86@replace@4
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+edi], 0
	pop	edi
; Line 1272
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1273
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
; Line 1270
$LN86@replace@4:
	mov	eax, esi
	mov	BYTE PTR [eax+edi], 0
$LN88@replace@4:
; Line 1272
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 1273
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN91@replace@4:
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBDI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
__Count$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1284
	push	ebp
	mov	ebp, esp
; Line 1286
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	push	esi
	jb	SHORT $LN7@replace@5
	mov	esi, DWORD PTR [ecx]
	jmp	SHORT $LN8@replace@5
$LN7@replace@5:
	mov	esi, ecx
$LN8@replace@5:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	edx, edx
	jne	SHORT $LN17@replace@5
	xor	edx, edx
	jmp	SHORT $LN18@replace@5
$LN17@replace@5:
	sub	edx, eax
$LN18@replace@5:
	test	eax, eax
	jne	SHORT $LN25@replace@5
	mov	esi, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR __Ptr$[ebp]
	push	esi
	push	edx
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 1287
	pop	ebp
	ret	16					; 00000010H
; Line 1286
$LN25@replace@5:
	sub	eax, esi
	mov	esi, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR __Ptr$[ebp]
	push	esi
	push	edx
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 1287
	pop	ebp
	ret	16					; 00000010H
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1291
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1293
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	jb	SHORT $LN7@replace@6
	mov	esi, DWORD PTR [ecx]
	jmp	SHORT $LN8@replace@6
$LN7@replace@6:
	mov	esi, ecx
$LN8@replace@6:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	edx, edx
	jne	SHORT $LN17@replace@6
	xor	ecx, ecx
	jmp	SHORT $LN18@replace@6
$LN17@replace@6:
	sub	edx, eax
	mov	ecx, edx
$LN18@replace@6:
	test	eax, eax
	jne	SHORT $LN25@replace@6
	xor	esi, esi
	jmp	SHORT $LN26@replace@6
$LN25@replace@6:
	sub	eax, esi
	mov	esi, eax
$LN26@replace@6:
	mov	edi, DWORD PTR __Ptr$[ebp]
	mov	eax, edi
	lea	ebx, DWORD PTR [eax+1]
	npad	4
$LL35@replace@6:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL35@replace@6
	sub	eax, ebx
	push	eax
	push	edi
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	push	esi
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	edi
	pop	esi
	pop	ebx
; Line 1294
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Ch$ = 20						; size = 1
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1298
	push	ebp
	mov	ebp, esp
; Line 1300
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	push	esi
	jb	SHORT $LN7@replace@7
	mov	esi, DWORD PTR [ecx]
	jmp	SHORT $LN8@replace@7
$LN7@replace@7:
	mov	esi, ecx
$LN8@replace@7:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	edx, edx
	jne	SHORT $LN17@replace@7
	xor	edx, edx
	jmp	SHORT $LN18@replace@7
$LN17@replace@7:
	sub	edx, eax
$LN18@replace@7:
	test	eax, eax
	jne	SHORT $LN25@replace@7
	mov	esi, DWORD PTR __Ch$[ebp]
	push	esi
	mov	esi, DWORD PTR __Count$[ebp]
	push	esi
	push	edx
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 1301
	pop	ebp
	ret	16					; 00000010H
; Line 1300
$LN25@replace@7:
	sub	eax, esi
	mov	esi, DWORD PTR __Ch$[ebp]
	push	esi
	mov	esi, DWORD PTR __Count$[ebp]
	push	esi
	push	edx
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 1301
	pop	ebp
	ret	16					; 00000010H
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1329
	push	ebp
	mov	ebp, esp
; Line 1330
	mov	edx, DWORD PTR __Last2$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First2$[ebp]
	mov	esi, ecx
	cmp	edi, edx
	jne	SHORT $LN2@replace@8
; Line 1331
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN9@replace@8
	mov	edx, DWORD PTR [esi]
	jmp	SHORT $LN10@replace@8
$LN9@replace@8:
	mov	edx, esi
$LN10@replace@8:
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	ecx, ecx
	jne	SHORT $LN19@replace@8
	xor	ecx, ecx
	jmp	SHORT $LN20@replace@8
$LN19@replace@8:
	sub	ecx, eax
$LN20@replace@8:
	test	eax, eax
	jne	SHORT $LN27@replace@8
	push	ecx
	push	eax
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi
; Line 1335
	mov	eax, esi
	pop	esi
; Line 1336
	pop	ebp
	ret	16					; 00000010H
; Line 1331
$LN27@replace@8:
	push	ecx
	sub	eax, edx
	push	eax
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi
; Line 1335
	mov	eax, esi
	pop	esi
; Line 1336
	pop	ebp
	ret	16					; 00000010H
$LN2@replace@8:
; Line 1334
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	push	ebx
	jb	SHORT $LN37@replace@8
	mov	ebx, DWORD PTR [esi]
	jmp	SHORT $LN38@replace@8
$LN37@replace@8:
	mov	ebx, esi
$LN38@replace@8:
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	ecx, ecx
	jne	SHORT $LN47@replace@8
	xor	ecx, ecx
	jmp	SHORT $LN48@replace@8
$LN47@replace@8:
	sub	ecx, eax
$LN48@replace@8:
	test	eax, eax
	je	SHORT $LN56@replace@8
$LN55@replace@8:
	sub	eax, ebx
$LN56@replace@8:
	sub	edx, edi
	push	edx
	push	edi
	push	ecx
	push	eax
	mov	ecx, esi
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	ebx
	pop	edi
; Line 1335
	mov	eax, esi
	pop	esi
; Line 1336
	pop	ebp
	ret	16					; 00000010H
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__First2$ = 16						; size = 4
__Last2$ = 20						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1340
	push	ebp
	mov	ebp, esp
; Line 1341
	mov	edx, DWORD PTR __Last2$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First2$[ebp]
	mov	esi, ecx
	cmp	edi, edx
	jne	SHORT $LN2@replace@9
; Line 1342
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN13@replace@9
	mov	edx, DWORD PTR [esi]
	jmp	SHORT $LN14@replace@9
$LN13@replace@9:
	mov	edx, esi
$LN14@replace@9:
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	ecx, ecx
	jne	SHORT $LN23@replace@9
	xor	ecx, ecx
	jmp	SHORT $LN24@replace@9
$LN23@replace@9:
	sub	ecx, eax
$LN24@replace@9:
	test	eax, eax
	jne	SHORT $LN31@replace@9
	push	ecx
	push	eax
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi
; Line 1346
	mov	eax, esi
	pop	esi
; Line 1347
	pop	ebp
	ret	16					; 00000010H
; Line 1342
$LN31@replace@9:
	push	ecx
	sub	eax, edx
	push	eax
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi
; Line 1346
	mov	eax, esi
	pop	esi
; Line 1347
	pop	ebp
	ret	16					; 00000010H
$LN2@replace@9:
; Line 1345
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	push	ebx
	jb	SHORT $LN41@replace@9
	mov	ebx, DWORD PTR [esi]
	jmp	SHORT $LN42@replace@9
$LN41@replace@9:
	mov	ebx, esi
$LN42@replace@9:
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	ecx, ecx
	jne	SHORT $LN57@replace@9
	xor	ecx, ecx
	jmp	SHORT $LN58@replace@9
$LN57@replace@9:
	sub	ecx, eax
$LN58@replace@9:
	test	eax, eax
	je	SHORT $LN66@replace@9
$LN65@replace@9:
	sub	eax, ebx
$LN66@replace@9:
	sub	edx, edi
	push	edx
	push	edi
	push	ecx
	push	eax
	mov	ecx, esi
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	ebx
	pop	edi
; Line 1346
	mov	eax, esi
	pop	esi
; Line 1347
	pop	ebp
	ret	16					; 00000010H
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
; Function compile flags: /Ogtp
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx
; Line 1463
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1464
	mov	esi, DWORD PTR [ecx+20]
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN7@push_back
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN8@push_back
$LN7@push_back:
	mov	edx, ecx
$LN8@push_back:
	mov	eax, DWORD PTR [ecx+16]
	add	eax, edx
	cmp	esi, 16					; 00000010H
	pop	esi
	jb	SHORT $LN21@push_back
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN22@push_back
$LN21@push_back:
	mov	edx, ecx
$LN22@push_back:
	test	eax, eax
	jne	SHORT $LN31@push_back
	mov	edx, DWORD PTR __Ch$[ebp]
	push	edx
	push	1
	push	eax
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Line 1465
	pop	ebp
	ret	4
; Line 1464
$LN31@push_back:
	sub	eax, edx
	mov	edx, DWORD PTR __Ch$[ebp]
	push	edx
	push	1
	push	eax
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Line 1465
	pop	ebp
	ret	4
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
PUBLIC	?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::back
; Function compile flags: /Ogtp
;	COMDAT ?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ
_TEXT	SEGMENT
?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::back, COMDAT
; _this$ = ecx
; Line 1485
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@back
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [ecx+eax-1]
; Line 1486
	ret	0
; Line 1485
$LN7@back:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [ecx+eax-1]
; Line 1486
	ret	0
?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::back
_TEXT	ENDS
PUBLIC	?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::back
; Function compile flags: /Ogtp
;	COMDAT ?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
_TEXT	SEGMENT
?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::back, COMDAT
; _this$ = ecx
; Line 1490
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	jb	SHORT $LN7@back@2
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [ecx+eax-1]
; Line 1491
	ret	0
; Line 1490
$LN7@back@2:
	mov	eax, ecx
	mov	ecx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [ecx+eax-1]
; Line 1491
	ret	0
?back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::back
_TEXT	ENDS
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
; Function compile flags: /Ogtp
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx
; Line 1526
	push	ebp
	mov	ebp, esp
; Line 1527
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, edx
	ja	SHORT $LN2@resize
; Line 1528
	push	-1
	push	eax
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Line 1531
	pop	ebp
	ret	8
$LN2@resize:
	push	esi
; Line 1530
	mov	esi, DWORD PTR __Ch$[ebp]
	push	esi
	sub	eax, edx
	push	eax
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
	pop	esi
; Line 1531
	pop	ebp
	ret	8
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
; Function compile flags: /Ogtp
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx
; Line 1539
	push	ebp
	mov	ebp, esp
; Line 1540
	mov	eax, DWORD PTR __Newcap$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [esi+16]
	cmp	edi, eax
	ja	SHORT $LN11@reserve
	cmp	DWORD PTR [esi+20], eax
	je	SHORT $LN11@reserve
; Line 1543
	push	1
	push	eax
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	test	al, al
	je	SHORT $LN11@reserve
; Line 1544
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	mov	DWORD PTR [esi+16], edi
	jb	SHORT $LN9@reserve
	mov	esi, DWORD PTR [esi]
$LN9@reserve:
	mov	BYTE PTR [esi+edi], 0
$LN11@reserve:
	pop	edi
	pop	esi
; Line 1546
	pop	ebp
	ret	4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
; Function compile flags: /Ogtp
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Right$ = 16						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx
; Line 1858
	push	ebp
	mov	ebp, esp
; Line 1859
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	esi
	or	esi, -1
	cmp	eax, -1
	jae	SHORT $LN3@compare@7
	mov	esi, eax
$LN3@compare@7:
	cmp	DWORD PTR [edx+20], 16			; 00000010H
	jb	SHORT $LN14@compare@7
	mov	edx, DWORD PTR [edx]
$LN14@compare@7:
	mov	eax, DWORD PTR __N0$[ebp]
	push	esi
	push	edx
	mov	edx, DWORD PTR __Off$[ebp]
	push	eax
	push	edx
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
	pop	esi
; Line 1860
	pop	ebp
	ret	12					; 0000000cH
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z ; std::allocator<osg::ref_ptr<vtMaterial> >::destroy
; Function compile flags: /Ogtp
;	COMDAT ?destroy@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z PROC ; std::allocator<osg::ref_ptr<vtMaterial> >::destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 212
	push	ebp
	mov	ebp, esp
	push	esi
; Line 213
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN14@destroy
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN14@destroy:
	mov	DWORD PTR [esi], 0
	pop	esi
; Line 214
	pop	ebp
	ret	4
?destroy@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEXPAV?$ref_ptr@VvtMaterial@@@osg@@@Z ENDP ; std::allocator<osg::ref_ptr<vtMaterial> >::destroy
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 543
	push	ebp
	mov	ebp, esp
; Line 545
	mov	eax, DWORD PTR __Right$[ebp]
	push	esi
	push	-1
	mov	esi, ecx
	push	0
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	eax
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 546
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 563
	push	ebp
	mov	ebp, esp
; Line 565
	mov	eax, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	edx
	mov	ecx, esi
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 566
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 571
	push	ebp
	mov	ebp, esp
; Line 573
	mov	eax, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	edx
	mov	ecx, esi
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 574
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 578
	push	ebp
	mov	ebp, esp
; Line 580
	mov	eax, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	ecx, esi
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 581
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 585
	push	ebp
	mov	ebp, esp
; Line 587
	mov	eax, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	ecx, esi
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 588
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 592
	push	ebp
	mov	ebp, esp
; Line 594
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, edx
	push	edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	lea	edi, DWORD PTR [eax+1]
$LL31@basic_stri@2:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL31@basic_stri@2
	sub	eax, edi
	push	eax
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
; Line 595
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 599
	push	ebp
	mov	ebp, esp
; Line 601
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, edx
	push	edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	lea	edi, DWORD PTR [eax+1]
$LL31@basic_stri@3:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL31@basic_stri@3
	sub	eax, edi
	push	eax
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
; Line 602
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 606
	push	ebp
	mov	ebp, esp
; Line 608
	mov	eax, DWORD PTR __Ch$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Count$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	ecx, esi
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 609
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@IDABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@IDABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
__Al$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@IDABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 613
	push	ebp
	mov	ebp, esp
; Line 615
	mov	eax, DWORD PTR __Ch$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __Count$[ebp]
	push	eax
	push	ecx
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	ecx, esi
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 616
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@IDABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 674
	push	ebp
	mov	ebp, esp
; Line 677
	mov	eax, DWORD PTR __Last$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	cmp	ecx, eax
	je	SHORT $LN28@basic_stri@4
; Line 678
	sub	eax, ecx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN28@basic_stri@4:
; Line 679
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 684
	push	ebp
	mov	ebp, esp
; Line 687
	mov	eax, DWORD PTR __Last$[ebp]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	cmp	ecx, eax
	je	SHORT $LN28@basic_stri@5
; Line 688
	sub	eax, ecx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN28@basic_stri@5:
; Line 689
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD0ABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; Line 693
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 695
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
; Line 696
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	ecx, eax
	je	SHORT $LN40@basic_stri@6
; Line 697
	sub	eax, ecx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN40@basic_stri@6:
; Line 698
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx
; Line 767
	push	ebp
	mov	ebp, esp
	push	esi
; Line 768
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL7@operator@13:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL7@operator@13
	sub	eax, edi
	push	eax
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	pop	esi
; Line 769
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx
; Line 772
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 773
	cmp	DWORD PTR [esi+20], 1
	jae	SHORT $LN14@operator@14
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	1
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN14@operator@14:
	mov	ecx, 16					; 00000010H
	cmp	DWORD PTR [esi+20], ecx
	jb	SHORT $LN63@operator@14
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN64@operator@14
$LN63@operator@14:
	mov	eax, esi
$LN64@operator@14:
	mov	dl, BYTE PTR __Ch$[ebp]
	mov	BYTE PTR [eax], dl
	mov	DWORD PTR [esi+16], 1
	cmp	DWORD PTR [esi+20], ecx
	jb	SHORT $LN77@operator@14
	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR [eax+1], 0
	mov	eax, esi
	pop	esi
; Line 774
	pop	ebp
	ret	4
; Line 773
$LN77@operator@14:
	mov	BYTE PTR [esi+1], 0
	mov	eax, esi
	pop	esi
; Line 774
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx
; Line 782
	push	ebp
	mov	ebp, esp
	push	esi
; Line 783
	mov	esi, DWORD PTR __Ptr$[ebp]
	mov	eax, esi
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL7@operator@15:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL7@operator@15
	sub	eax, edi
	push	eax
	push	esi
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
	pop	edi
	pop	esi
; Line 784
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx
; Line 787
	push	ebp
	mov	ebp, esp
; Line 788
	mov	eax, DWORD PTR __Ch$[ebp]
	push	eax
	push	1
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Line 789
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; Line 792
	push	ebp
	mov	ebp, esp
; Line 793
	mov	eax, DWORD PTR __Right$[ebp]
	push	-1
	push	0
	push	eax
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Line 794
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; Line 876
	push	ebp
	mov	ebp, esp
	push	esi
; Line 877
	mov	esi, DWORD PTR [ecx+20]
	push	edi
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN7@append@5
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN8@append@5
$LN7@append@5:
	mov	edx, ecx
$LN8@append@5:
	mov	eax, DWORD PTR [ecx+16]
	lea	edi, DWORD PTR [eax+edx]
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN19@append@5
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN20@append@5
$LN19@append@5:
	mov	edx, ecx
$LN20@append@5:
	add	eax, edx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	push	edi
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	edi
	pop	esi
; Line 878
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Function compile flags: /Ogtp
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; Line 881
	push	ebp
	mov	ebp, esp
	push	esi
; Line 882
	mov	esi, DWORD PTR [ecx+20]
	push	edi
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN7@append@6
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN8@append@6
$LN7@append@6:
	mov	edx, ecx
$LN8@append@6:
	mov	eax, DWORD PTR [ecx+16]
	lea	edi, DWORD PTR [eax+edx]
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN19@append@6
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN20@append@6
$LN19@append@6:
	mov	edx, ecx
$LN20@append@6:
	add	eax, edx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	push	edi
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	edi
	pop	esi
; Line 883
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; Line 886
	push	ebp
	mov	ebp, esp
; Line 887
	mov	eax, DWORD PTR __Right$[ebp]
	push	-1
	push	0
	push	eax
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 888
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; Line 965
	push	ebp
	mov	ebp, esp
	push	esi
; Line 966
	mov	esi, DWORD PTR [ecx+20]
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN7@assign@5
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN8@assign@5
$LN7@assign@5:
	mov	edx, ecx
$LN8@assign@5:
	mov	eax, DWORD PTR [ecx+16]
	add	eax, edx
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN19@assign@5
	mov	esi, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	push	esi
	push	eax
	push	edx
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 967
	pop	ebp
	ret	8
; Line 966
$LN19@assign@5:
	mov	esi, DWORD PTR __Last$[ebp]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	push	esi
	mov	edx, ecx
	push	eax
	push	edx
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 967
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; Line 970
	push	ebp
	mov	ebp, esp
	push	esi
; Line 971
	mov	esi, DWORD PTR [ecx+20]
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN7@assign@6
	mov	edx, DWORD PTR [ecx]
	jmp	SHORT $LN8@assign@6
$LN7@assign@6:
	mov	edx, ecx
$LN8@assign@6:
	mov	eax, DWORD PTR [ecx+16]
	add	eax, edx
	cmp	esi, 16					; 00000010H
	jb	SHORT $LN19@assign@6
	mov	esi, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	push	esi
	push	eax
	push	edx
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 972
	pop	ebp
	ret	8
; Line 971
$LN19@assign@6:
	mov	esi, DWORD PTR __Last$[ebp]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	push	esi
	mov	edx, ecx
	push	eax
	push	edx
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 972
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Right$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 975
	push	ebp
	mov	ebp, esp
; Line 976
	mov	eax, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Off$[ebp]
	push	-1
	push	0
	push	eax
	push	edx
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Line 977
	pop	ebp
	ret	8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1057
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; Line 1058
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	push	edi
	jb	SHORT $LN10@insert@7
	mov	ecx, DWORD PTR [esi]
$LN10@insert@7:
	mov	eax, DWORD PTR __Where$[ebp]
	test	eax, eax
	jne	SHORT $LN19@insert@7
	xor	edi, edi
	jmp	SHORT $LN20@insert@7
$LN19@insert@7:
	sub	eax, ecx
	mov	edi, eax
$LN20@insert@7:
	push	0
	push	1
	push	edi
	mov	ecx, esi
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN29@insert@7
	mov	esi, DWORD PTR [esi]
$LN29@insert@7:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esi, edi
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
; Line 1059
	pop	ebp
	ret	8
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD1@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1096
	push	ebp
	mov	ebp, esp
; Line 1097
	mov	eax, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	edx
	push	eax
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0PBD1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Line 1098
	pop	ebp
	ret	12					; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PBD1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
; Function compile flags: /Ogtp
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx
; Line 1102
	push	ebp
	mov	ebp, esp
; Line 1103
	mov	eax, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	edx
	push	eax
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@000@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Line 1104
	pop	ebp
	ret	12					; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXV?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__N0$ = 12						; size = 4
__Right$ = 16						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1143
	push	ebp
	mov	ebp, esp
; Line 1144
	mov	eax, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __N0$[ebp]
	push	-1
	push	0
	push	eax
	mov	eax, DWORD PTR __Off$[ebp]
	push	edx
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Line 1145
	pop	ebp
	ret	12					; 0000000cH
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
; Function compile flags: /Ogtp
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ABV12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Right$ = 16						; size = 4
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT
; _this$ = ecx
; Line 1277
	push	ebp
	mov	ebp, esp
; Line 1279
	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	push	esi
	jb	SHORT $LN7@replace@10
	mov	esi, DWORD PTR [ecx]
	jmp	SHORT $LN8@replace@10
$LN7@replace@10:
	mov	esi, ecx
$LN8@replace@10:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	test	edx, edx
	jne	SHORT $LN17@replace@10
	xor	edx, edx
	jmp	SHORT $LN18@replace@10
$LN17@replace@10:
	sub	edx, eax
$LN18@replace@10:
	test	eax, eax
	jne	SHORT $LN25@replace@10
	mov	esi, DWORD PTR __Right$[ebp]
	push	-1
	push	eax
	push	esi
	push	edx
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 1280
	pop	ebp
	ret	12					; 0000000cH
; Line 1279
$LN25@replace@10:
	push	-1
	sub	eax, esi
	mov	esi, DWORD PTR __Right$[ebp]
	push	0
	push	esi
	push	edx
	push	eax
	call	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
	pop	esi
; Line 1280
	pop	ebp
	ret	12					; 0000000cH
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
; Function compile flags: /Ogtp
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx
; Line 1521
	push	ebp
	mov	ebp, esp
; Line 1522
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, edx
	ja	SHORT $LN4@resize@2
	push	-1
	push	eax
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
; Line 1523
	pop	ebp
	ret	4
; Line 1522
$LN4@resize@2:
	push	0
	sub	eax, edx
	push	eax
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Line 1523
	pop	ebp
	ret	4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
; Function compile flags: /Ogtp
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
$T374365 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx
; Line 1847
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 1848
	mov	edx, DWORD PTR __Off$[ebp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	xor	eax, eax
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR $T374365[ebp], eax
	mov	BYTE PTR [esi], al
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	push	edx
	push	ecx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, esi
	pop	esi
; Line 1849
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@@Z ; std::_Dest_val<std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
; Function compile flags: /Ogtp
;	COMDAT ??$_Dest_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@@Z PROC ; std::_Dest_val<std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 286
	push	ebp
	mov	ebp, esp
	push	esi
; Line 287
	mov	esi, DWORD PTR __Pdest$[ebp]
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN16@Dest_val
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN16@Dest_val:
	mov	DWORD PTR [esi], 0
	pop	esi
; Line 288
	pop	ebp
	ret	0
??$_Dest_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@@Z ENDP ; std::_Dest_val<std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
_TEXT	ENDS
PUBLIC	??0ObjectProperty@osgDB@@QAE@PBDH_N@Z		; osgDB::ObjectProperty::ObjectProperty
; Function compile flags: /Ogtp
;	COMDAT ??0ObjectProperty@osgDB@@QAE@PBDH_N@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_value$ = 12						; size = 4
_useMap$ = 16						; size = 1
??0ObjectProperty@osgDB@@QAE@PBDH_N@Z PROC		; osgDB::ObjectProperty::ObjectProperty, COMDAT
; _this$ = ecx
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osgdb\datatypes
; Line 90
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _name$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, edx
	push	edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	lea	edi, DWORD PTR [eax+1]
$LL34@ObjectProp@2:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL34@ObjectProp@2
	sub	eax, edi
	push	eax
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR _value$[ebp]
	mov	cl, BYTE PTR _useMap$[ebp]
	mov	DWORD PTR [esi+28], eax
	pop	edi
	mov	BYTE PTR [esi+32], cl
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
??0ObjectProperty@osgDB@@QAE@PBDH_N@Z ENDP		; osgDB::ObjectProperty::ObjectProperty
_TEXT	ENDS
PUBLIC	??0ObjectMark@osgDB@@QAE@PBDH@Z			; osgDB::ObjectMark::ObjectMark
; Function compile flags: /Ogtp
;	COMDAT ??0ObjectMark@osgDB@@QAE@PBDH@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_delta$ = 12						; size = 4
??0ObjectMark@osgDB@@QAE@PBDH@Z PROC			; osgDB::ObjectMark::ObjectMark, COMDAT
; _this$ = ecx
; Line 119
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _name$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, edx
	push	edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	lea	edi, DWORD PTR [eax+1]
$LL34@ObjectMark@2:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL34@ObjectMark@2
	sub	eax, edi
	push	eax
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR _delta$[ebp]
	mov	DWORD PTR [esi+28], eax
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0ObjectMark@osgDB@@QAE@PBDH@Z ENDP			; osgDB::ObjectMark::ObjectMark
_TEXT	ENDS
PUBLIC	??0CPLString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPLString::CPLString
; Function compile flags: /Ogtp
;	COMDAT ??0CPLString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_oStr$ = 8						; size = 4
??0CPLString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPLString::CPLString, COMDAT
; _this$ = ecx
; File c:\osgeo4w\include\cpl_string.h
; Line 229
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _oStr$[ebp]
	push	esi
	push	-1
	mov	esi, ecx
	push	0
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	eax
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0CPLString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPLString::CPLString
_TEXT	ENDS
PUBLIC	??0CPLString@@QAE@PBD@Z				; CPLString::CPLString
; Function compile flags: /Ogtp
;	COMDAT ??0CPLString@@QAE@PBD@Z
_TEXT	SEGMENT
_pszStr$ = 8						; size = 4
??0CPLString@@QAE@PBD@Z PROC				; CPLString::CPLString, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _pszStr$[ebp]
	push	esi
	mov	esi, ecx
	mov	eax, edx
	push	edi
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
	lea	edi, DWORD PTR [eax+1]
$LL34@CPLString@2:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL34@CPLString@2
	sub	eax, edi
	push	eax
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0CPLString@@QAE@PBD@Z ENDP				; CPLString::CPLString
_TEXT	ENDS
PUBLIC	?Clear@CPLString@@QAEXXZ			; CPLString::Clear
; Function compile flags: /Ogtp
;	COMDAT ?Clear@CPLString@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPLString@@QAEXXZ PROC				; CPLString::Clear, COMDAT
; _this$ = ecx
; Line 254
	push	-1
	push	0
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	ret	0
?Clear@CPLString@@QAEXXZ ENDP				; CPLString::Clear
_TEXT	ENDS
PUBLIC	??0CPLString@@QAE@ABV0@@Z			; CPLString::CPLString
; Function compile flags: /Ogtp
;	COMDAT ??0CPLString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CPLString@@QAE@ABV0@@Z PROC				; CPLString::CPLString, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	-1
	mov	esi, ecx
	push	0
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	eax
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0CPLString@@QAE@ABV0@@Z ENDP				; CPLString::CPLString
_TEXT	ENDS
PUBLIC	??0OGRStyleTable@@QAE@ABV0@@Z			; OGRStyleTable::OGRStyleTable
; Function compile flags: /Ogtp
;	COMDAT ??0OGRStyleTable@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0OGRStyleTable@@QAE@ABV0@@Z PROC			; OGRStyleTable::OGRStyleTable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edi]
	mov	esi, ecx
	push	-1
	lea	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	push	0
	lea	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [ecx+20], 15			; 0000000fH
	mov	DWORD PTR [ecx+16], 0
	push	edx
	mov	BYTE PTR [ecx], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], eax
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0OGRStyleTable@@QAE@ABV0@@Z ENDP			; OGRStyleTable::OGRStyleTable
_TEXT	ENDS
PUBLIC	_this$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z ; vtMaterialDescriptorArray3d::CreateSelfColoredMaterial
EXTRN	?AppendMaterial@vtMaterialArray@@QAEHPAVvtMaterial@@@Z:PROC ; vtMaterialArray::AppendMaterial
EXTRN	?SetTransparent@vtMaterial@@QAEX_N0@Z:PROC	; vtMaterial::SetTransparent
EXTRN	?SetClamp@vtMaterial@@QAEX_N@Z:PROC		; vtMaterial::SetClamp
EXTRN	?SetTexture@vtMaterial@@QAEXPAVImage@osg@@@Z:PROC ; vtMaterial::SetTexture
;	COMDAT xdata$x
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\structure.h
xdata$x	SEGMENT
__unwindtable$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$1
__ehfuncinfo$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
_TEXT	SEGMENT
_color$ = -68						; size = 12
tv383 = -56						; size = 4
_this$GSCopy$ = -52					; size = 4
_path$ = -48						; size = 4
$T245004 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_descriptor$ = 8					; size = 4
?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z PROC ; vtMaterialDescriptorArray3d::CreateSelfColoredMaterial, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 569
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 570
	fld1
	mov	esi, DWORD PTR _descriptor$[ebp]
; Line 571
	lea	eax, DWORD PTR _color$[ebp]
	fst	DWORD PTR _color$[ebp]
	push	eax
	fst	DWORD PTR _color$[ebp+4]
	push	esi
	fstp	DWORD PTR _color$[ebp+8]
; Line 578
	mov	DWORD PTR _this$GSCopy$[ebp], ecx
	call	?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z ; vtMaterialDescriptorArray3d::MakeMaterial
	mov	edi, eax
	mov	eax, DWORD PTR [esi+12]
	push	eax
	call	?vtGetDataPath@@YAAAV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@XZ ; vtGetDataPath
	push	eax
	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	?FindFileOnPaths@@YA?AVvtString@@ABV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@PBD@Z ; FindFileOnPaths
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _path$[ebp]
	xor	ebx, ebx
	mov	eax, ecx
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	mov	DWORD PTR $T245004[ebp+20], 15		; 0000000fH
	mov	DWORD PTR $T245004[ebp+16], ebx
	mov	BYTE PTR $T245004[ebp], bl
	mov	DWORD PTR tv383[ebp], edx
	npad	5
$LL74@CreateSelf:
; Line 574
	mov	dl, BYTE PTR [eax]
	inc	eax
	cmp	dl, bl
	jne	SHORT $LL74@CreateSelf
	sub	eax, DWORD PTR tv383[ebp]
	push	eax
	push	ecx
	lea	ecx, DWORD PTR $T245004[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	ebx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	DWORD PTR __imp_?instance@Registry@osgDB@@SAPAV12@_N@Z
	add	esp, 4
	mov	ecx, eax
	call	DWORD PTR __imp_?getOptions@Registry@osgDB@@QAEPAVOptions@2@XZ
	push	eax
	lea	eax, DWORD PTR $T245004[ebp]
	push	eax
	call	DWORD PTR __imp_?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBVOptions@1@@Z
	add	esp, 8
	push	eax
	mov	ecx, edi
	call	?SetTexture@vtMaterial@@QAEXPAVImage@osg@@@Z ; vtMaterial::SetTexture
	cmp	DWORD PTR $T245004[ebp+20], 16		; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+8], bl
	jb	SHORT $LN56@CreateSelf
	mov	ecx, DWORD PTR $T245004[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN56@CreateSelf:
; Line 575
	push	ebx
	mov	ecx, edi
	mov	DWORD PTR $T245004[ebp+20], 15		; 0000000fH
	mov	DWORD PTR $T245004[ebp+16], ebx
	mov	BYTE PTR $T245004[ebp], bl
	call	?SetClamp@vtMaterial@@QAEX_N@Z		; vtMaterial::SetClamp
; Line 577
	cmp	BYTE PTR [esi+32], bl
	je	SHORT $LN1@CreateSelf
; Line 578
	push	ebx
	push	1
	mov	ecx, edi
	call	?SetTransparent@vtMaterial@@QAEX_N0@Z	; vtMaterial::SetTransparent
$LN1@CreateSelf:
; Line 580
	mov	edx, DWORD PTR _this$GSCopy$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	push	edi
	call	?AppendMaterial@vtMaterialArray@@QAEHPAVvtMaterial@@@Z ; vtMaterialArray::AppendMaterial
; Line 581
	lea	ecx, DWORD PTR _path$[ebp]
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtString@@QAE@XZ			; vtString::~vtString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$0:
	lea	ecx, DWORD PTR _path$[ebp]
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__unwindfunclet$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$1:
	lea	ecx, DWORD PTR $T245004[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z ENDP ; vtMaterialDescriptorArray3d::CreateSelfColoredMaterial
PUBLIC	??_C@_0BH@BIKKBLP@?6?7Missing?5texture?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	_this$GSCopy$
PUBLIC	_descriptor$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z ; vtMaterialDescriptorArray3d::CreateColorableTextureMaterial
EXTRN	?SetMipMap@vtMaterial@@QAEX_N@Z:PROC		; vtMaterial::SetMipMap
EXTRN	??0vtString@@QAE@ABV0@@Z:PROC			; vtString::vtString
;	COMDAT ??_C@_0BH@BIKKBLP@?6?7Missing?5texture?3?5?$CFs?6?$AA@
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
CONST	SEGMENT
??_C@_0BH@BIKKBLP@?6?7Missing?5texture?3?5?$CFs?6?$AA@ DB 0aH, 09H, 'Miss'
	DB	'ing texture: %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$3
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
_TEXT	SEGMENT
_img$ = -64						; size = 4
_this$GSCopy$ = -60					; size = 4
_descriptor$GSCopy$ = -56				; size = 4
_path$ = -52						; size = 4
_source$ = -48						; size = 4
$T245018 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_descriptor$ = 8					; size = 4
?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z PROC ; vtMaterialDescriptorArray3d::CreateColorableTextureMaterial, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 584
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR _descriptor$[ebp]
; Line 608
	mov	DWORD PTR _descriptor$GSCopy$[ebp], eax
	mov	esi, ecx
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _this$GSCopy$[ebp], esi
	call	??0vtString@@QAE@ABV0@@Z		; vtString::vtString
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	?vtGetDataPath@@YAAAV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@XZ ; vtGetDataPath
	push	eax
	lea	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	?FindFileOnPaths@@YA?AVvtString@@ABV?$vector@VvtString@@V?$allocator@VvtString@@@std@@@std@@PBD@Z ; FindFileOnPaths
	add	esp, 12					; 0000000cH
	mov	ebx, DWORD PTR _path$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, ebx
	npad	3
$LL100@CreateColo:
; Line 587
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN101@CreateColo
	test	dl, dl
	je	SHORT $LN102@CreateColo
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN101@CreateColo
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL100@CreateColo
$LN102@CreateColo:
	xor	eax, eax
	jmp	SHORT $LN103@CreateColo
$LN101@CreateColo:
	sbb	eax, eax
	sbb	eax, -1
$LN103@CreateColo:
	test	eax, eax
	jne	SHORT $LN6@CreateColo
; Line 589
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	push	OFFSET ??_C@_0BH@BIKKBLP@?6?7Missing?5texture?3?5?$CFs?6?$AA@
	push	OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Printf@vtLog@@QAAXPBDZZ		; vtLog::Printf
	add	esp, 12					; 0000000cH
; Line 590
	jmp	$LN92@CreateColo
$LN6@CreateColo:
; Line 592
	mov	edi, 15					; 0000000fH
	mov	eax, ebx
	mov	DWORD PTR $T245018[ebp+20], edi
	mov	DWORD PTR $T245018[ebp+16], 0
	mov	BYTE PTR $T245018[ebp], 0
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL104@CreateColo:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL104@CreateColo
	sub	eax, edx
	push	eax
	push	ebx
	lea	ecx, DWORD PTR $T245018[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	call	DWORD PTR __imp_?instance@Registry@osgDB@@SAPAV12@_N@Z
	add	esp, 4
	mov	ecx, eax
	call	DWORD PTR __imp_?getOptions@Registry@osgDB@@QAEPAVOptions@2@XZ
	push	eax
	lea	eax, DWORD PTR $T245018[ebp]
	push	eax
	call	DWORD PTR __imp_?readImageFile@osgDB@@YAPAVImage@osg@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBVOptions@1@@Z
	mov	ebx, eax
	add	esp, 8
	mov	DWORD PTR _img$[ebp], ebx
	test	ebx, ebx
	je	SHORT $LN60@CreateColo
	lea	ecx, DWORD PTR [ebx+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN60@CreateColo:
	cmp	DWORD PTR $T245018[ebp+20], 16		; 00000010H
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	jb	SHORT $LN72@CreateColo
	mov	ecx, DWORD PTR $T245018[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN72@CreateColo:
	mov	DWORD PTR $T245018[ebp+20], edi
	xor	edi, edi
	mov	DWORD PTR $T245018[ebp+16], edi
	mov	BYTE PTR $T245018[ebp], 0
; Line 594
	jmp	SHORT $LN5@CreateColo
	npad	2
$LL105@CreateColo:
	mov	esi, DWORD PTR _this$GSCopy$[ebp]
$LN5@CreateColo:
; Line 596
	mov	ecx, DWORD PTR _descriptor$GSCopy$[ebp]
	lea	edx, DWORD PTR [edi+edi*2+6]
	lea	eax, DWORD PTR [esi+edx*4]
	push	eax
	push	ecx
	mov	ecx, esi
	call	?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z ; vtMaterialDescriptorArray3d::MakeMaterial
	mov	esi, eax
; Line 597
	push	ebx
	mov	ecx, esi
	call	?SetTexture@vtMaterial@@QAEXPAVImage@osg@@@Z ; vtMaterial::SetTexture
; Line 598
	push	1
	mov	ecx, esi
	call	?SetMipMap@vtMaterial@@QAEX_N@Z		; vtMaterial::SetMipMap
; Line 599
	push	0
	mov	ecx, esi
	call	?SetClamp@vtMaterial@@QAEX_N@Z		; vtMaterial::SetClamp
; Line 601
	mov	edx, DWORD PTR _descriptor$GSCopy$[ebp]
	cmp	BYTE PTR [edx+32], 0
	je	SHORT $LN2@CreateColo
; Line 602
	push	0
	push	1
	mov	ecx, esi
	call	?SetTransparent@vtMaterial@@QAEX_N0@Z	; vtMaterial::SetTransparent
$LN2@CreateColo:
; Line 604
	mov	eax, DWORD PTR _this$GSCopy$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	esi
	call	?AppendMaterial@vtMaterialArray@@QAEHPAVvtMaterial@@@Z ; vtMaterialArray::AppendMaterial
; Line 605
	test	edi, edi
	jne	SHORT $LN4@CreateColo
; Line 606
	mov	ecx, DWORD PTR _descriptor$GSCopy$[ebp]
	mov	DWORD PTR [ecx+36], eax
$LN4@CreateColo:
; Line 594
	inc	edi
	cmp	edi, 216				; 000000d8H
	jl	SHORT $LL105@CreateColo
; Line 608
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	test	ebx, ebx
	je	SHORT $LN92@CreateColo
	mov	ecx, ebx
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN92@CreateColo:
	lea	ecx, DWORD PTR _path$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	call	??1vtString@@QAE@XZ			; vtString::~vtString
	lea	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtString@@QAE@XZ			; vtString::~vtString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$0:
	lea	ecx, DWORD PTR _source$[ebp]
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$1:
	lea	ecx, DWORD PTR _path$[ebp]
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$2:
	lea	ecx, DWORD PTR $T245018[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z$3:
	lea	ecx, DWORD PTR _img$[ebp]
	jmp	??1?$ref_ptr@VImage@osg@@@osg@@QAE@XZ	; osg::ref_ptr<osg::Image>::~ref_ptr<osg::Image>
__ehhandler$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z ENDP ; vtMaterialDescriptorArray3d::CreateColorableTextureMaterial
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 762
	push	ebp
	mov	ebp, esp
; Line 763
	mov	eax, DWORD PTR __Right$[ebp]
	push	-1
	push	0
	push	eax
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 764
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
; Function compile flags: /Ogtp
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx
; Line 777
	push	ebp
	mov	ebp, esp
; Line 778
	mov	eax, DWORD PTR __Right$[ebp]
	push	-1
	push	0
	push	eax
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; Line 779
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	00H
__ehfuncinfo$?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Tmp$375668 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap, COMDAT
; _this$ = ecx
; Line 1588
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[ebp]
; Line 1589
	cmp	eax, ecx
	je	SHORT $LN86@swap
; Line 1597
	mov	ebx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$375668[ebp+12], ebx
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebx
	mov	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebx
	mov	ebx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Tmp$375668[ebp+12]
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx+12], edx
; Line 1598
	mov	esi, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [eax+16], esi
	mov	DWORD PTR [ecx+16], edx
; Line 1599
	mov	esi, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [eax+20], esi
	mov	DWORD PTR [ecx+20], edx
; Line 1607
$LN86@swap:
; Line 1608
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap
PUBLIC	??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<osg::ref_ptr<vtMaterial> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<osg::ref_ptr<vtMaterial> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 95
	push	ebp
	mov	ebp, esp
	push	esi
; Line 96
	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	esi, edi
	je	SHORT $LN1@Destroy_ra
	npad	1
$LL3@Destroy_ra:
; Line 97
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN15@Destroy_ra
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN15@Destroy_ra:
	mov	DWORD PTR [esi], 0
	add	esi, 4
	cmp	esi, edi
	jne	SHORT $LL3@Destroy_ra
$LN1@Destroy_ra:
	pop	edi
	pop	esi
; Line 98
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<osg::ref_ptr<vtMaterial> > >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
;	COMDAT xdata$x
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$3
__unwindtable$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T376013 = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 424
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 427
	mov	esi, DWORD PTR __Dest$[ebp]
; Line 429
	mov	edi, DWORD PTR __First$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR __Next$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
	npad	7
$LL6@Uninit_mov:
; Line 430
	cmp	edi, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov
; Line 431
	mov	DWORD PTR $T376013[ebp], esi
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	esi, ebx
	je	SHORT $LN30@Uninit_mov
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	cmp	eax, ebx
	je	SHORT $LN30@Uninit_mov
	lea	ecx, DWORD PTR [eax+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN30@Uninit_mov:
	add	esi, 4
	mov	BYTE PTR __$EHRec$[ebp+12], bl
	mov	DWORD PTR __Dest$[ebp], esi
	add	edi, 4
	jmp	SHORT $LL6@Uninit_mov
__catch$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:
; Line 433
	mov	esi, DWORD PTR __Next$[ebp]
	mov	edi, DWORD PTR __Dest$[ebp]
	cmp	esi, edi
	je	SHORT $LN1@Uninit_mov
	mov	ebx, DWORD PTR __Al$[ebp]
	npad	4
$LL3@Uninit_mov:
; Line 434
	push	esi
	push	ebx
	call	??$_Dest_val@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V?$ref_ptr@VvtMaterial@@@osg@@@std@@YAXAAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@PAV?$ref_ptr@VvtMaterial@@@osg@@@Z ; std::_Dest_val<std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
	add	esi, 4
	add	esp, 8
	cmp	esi, edi
	jne	SHORT $LL3@Uninit_mov
$LN1@Uninit_mov:
; Line 435
	xor	ebx, ebx
	push	ebx
	push	ebx
	call	__CxxThrowException@8
$LN4@Uninit_mov:
; Line 437
	mov	eax, esi
; Line 438
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@Uninit_mov:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T376013[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
PUBLIC	??4CPLString@@QAEAAV0@ABV0@@Z			; CPLString::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4CPLString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CPLString@@QAEAAV0@ABV0@@Z PROC			; CPLString::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	esi
	push	-1
	push	0
	push	eax
	mov	esi, ecx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??4CPLString@@QAEAAV0@ABV0@@Z ENDP			; CPLString::operator=
_TEXT	ENDS
PUBLIC	??4OGRStyleTable@@QAEAAV0@ABV0@@Z		; OGRStyleTable::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4OGRStyleTable@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4OGRStyleTable@@QAEAAV0@ABV0@@Z PROC			; OGRStyleTable::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edi]
	mov	esi, ecx
	push	-1
	push	0
	lea	ecx, DWORD PTR [edi+4]
	push	ecx
	lea	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	mov	edx, DWORD PTR [edi+32]
	pop	edi
	mov	DWORD PTR [esi+32], edx
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??4OGRStyleTable@@QAEAAV0@ABV0@@Z ENDP			; OGRStyleTable::operator=
_TEXT	ENDS
PUBLIC	??_C@_0BI@BCBNNIAP@?5done?5in?5?$CF?43f?5seconds?4?6?$AA@ ; `string'
PUBLIC	__real@408f400000000000
PUBLIC	??_C@_04HGMFEN@?5?$CFs?0?$AA@			; `string'
PUBLIC	??_C@_0BF@HMFKKILD@Creating?5Materials?3?6?$AA@	; `string'
PUBLIC	?CreateMaterials@vtMaterialDescriptorArray3d@@QAEXXZ ; vtMaterialDescriptorArray3d::CreateMaterials
EXTRN	__imp__clock:PROC
EXTRN	?Log@vtLog@@QAEXPBD@Z:PROC			; vtLog::Log
;	COMDAT ??_C@_0BI@BCBNNIAP@?5done?5in?5?$CF?43f?5seconds?4?6?$AA@
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\ref_ptr
CONST	SEGMENT
??_C@_0BI@BCBNNIAP@?5done?5in?5?$CF?43f?5seconds?4?6?$AA@ DB ' done in %.'
	DB	'3f seconds.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT ??_C@_04HGMFEN@?5?$CFs?0?$AA@
CONST	SEGMENT
??_C@_04HGMFEN@?5?$CFs?0?$AA@ DB ' %s,', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HMFKKILD@Creating?5Materials?3?6?$AA@
CONST	SEGMENT
??_C@_0BF@HMFKKILD@Creating?5Materials?3?6?$AA@ DB 'Creating Materials:', 0aH
	DB	00H						; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?CreateMaterials@vtMaterialDescriptorArray3d@@QAEXXZ
_TEXT	SEGMENT
$T376066 = -32						; size = 12
$T376067 = -18						; size = 6
tv284 = -12						; size = 4
_clock1$ = -12						; size = 4
_iSize$ = -8						; size = 4
tv297 = -4						; size = 4
tv295 = -4						; size = 4
tv293 = -4						; size = 4
_j$ = -4						; size = 4
?CreateMaterials@vtMaterialDescriptorArray3d@@QAEXXZ PROC ; vtMaterialDescriptorArray3d::CreateMaterials, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 523
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	edi
	mov	edi, ecx
; Line 524
	push	OFFSET ??_C@_0BF@HMFKKILD@Creating?5Materials?3?6?$AA@
	mov	ecx, OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Log@vtLog@@QAEXPBD@Z			; vtLog::Log
; Line 525
	call	DWORD PTR __imp__clock
	mov	DWORD PTR _clock1$[ebp], eax
; Line 530
	mov	eax, DWORD PTR [edi+4]
; Line 532
	xor	ebx, ebx
	mov	BYTE PTR [edi+20], 1
	mov	DWORD PTR _iSize$[ebp], eax
	mov	DWORD PTR _j$[ebp], ebx
	test	eax, eax
	jle	$LN12@CreateMate
	push	esi
	npad	6
$LL14@CreateMate:
; Line 534
	mov	eax, DWORD PTR [edi+12]
	mov	esi, DWORD PTR [eax+ebx*4]
; Line 535
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_04HGMFEN@?5?$CFs?0?$AA@
	push	OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Printf@vtLog@@QAAXPBDZZ		; vtLog::Printf
; Line 537
	mov	eax, DWORD PTR [esi+8]
	add	esp, 12					; 0000000cH
	cmp	eax, 3
	ja	$LN13@CreateMate
	jmp	DWORD PTR $LN47@CreateMate[eax*4]
$LN9@CreateMate:
; Line 540
	mov	eax, DWORD PTR [esi+24]
	movsx	edx, ax
	mov	DWORD PTR tv297[ebp], edx
	mov	DWORD PTR $T376067[ebp], eax
	shr	eax, 16					; 00000010H
	fild	DWORD PTR tv297[ebp]
	cwde
	fld	QWORD PTR __real@406fe00000000000
	fdiv	ST(1), ST(0)
	mov	DWORD PTR tv295[ebp], eax
	movsx	ecx, WORD PTR [esi+28]
	lea	edx, DWORD PTR $T376066[ebp]
	push	edx
	push	esi
	fxch	ST(1)
	fstp	DWORD PTR $T376066[ebp]
	fild	DWORD PTR tv295[ebp]
	mov	DWORD PTR tv293[ebp], ecx
	mov	ecx, edi
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR $T376066[ebp+4]
	fild	DWORD PTR tv293[ebp]
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T376066[ebp+8]
	call	?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z ; vtMaterialDescriptorArray3d::MakeMaterial
; Line 541
	mov	ecx, DWORD PTR [edi+16]
	push	eax
	call	?AppendMaterial@vtMaterialArray@@QAEHPAVvtMaterial@@@Z ; vtMaterialArray::AppendMaterial
	mov	DWORD PTR [esi+36], eax
; Line 542
	jmp	SHORT $LN13@CreateMate
$LN8@CreateMate:
; Line 545
	xor	ebx, ebx
$LL7@CreateMate:
; Line 547
	lea	eax, DWORD PTR [ebx+ebx*2+6]
	lea	ecx, DWORD PTR [edi+eax*4]
	push	ecx
	push	esi
	mov	ecx, edi
	call	?MakeMaterial@vtMaterialDescriptorArray3d@@QAEPAVvtMaterial@@PAVvtMaterialDescriptor@@ABVRGBf@@@Z ; vtMaterialDescriptorArray3d::MakeMaterial
; Line 549
	mov	ecx, DWORD PTR [edi+16]
	push	eax
	test	ebx, ebx
	jne	SHORT $LN4@CreateMate
	call	?AppendMaterial@vtMaterialArray@@QAEHPAVvtMaterial@@@Z ; vtMaterialArray::AppendMaterial
	mov	DWORD PTR [esi+36], eax
; Line 550
	jmp	SHORT $LN6@CreateMate
$LN4@CreateMate:
; Line 551
	call	?AppendMaterial@vtMaterialArray@@QAEHPAVvtMaterial@@@Z ; vtMaterialArray::AppendMaterial
$LN6@CreateMate:
; Line 545
	inc	ebx
	cmp	ebx, 216				; 000000d8H
	jl	SHORT $LL7@CreateMate
; Line 553
	mov	ebx, DWORD PTR _j$[ebp]
	jmp	SHORT $LN13@CreateMate
$LN2@CreateMate:
; Line 556
	push	esi
	mov	ecx, edi
	call	?CreateSelfColoredMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z ; vtMaterialDescriptorArray3d::CreateSelfColoredMaterial
; Line 557
	jmp	SHORT $LN13@CreateMate
$LN1@CreateMate:
; Line 560
	push	esi
	mov	ecx, edi
	call	?CreateColorableTextureMaterial@vtMaterialDescriptorArray3d@@IAEXPAVvtMaterialDescriptor@@@Z ; vtMaterialDescriptorArray3d::CreateColorableTextureMaterial
$LN13@CreateMate:
; Line 532
	inc	ebx
	mov	DWORD PTR _j$[ebp], ebx
	cmp	ebx, DWORD PTR _iSize$[ebp]
	jl	$LL14@CreateMate
	pop	esi
$LN12@CreateMate:
; Line 564
	call	DWORD PTR __imp__clock
; Line 565
	sub	eax, DWORD PTR _clock1$[ebp]
	sub	esp, 8
	mov	DWORD PTR tv284[ebp], eax
	fild	DWORD PTR tv284[ebp]
	fdiv	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_0BI@BCBNNIAP@?5done?5in?5?$CF?43f?5seconds?4?6?$AA@
	push	OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Printf@vtLog@@QAAXPBDZZ		; vtLog::Printf
	add	esp, 16					; 00000010H
	pop	edi
	pop	ebx
; Line 566
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN47@CreateMate:
	DD	$LN9@CreateMate
	DD	$LN8@CreateMate
	DD	$LN2@CreateMate
	DD	$LN1@CreateMate
?CreateMaterials@vtMaterialDescriptorArray3d@@QAEXXZ ENDP ; vtMaterialDescriptorArray3d::CreateMaterials
_TEXT	ENDS
PUBLIC	??_C@_04LKDPIAGM@Wire?$AA@			; `string'
PUBLIC	??_C@_09EDNNHPMP@Highlight?$AA@			; `string'
PUBLIC	?FindMatIndex@vtMaterialDescriptorArray3d@@QAEHABVvtString@@ABVRGBf@@H@Z ; vtMaterialDescriptorArray3d::FindMatIndex
;	COMDAT ??_C@_04LKDPIAGM@Wire?$AA@
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtdata\mathtypes.h
CONST	SEGMENT
??_C@_04LKDPIAGM@Wire?$AA@ DB 'Wire', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDNNHPMP@Highlight?$AA@
CONST	SEGMENT
??_C@_09EDNNHPMP@Highlight?$AA@ DB 'Highlight', 00H	; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?FindMatIndex@vtMaterialDescriptorArray3d@@QAEHABVvtString@@ABVRGBf@@H@Z
_TEXT	SEGMENT
$T376128 = -14						; size = 6
$T376129 = -8						; size = 6
_this$ = -8						; size = 4
_error$ = 8						; size = 4
_Material$ = 8						; size = 4
_bestError$ = 12					; size = 4
_inputColor$ = 12					; size = 4
_iIndex$ = 16						; size = 4
_iType$ = 16						; size = 4
?FindMatIndex@vtMaterialDescriptorArray3d@@QAEHABVvtString@@ABVRGBf@@H@Z PROC ; vtMaterialDescriptorArray3d::FindMatIndex, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 618
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, ecx
; Line 619
	cmp	BYTE PTR [ebx+20], 0
	push	esi
	mov	DWORD PTR _this$[ebp], ebx
	jne	SHORT $LN14@FindMatInd
; Line 622
	call	?CreateMaterials@vtMaterialDescriptorArray3d@@QAEXXZ ; vtMaterialDescriptorArray3d::CreateMaterials
$LN14@FindMatInd:
; Line 626
	mov	eax, DWORD PTR _Material$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	ecx, OFFSET ??_C@_09EDNNHPMP@Highlight?$AA@
	mov	eax, esi
$LL53@FindMatInd:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN54@FindMatInd
	test	dl, dl
	je	SHORT $LN55@FindMatInd
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN54@FindMatInd
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL53@FindMatInd
$LN55@FindMatInd:
	xor	eax, eax
	jmp	SHORT $LN56@FindMatInd
$LN54@FindMatInd:
	sbb	eax, eax
	sbb	eax, -1
$LN56@FindMatInd:
	test	eax, eax
	jne	$LN9@FindMatInd
; Line 629
	mov	ecx, DWORD PTR _inputColor$[ebp]
	fld	DWORD PTR [ecx]
	fld1
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@FindMatInd
	fld	DWORD PTR [ecx+4]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@FindMatInd
	fld	DWORD PTR [ecx+8]
	fld	ST(1)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN12@FindMatInd
; Line 630
	mov	eax, DWORD PTR [ebx+2616]
	fstp	ST(0)
	pop	esi
	pop	ebx
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN12@FindMatInd:
; Line 631
	fld	DWORD PTR [ecx]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@FindMatInd
	fld	DWORD PTR [ecx+4]
	fldz
	fld	ST(0)
	fucomp	ST(2)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jp	SHORT $LN71@FindMatInd
	fld	DWORD PTR [ecx+8]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@FindMatInd
; Line 632
	mov	eax, DWORD PTR [ebx+2620]
	pop	esi
	pop	ebx
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN71@FindMatInd:
; Line 631
	fstp	ST(0)
$LN10@FindMatInd:
; Line 634
	mov	eax, DWORD PTR [ebx+2624]
	pop	esi
	pop	ebx
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN9@FindMatInd:
; Line 636
	mov	ecx, OFFSET ??_C@_04LKDPIAGM@Wire?$AA@
	mov	eax, esi
	npad	1
$LL57@FindMatInd:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN58@FindMatInd
	test	dl, dl
	je	SHORT $LN59@FindMatInd
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN58@FindMatInd
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL57@FindMatInd
$LN59@FindMatInd:
	xor	eax, eax
	jmp	SHORT $LN60@FindMatInd
$LN58@FindMatInd:
	sbb	eax, eax
	sbb	eax, -1
$LN60@FindMatInd:
	test	eax, eax
	jne	SHORT $LN8@FindMatInd
; Line 638
	mov	eax, DWORD PTR [ebx+2628]
	pop	esi
	pop	ebx
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN8@FindMatInd:
; Line 642
	mov	ecx, DWORD PTR _iType$[ebp]
	mov	edx, DWORD PTR _Material$[ebp]
	push	edi
	mov	edi, DWORD PTR _inputColor$[ebp]
	push	ecx
	push	edi
	push	edx
	mov	ecx, ebx
	call	?FindMaterialDescriptor@vtMaterialDescriptorArray3d@@QBEPAVvtMaterialDescriptor@@ABVvtString@@ABVRGBf@@H@Z ; vtMaterialDescriptorArray3d::FindMaterialDescriptor
; Line 644
	test	eax, eax
	jne	SHORT $LN7@FindMatInd
; Line 645
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@FindMatInd:
; Line 646
	mov	ecx, DWORD PTR [eax+36]
; Line 647
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _iIndex$[ebp], ecx
; Line 649
	test	eax, eax
; Line 650
	je	SHORT $LN77@FindMatInd
; Line 652
	cmp	eax, 2
	jne	SHORT $LN5@FindMatInd
$LN77@FindMatInd:
	pop	edi
	pop	esi
; Line 653
	mov	eax, ecx
	pop	ebx
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN5@FindMatInd:
; Line 657
	fld	DWORD PTR __real@4cbebc20
; Line 658
	or	ebx, -1
	fstp	DWORD PTR _bestError$[ebp]
; Line 661
	xor	esi, esi
; Line 663
	fld	DWORD PTR [edi]
	fld	QWORD PTR __real@406ffff7c0000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	fld	DWORD PTR [edi+4]
	fmul	ST(0), ST(1)
	mov	WORD PTR $T376128[ebp], ax
	call	__ftol2_sse
	fld	DWORD PTR [edi+8]
	fmul	ST(0), ST(1)
	mov	WORD PTR $T376128[ebp+2], ax
	call	__ftol2_sse
	mov	edi, DWORD PTR _this$[ebp]
	mov	WORD PTR $T376128[ebp+4], ax
	add	edi, 32					; 00000020H
	jmp	SHORT $LN4@FindMatInd
	npad	1
$LL61@FindMatInd:
; Line 657
	fld	QWORD PTR __real@406ffff7c0000000
$LN4@FindMatInd:
; Line 663
	fld	DWORD PTR [edi-8]
	fmul	ST(0), ST(1)
	call	__ftol2_sse
	fld	DWORD PTR [edi-4]
	fmul	ST(0), ST(1)
	mov	WORD PTR $T376129[ebp], ax
	call	__ftol2_sse
	fmul	DWORD PTR [edi]
	mov	WORD PTR $T376129[ebp+2], ax
	call	__ftol2_sse
	mov	WORD PTR $T376129[ebp+4], ax
	lea	eax, DWORD PTR $T376128[ebp]
	push	eax
	lea	ecx, DWORD PTR $T376129[ebp]
	push	ecx
	call	?ColorDiff@@YAMABVRGBi@@0@Z		; ColorDiff
	fstp	DWORD PTR _error$[ebp]
; Line 664
	fld	DWORD PTR _error$[ebp]
	add	esp, 8
	fld	DWORD PTR _bestError$[ebp]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN75@FindMatInd
; Line 666
	mov	edx, DWORD PTR _iIndex$[ebp]
; Line 667
	fstp	DWORD PTR _bestError$[ebp]
	lea	ebx, DWORD PTR [esi+edx]
	jmp	SHORT $LN3@FindMatInd
$LN75@FindMatInd:
	fstp	ST(0)
$LN3@FindMatInd:
; Line 661
	inc	esi
	add	edi, 12					; 0000000cH
	cmp	esi, 216				; 000000d8H
	jl	SHORT $LL61@FindMatInd
; Line 670
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
; Line 671
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindMatIndex@vtMaterialDescriptorArray3d@@QAEHABVvtString@@ABVRGBf@@H@Z ENDP ; vtMaterialDescriptorArray3d::FindMatIndex
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogtp
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 713
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 714
	mov	edi, DWORD PTR __Right$[ebp]
	mov	esi, ecx
	cmp	esi, edi
	je	SHORT $LN63@assign@7
; Line 721
	cmp	DWORD PTR [esi+20], 16			; 00000010H
	jb	SHORT $LN33@assign@7
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN33@assign@7:
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	mov	BYTE PTR [esi], 0
; Line 722
	cmp	DWORD PTR [edi+20], 16			; 00000010H
	jae	SHORT $LN2@assign@7
; Line 724
	mov	ecx, DWORD PTR [edi+16]
	inc	ecx
	push	ecx
	push	edi
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; Line 725
	jmp	SHORT $LN1@assign@7
$LN2@assign@7:
; Line 727
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi], edx
; Line 728
	mov	DWORD PTR [edi], 0
$LN1@assign@7:
; Line 730
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; Line 731
	mov	ecx, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], ecx
; Line 733
	mov	DWORD PTR [edi+20], 15			; 0000000fH
	mov	DWORD PTR [edi+16], 0
	mov	BYTE PTR [edi], 0
$LN63@assign@7:
; Line 735
	pop	edi
	mov	eax, esi
	pop	esi
; Line 736
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap
; Function compile flags: /Ogtp
;	COMDAT ?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap, COMDAT
; _this$ = ecx
; Line 739
	push	ebp
	mov	ebp, esp
; Line 740
	mov	eax, DWORD PTR __Right$[ebp]
	cmp	ecx, eax
	je	SHORT $LN1@swap@2
; Line 747
	push	eax
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN1@swap@2:
; Line 749
	pop	ebp
	ret	4
?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::shrink_to_fit
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$0
__ehfuncinfo$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
__Tmp$246051 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::shrink_to_fit, COMDAT
; _this$ = ecx
; Line 1411
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
; Line 1412
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, DWORD PTR [esi+20]
	jae	SHORT $LN45@shrink_to_
; Line 1414
	push	-1
	push	0
	push	esi
	lea	ecx, DWORD PTR __Tmp$246051[ebp]
	mov	DWORD PTR __Tmp$246051[ebp+20], 15	; 0000000fH
	mov	DWORD PTR __Tmp$246051[ebp+16], 0
	mov	BYTE PTR __Tmp$246051[ebp], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 1415
	lea	eax, DWORD PTR __Tmp$246051[ebp]
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	?swap@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::swap
; Line 1416
	cmp	DWORD PTR __Tmp$246051[ebp+20], 16	; 00000010H
	jb	SHORT $LN45@shrink_to_
	mov	ecx, DWORD PTR __Tmp$246051[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN45@shrink_to_:
; Line 1417
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ$0:
	lea	ecx, DWORD PTR __Tmp$246051[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?shrink_to_fit@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::shrink_to_fit
PUBLIC	??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z ; std::_Destroy_range<std::allocator<osg::ref_ptr<vtMaterial> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z PROC ; std::_Destroy_range<std::allocator<osg::ref_ptr<vtMaterial> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
; Line 87
	push	ebp
	mov	ebp, esp
	push	esi
; Line 88
	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	esi, edi
	je	SHORT $LN5@Destroy_ra@2
	npad	1
$LL7@Destroy_ra@2:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN19@Destroy_ra@2
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN19@Destroy_ra@2:
	mov	DWORD PTR [esi], 0
	add	esi, 4
	cmp	esi, edi
	jne	SHORT $LL7@Destroy_ra@2
$LN5@Destroy_ra@2:
	pop	edi
	pop	esi
; Line 89
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAXPAV?$ref_ptr@VvtMaterial@@@osg@@0AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<osg::ref_ptr<vtMaterial> > >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z ; std::_Uninitialized_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> > >
; Function compile flags: /Ogtp
;	COMDAT ??$_Uninitialized_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z
_TEXT	SEGMENT
__Cat$376624 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z PROC ; std::_Uninitialized_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
; Line 469
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 471
	mov	eax, DWORD PTR __Cat$376624[ebp]
	mov	ecx, DWORD PTR __Al$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	0
	push	ecx
	mov	ecx, DWORD PTR __First$[ebp]
	push	edx
	push	eax
	push	ecx
	call	??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
	add	esp, 24					; 00000018H
; Line 472
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@@Z ENDP ; std::_Uninitialized_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xstring
; Line 702
	push	ebp
	mov	ebp, esp
; Line 704
	mov	eax, DWORD PTR __Right$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+20], 15			; 0000000fH
	mov	DWORD PTR [esi+16], 0
	push	eax
	mov	BYTE PTR [esi], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Line 705
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Ogtp
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx
; Line 708
	push	ebp
	mov	ebp, esp
; Line 710
	pop	ebp
; Line 709
	jmp	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXPAV?$ref_ptr@VvtMaterial@@@osg@@0@Z ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Destroy
; Function compile flags: /Ogtp
;	COMDAT ?_Destroy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXPAV?$ref_ptr@VvtMaterial@@@osg@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXPAV?$ref_ptr@VvtMaterial@@@osg@@0@Z PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 1269
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1270
	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	esi, edi
	je	SHORT $LN7@Destroy@2
	npad	1
$LL9@Destroy@2:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN21@Destroy@2
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN21@Destroy@2:
	mov	DWORD PTR [esi], 0
	add	esi, 4
	cmp	esi, edi
	jne	SHORT $LL9@Destroy@2
$LN7@Destroy@2:
	pop	edi
	pop	esi
; Line 1271
	pop	ebp
	ret	8
?_Destroy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXPAV?$ref_ptr@VvtMaterial@@@osg@@0@Z ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Tidy
; Function compile flags: /Ogtp
;	COMDAT ?_Tidy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXXZ PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Tidy, COMDAT
; _this$ = ecx
; Line 1301
	push	ebx
	mov	ebx, ecx
	push	esi
; Line 1302
	mov	esi, DWORD PTR [ebx]
	test	esi, esi
	je	SHORT $LN32@Tidy@2
; Line 1305
	push	edi
	mov	edi, DWORD PTR [ebx+4]
	cmp	esi, edi
	je	SHORT $LN12@Tidy@2
$LL14@Tidy@2:
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN26@Tidy@2
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN26@Tidy@2:
	mov	DWORD PTR [esi], 0
	add	esi, 4
	cmp	esi, edi
	jne	SHORT $LL14@Tidy@2
$LN12@Tidy@2:
; Line 1307
	mov	eax, DWORD PTR [ebx]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	edi
$LN32@Tidy@2:
; Line 1309
	xor	eax, eax
	pop	esi
	mov	DWORD PTR [ebx], eax
; Line 1310
	mov	DWORD PTR [ebx+4], eax
; Line 1311
	mov	DWORD PTR [ebx+8], eax
	pop	ebx
; Line 1312
	ret	0
?_Tidy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXXZ ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Umove@PAV?$ref_ptr@VvtMaterial@@@osg@@@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEPAV?$ref_ptr@VvtMaterial@@@osg@@PAV23@00@Z ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Umove<osg::ref_ptr<vtMaterial> *>
; Function compile flags: /Ogtp
;	COMDAT ??$_Umove@PAV?$ref_ptr@VvtMaterial@@@osg@@@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEPAV?$ref_ptr@VvtMaterial@@@osg@@PAV23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$376948 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAV?$ref_ptr@VvtMaterial@@@osg@@@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEPAV?$ref_ptr@VvtMaterial@@@osg@@PAV23@00@Z PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Umove<osg::ref_ptr<vtMaterial> *>, COMDAT
; _this$ = ecx
; Line 1322
	push	ebp
	mov	ebp, esp
; Line 1325
	mov	eax, DWORD PTR __Cat$376948[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	0
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
	add	esp, 24					; 00000018H
; Line 1326
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAV?$ref_ptr@VvtMaterial@@@osg@@@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEPAV?$ref_ptr@VvtMaterial@@@osg@@PAV23@00@Z ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Umove<osg::ref_ptr<vtMaterial> *>
_TEXT	ENDS
PUBLIC	??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
; Function compile flags: /Ogtp
;	COMDAT ??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >, COMDAT
; _this$ = ecx
; Line 705
	jmp	?_Tidy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Tidy
??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
_TEXT	ENDS
PUBLIC	?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$254307 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$377009 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z PROC ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::reserve, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
; Line 746
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
; Line 747
	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@reserve@2
; Line 748
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN5@reserve@2:
; Line 749
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, DWORD PTR [esi]
	sar	ecx, 2
	cmp	ecx, eax
	jae	SHORT $LN3@reserve@2
; Line 751
	lea	edi, DWORD PTR [esi+12]
	push	eax
	mov	ecx, edi
	call	?allocate@?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@QAEPAV?$ref_ptr@VvtMaterial@@@osg@@I@Z ; std::allocator<osg::ref_ptr<vtMaterial> >::allocate
; Line 754
	mov	edx, DWORD PTR __Cat$377009[ebp]
	mov	ecx, DWORD PTR [esi]
	push	edx
	push	0
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+4]
	push	edi
	push	ebx
	push	eax
	push	ecx
	mov	DWORD PTR __Ptr$254307[ebp], ebx
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	??$_Uninit_move@PAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@V12@@std@@YAPAV?$ref_ptr@VvtMaterial@@@osg@@PAV12@00AAV?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<osg::ref_ptr<vtMaterial> *,osg::ref_ptr<vtMaterial> *,std::allocator<osg::ref_ptr<vtMaterial> >,osg::ref_ptr<vtMaterial> >
; Line 760
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	edi, ecx
	sub	edi, eax
	add	esp, 24					; 00000018H
	sar	edi, 2
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	test	eax, eax
	je	SHORT $LN35@reserve@2
; Line 763
	push	ecx
	push	eax
	mov	ecx, esi
	call	?_Destroy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXPAV?$ref_ptr@VvtMaterial@@@osg@@0@Z ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Destroy
; Line 765
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN35@reserve@2:
; Line 769
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [ebx+ecx*4]
; Line 770
	lea	eax, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [esi+4], eax
; Line 771
	mov	DWORD PTR [esi], ebx
$LN3@reserve@2:
; Line 773
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z$0:
; Line 756
	mov	ecx, DWORD PTR __Ptr$254307[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 757
	push	0
	push	0
	call	__CxxThrowException@8
$LN41@reserve@2:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z ENDP ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::reserve
PUBLIC	??_7vtMaterialArray@@6B@			; vtMaterialArray::`vftable'
PUBLIC	??0vtMaterialArray@@QAE@XZ			; vtMaterialArray::vtMaterialArray
PUBLIC	??_R4vtMaterialArray@@6B@			; vtMaterialArray::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVvtMaterialArray@@@8			; vtMaterialArray `RTTI Type Descriptor'
PUBLIC	??_R3vtMaterialArray@@8				; vtMaterialArray::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2vtMaterialArray@@8				; vtMaterialArray::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@vtMaterialArray@@8		; vtMaterialArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AV?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Container_base0@std@@8		; std::_Container_base0::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AU_Container_base0@std@@@8		; std::_Container_base0 `RTTI Type Descriptor'
PUBLIC	??_R3_Container_base0@std@@8			; std::_Container_base0::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Container_base0@std@@8			; std::_Container_base0::`RTTI Base Class Array'
PUBLIC	??_R1M@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@_Container_base0@std@@8		; std::_Container_base0::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Referenced@osg@@8			; osg::Referenced::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVReferenced@osg@@@8			; osg::Referenced `RTTI Type Descriptor'
PUBLIC	??_R3Referenced@osg@@8				; osg::Referenced::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Referenced@osg@@8				; osg::Referenced::`RTTI Base Class Array'
EXTRN	__imp_??0Referenced@osg@@QAE@XZ:PROC
EXTRN	?setThreadSafeRefUnref@Referenced@osg@@UAEX_N@Z:PROC ; osg::Referenced::setThreadSafeRefUnref
EXTRN	??_EvtMaterialArray@@UAEPAXI@Z:PROC		; vtMaterialArray::`vector deleting destructor'
;	COMDAT ??_R2Referenced@osg@@8
rdata$r	SEGMENT
??_R2Referenced@osg@@8 DD FLAT:??_R1A@?0A@EA@Referenced@osg@@8 ; osg::Referenced::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Referenced@osg@@8
rdata$r	SEGMENT
??_R3Referenced@osg@@8 DD 00H				; osg::Referenced::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Referenced@osg@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReferenced@osg@@@8
_DATA	SEGMENT
??_R0?AVReferenced@osg@@@8 DD FLAT:??_7type_info@@6B@	; osg::Referenced `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReferenced@osg@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Referenced@osg@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Referenced@osg@@8 DD FLAT:??_R0?AVReferenced@osg@@@8 ; osg::Referenced::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Referenced@osg@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EA@_Container_base0@std@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@_Container_base0@std@@8 DD FLAT:??_R0?AU_Container_base0@std@@@8 ; std::_Container_base0::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Container_base0@std@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD FLAT:??_R0?AV?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Container_base0@std@@8
rdata$r	SEGMENT
??_R2_Container_base0@std@@8 DD FLAT:??_R1A@?0A@EA@_Container_base0@std@@8 ; std::_Container_base0::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Container_base0@std@@8
rdata$r	SEGMENT
??_R3_Container_base0@std@@8 DD 00H			; std::_Container_base0::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Container_base0@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Container_base0@std@@@8
_DATA	SEGMENT
??_R0?AU_Container_base0@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Container_base0 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Container_base0@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@_Container_base0@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Container_base0@std@@8 DD FLAT:??_R0?AU_Container_base0@std@@@8 ; std::_Container_base0::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Container_base0@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Container_base0@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD 00H ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$alloc'
	DB	'ator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD FLAT:??_R0?AV?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 ; std::_Vector_val<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD FLAT:??_R0?AV?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Container_base0@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD 00H ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@'
	DB	'V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8 DD FLAT:??_R0?AV?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@@8 ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	02H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@vtMaterialArray@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@vtMaterialArray@@8 DD FLAT:??_R0?AVvtMaterialArray@@@8 ; vtMaterialArray::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3vtMaterialArray@@8
rdata$r	ENDS
;	COMDAT ??_R2vtMaterialArray@@8
rdata$r	SEGMENT
??_R2vtMaterialArray@@8 DD FLAT:??_R1A@?0A@EA@vtMaterialArray@@8 ; vtMaterialArray::`RTTI Base Class Array'
	DD	FLAT:??_R1M@?0A@EA@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
	DD	FLAT:??_R1M@?0A@EA@?$_Vector_val@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@8
	DD	FLAT:??_R1M@?0A@EA@_Container_base0@std@@8
	DD	FLAT:??_R1A@?0A@EA@Referenced@osg@@8
rdata$r	ENDS
;	COMDAT ??_R3vtMaterialArray@@8
rdata$r	SEGMENT
??_R3vtMaterialArray@@8 DD 00H				; vtMaterialArray::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2vtMaterialArray@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVvtMaterialArray@@@8
_DATA	SEGMENT
??_R0?AVvtMaterialArray@@@8 DD FLAT:??_7type_info@@6B@	; vtMaterialArray `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVvtMaterialArray@@', 00H
_DATA	ENDS
;	COMDAT ??_R4vtMaterialArray@@6B@
rdata$r	SEGMENT
??_R4vtMaterialArray@@6B@ DD 00H			; vtMaterialArray::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVvtMaterialArray@@@8
	DD	FLAT:??_R3vtMaterialArray@@8
rdata$r	ENDS
;	COMDAT ??_7vtMaterialArray@@6B@
CONST	SEGMENT
??_7vtMaterialArray@@6B@ DD FLAT:??_R4vtMaterialArray@@6B@ ; vtMaterialArray::`vftable'
	DD	FLAT:?setThreadSafeRefUnref@Referenced@osg@@UAEX_N@Z
	DD	FLAT:??_EvtMaterialArray@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0vtMaterialArray@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0vtMaterialArray@@QAE@XZ$0
__ehfuncinfo$??0vtMaterialArray@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0vtMaterialArray@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??0vtMaterialArray@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0vtMaterialArray@@QAE@XZ PROC				; vtMaterialArray::vtMaterialArray, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0vtMaterialArray@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	xor	eax, eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR __$EHRec$[ebp+8], eax
	call	DWORD PTR __imp_??0Referenced@osg@@QAE@XZ
	mov	DWORD PTR [esi], OFFSET ??_7vtMaterialArray@@6B@
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0vtMaterialArray@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
__ehhandler$??0vtMaterialArray@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0vtMaterialArray@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0vtMaterialArray@@QAE@XZ ENDP				; vtMaterialArray::vtMaterialArray
PUBLIC	??1vtMaterialArray@@UAE@XZ			; vtMaterialArray::~vtMaterialArray
EXTRN	__imp_??1Referenced@osg@@MAE@XZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1vtMaterialArray@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1vtMaterialArray@@UAE@XZ$0
__ehfuncinfo$??1vtMaterialArray@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1vtMaterialArray@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??1vtMaterialArray@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1vtMaterialArray@@UAE@XZ PROC				; vtMaterialArray::~vtMaterialArray, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1vtMaterialArray@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	DWORD PTR __imp_??1Referenced@osg@@MAE@XZ
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	?_Tidy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Tidy
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1vtMaterialArray@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
__ehhandler$??1vtMaterialArray@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1vtMaterialArray@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1vtMaterialArray@@UAE@XZ ENDP				; vtMaterialArray::~vtMaterialArray
PUBLIC	__real@3f19999a
PUBLIC	__real@3f59999a
PUBLIC	__real@3f333334
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3ecccccd
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fc3333340000000
PUBLIC	??_C@_0CI@PMMMBCFA@Initializing?5MaterialDescriptorA@ ; `string'
PUBLIC	?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ ; vtMaterialDescriptorArray3d::InitializeMaterials
EXTRN	?AddRGBMaterial@vtMaterialArray@@QAEHABVRGBf@@0_N11MM@Z:PROC ; vtMaterialArray::AddRGBMaterial
EXTRN	?AddRGBMaterial1@vtMaterialArray@@QAEHABVRGBf@@_N11MM@Z:PROC ; vtMaterialArray::AddRGBMaterial1
;	COMDAT __real@3f19999a
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\ref_ptr
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f333334
CONST	SEGMENT
__real@3f333334 DD 03f333334r			; 0.7
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc3333340000000
CONST	SEGMENT
__real@3fc3333340000000 DQ 03fc3333340000000r	; 0.15
CONST	ENDS
;	COMDAT ??_C@_0CI@PMMMBCFA@Initializing?5MaterialDescriptorA@
CONST	SEGMENT
??_C@_0CI@PMMMBCFA@Initializing?5MaterialDescriptorA@ DB 'Initializing Ma'
	DB	'terialDescriptorArray3d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ$1
__ehfuncinfo$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ
_TEXT	SEGMENT
$T377100 = -60						; size = 12
$T377099 = -48						; size = 12
$T377098 = -36						; size = 12
$T377097 = -36						; size = 12
$T377096 = -36						; size = 12
tv765 = -24						; size = 4
$T377093 = -24						; size = 4
tv756 = -20						; size = 4
tv749 = -20						; size = 4
_i$ = -20						; size = 4
_j$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ PROC ; vtMaterialDescriptorArray3d::InitializeMaterials, COMDAT
; _this$ = ecx
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 485
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
; Line 486
	xor	ebx, ebx
	cmp	DWORD PTR [esi+16], ebx
	jne	$LN11@Initialize
; Line 489
	push	OFFSET ??_C@_0CI@PMMMBCFA@Initializing?5MaterialDescriptorA@
	push	OFFSET ?g_Log@@3VvtLog@@A		; g_Log
	call	?Printf@vtLog@@QAAXPBDZZ		; vtLog::Printf
; Line 499
	fldz
	fld	QWORD PTR __real@3fc3333340000000
	add	esp, 8
	fmul	ST(1), ST(0)
	xor	edi, edi
	fld	QWORD PTR __real@3fd0000000000000
	mov	DWORD PTR _i$[ebp], edi
	lea	edx, DWORD PTR [esi+32]
	fadd	ST(2), ST(0)
; Line 507
	fxch	ST(2)
	fstp	DWORD PTR tv765[ebp]
	fld	DWORD PTR __real@3ecccccd
	fld	DWORD PTR __real@3f0ccccd
	fld	DWORD PTR __real@3f333334
	jmp	SHORT $LN9@Initialize
$LN85@Initialize:
; Line 499
	fxch	ST(2)
	fxch	ST(1)
$LN9@Initialize:
	fild	DWORD PTR _i$[ebp]
; Line 500
	xor	ecx, ecx
	mov	eax, edx
	mov	DWORD PTR _j$[ebp], ecx
	fmul	ST(0), ST(4)
	add	edx, 432				; 000001b0H
	fadd	ST(0), ST(5)
	fstp	DWORD PTR tv749[ebp]
	fld	DWORD PTR tv749[ebp]
	jmp	SHORT $LN6@Initialize
$LN81@Initialize:
	fxch	ST(3)
	fxch	ST(2)
	fxch	ST(1)
$LN6@Initialize:
; Line 502
	fst	DWORD PTR [eax-8]
	inc	ecx
	fild	DWORD PTR _j$[ebp]
	add	eax, 72					; 00000048H
	mov	DWORD PTR _j$[ebp], ecx
	fmul	ST(0), ST(5)
	fadd	ST(0), ST(6)
	fstp	DWORD PTR tv756[ebp]
	fld	DWORD PTR tv756[ebp]
	fst	DWORD PTR [eax-76]
	fld	DWORD PTR tv765[ebp]
	fstp	DWORD PTR [eax-72]
	fxch	ST(1)
	fst	DWORD PTR [eax-68]
	fxch	ST(1)
	fst	DWORD PTR [eax-64]
	fxch	ST(4)
	fst	DWORD PTR [eax-60]
	fxch	ST(1)
	fst	DWORD PTR [eax-56]
	fxch	ST(4)
	fst	DWORD PTR [eax-52]
	fxch	ST(3)
	fst	DWORD PTR [eax-48]
	fxch	ST(4)
	fst	DWORD PTR [eax-44]
	fxch	ST(3)
	fst	DWORD PTR [eax-40]
	fxch	ST(2)
	fst	DWORD PTR [eax-36]
	fxch	ST(3)
	fst	DWORD PTR [eax-32]
	fxch	ST(2)
	fst	DWORD PTR [eax-28]
	fld	DWORD PTR __real@3f59999a
	fstp	DWORD PTR [eax-24]
	fxch	ST(2)
	fst	DWORD PTR [eax-20]
	fxch	ST(2)
	fstp	DWORD PTR [eax-16]
	fld1
	fstp	DWORD PTR [eax-12]
	cmp	ecx, 6
	jl	SHORT $LN81@Initialize
; Line 500
	inc	edi
	fstp	ST(1)
	mov	DWORD PTR _i$[ebp], edi
	cmp	edi, 6
	jl	$LN85@Initialize
; Line 507
	fstp	ST(3)
	push	28					; 0000001cH
	fstp	ST(3)
	fstp	ST(1)
	fstp	ST(0)
	fstp	ST(0)
	call	??2@YAPAXI@Z				; operator new
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR $T377093[ebp], edi
	mov	DWORD PTR __$EHRec$[ebp+8], ebx
	cmp	edi, ebx
	je	SHORT $LN13@Initialize
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	mov	DWORD PTR [edi+20], ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	call	DWORD PTR __imp_??0Referenced@osg@@QAE@XZ
	mov	DWORD PTR [edi], OFFSET ??_7vtMaterialArray@@6B@
	jmp	SHORT $LN14@Initialize
$LN13@Initialize:
	xor	edi, edi
$LN14@Initialize:
	mov	ebx, DWORD PTR [esi+16]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	cmp	ebx, edi
	je	SHORT $LN34@Initialize
	mov	DWORD PTR [esi+16], edi
	test	edi, edi
	je	SHORT $LN39@Initialize
	lea	ecx, DWORD PTR [edi+8]
	call	DWORD PTR __imp_??EAtomic@OpenThreads@@QAEIXZ
$LN39@Initialize:
	test	ebx, ebx
	je	SHORT $LN34@Initialize
	mov	ecx, ebx
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN34@Initialize:
; Line 508
	mov	ecx, DWORD PTR [esi+16]
	push	500					; 000001f4H
	add	ecx, 12					; 0000000cH
	call	?reserve@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAEXI@Z ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::reserve
; Line 511
	fld1
	mov	ecx, DWORD PTR [esi+16]
	fst	DWORD PTR $T377096[ebp]
	fst	DWORD PTR $T377096[ebp+4]
	sub	esp, 8
	fst	DWORD PTR $T377096[ebp+8]
	lea	eax, DWORD PTR $T377096[ebp]
	fldz
	fstp	DWORD PTR [esp+4]
	fstp	DWORD PTR [esp]
	push	1
	push	0
	push	0
	push	eax
	call	?AddRGBMaterial1@vtMaterialArray@@QAEHABVRGBf@@_N11MM@Z ; vtMaterialArray::AddRGBMaterial1
; Line 512
	fld1
	mov	ecx, DWORD PTR [esi+16]
	fst	DWORD PTR $T377097[ebp]
	fldz
	sub	esp, 8
	fst	DWORD PTR $T377097[ebp+4]
	lea	edx, DWORD PTR $T377097[ebp]
	fst	DWORD PTR $T377097[ebp+8]
	mov	DWORD PTR [esi+2616], eax
	fstp	DWORD PTR [esp+4]
	fstp	DWORD PTR [esp]
	push	1
	push	0
	push	0
	push	edx
	call	?AddRGBMaterial1@vtMaterialArray@@QAEHABVRGBf@@_N11MM@Z ; vtMaterialArray::AddRGBMaterial1
; Line 513
	fld1
	mov	ecx, DWORD PTR [esi+16]
	fst	DWORD PTR $T377098[ebp]
	fst	DWORD PTR $T377098[ebp+4]
	sub	esp, 8
	fldz
	mov	DWORD PTR [esi+2620], eax
	fst	DWORD PTR $T377098[ebp+8]
	lea	eax, DWORD PTR $T377098[ebp]
	fstp	DWORD PTR [esp+4]
	fstp	DWORD PTR [esp]
	push	1
	push	0
	push	0
	push	eax
	call	?AddRGBMaterial1@vtMaterialArray@@QAEHABVRGBf@@_N11MM@Z ; vtMaterialArray::AddRGBMaterial1
; Line 519
	fld	DWORD PTR __real@3ecccccd
	mov	ecx, DWORD PTR [esi+16]
	fst	DWORD PTR $T377099[ebp]
	fst	DWORD PTR $T377099[ebp+4]
	sub	esp, 8
	fstp	DWORD PTR $T377099[ebp+8]
	lea	edx, DWORD PTR $T377099[ebp]
	fldz
	mov	DWORD PTR [esi+2624], eax
	fst	DWORD PTR $T377100[ebp]
	lea	eax, DWORD PTR $T377100[ebp]
	fst	DWORD PTR $T377100[ebp+4]
	fst	DWORD PTR $T377100[ebp+8]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR __real@3f19999a
	fstp	DWORD PTR [esp]
	push	0
	push	1
	push	0
	push	edx
	push	eax
	call	?AddRGBMaterial@vtMaterialArray@@QAEHABVRGBf@@0_N11MM@Z ; vtMaterialArray::AddRGBMaterial
	mov	DWORD PTR [esi+2628], eax
$LN11@Initialize:
; Line 520
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ$0:
	mov	eax, DWORD PTR $T377093[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ$1:
	mov	ecx, DWORD PTR $T377093[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
__ehhandler$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ ENDP ; vtMaterialDescriptorArray3d::InitializeMaterials
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GvtMaterialArray@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GvtMaterialArray@@UAEPAXI@Z$0
__ehfuncinfo$??_GvtMaterialArray@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GvtMaterialArray@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??_GvtMaterialArray@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GvtMaterialArray@@UAEPAXI@Z PROC			; vtMaterialArray::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_GvtMaterialArray@@UAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	DWORD PTR __imp_??1Referenced@osg@@MAE@XZ
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	?_Tidy@?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@IAEXXZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::_Tidy
	test	BYTE PTR ___flags$[ebp], 1
	je	SHORT $LN12@scalar@35
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN12@scalar@35:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GvtMaterialArray@@UAEPAXI@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@V?$ref_ptr@VvtMaterial@@@osg@@V?$allocator@V?$ref_ptr@VvtMaterial@@@osg@@@std@@@std@@QAE@XZ ; std::vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >::~vector<osg::ref_ptr<vtMaterial>,std::allocator<osg::ref_ptr<vtMaterial> > >
__ehhandler$??_GvtMaterialArray@@UAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_GvtMaterialArray@@UAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_GvtMaterialArray@@UAEPAXI@Z ENDP			; vtMaterialArray::`scalar deleting destructor'
PUBLIC	?InitializeMaterialArrays@vtStructure3d@@SAXXZ	; vtStructure3d::InitializeMaterialArrays
EXTRN	?SetGlobalMaterials@@YAXPAVvtMaterialDescriptorArray@@@Z:PROC ; SetGlobalMaterials
EXTRN	?LoadExternalMaterials@vtMaterialDescriptorArray@@QAE_NXZ:PROC ; vtMaterialDescriptorArray::LoadExternalMaterials
; Function compile flags: /Ogtp
;	COMDAT ?InitializeMaterialArrays@vtStructure3d@@SAXXZ
_TEXT	SEGMENT
?InitializeMaterialArrays@vtStructure3d@@SAXXZ PROC	; vtStructure3d::InitializeMaterialArrays, COMDAT
; Line 721
	cmp	BYTE PTR ?s_bMaterialsLoaded@vtStructure3d@@1_NA, 0 ; vtStructure3d::s_bMaterialsLoaded
	jne	SHORT $LN1@Initialize@2
; Line 725
	mov	ecx, OFFSET ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A ; vtStructure3d::s_MaterialDescriptors
	mov	BYTE PTR ?s_bMaterialsLoaded@vtStructure3d@@1_NA, 1 ; vtStructure3d::s_bMaterialsLoaded
	call	?InitializeMaterials@vtMaterialDescriptorArray3d@@QAEXXZ ; vtMaterialDescriptorArray3d::InitializeMaterials
; Line 728
	mov	ecx, OFFSET ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A ; vtStructure3d::s_MaterialDescriptors
	call	?LoadExternalMaterials@vtMaterialDescriptorArray@@QAE_NXZ ; vtMaterialDescriptorArray::LoadExternalMaterials
; Line 730
	push	OFFSET ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A ; vtStructure3d::s_MaterialDescriptors
	call	?SetGlobalMaterials@@YAXPAVvtMaterialDescriptorArray@@@Z ; SetGlobalMaterials
	pop	ecx
$LN1@Initialize@2:
; Line 732
	ret	0
?InitializeMaterialArrays@vtStructure3d@@SAXXZ ENDP	; vtStructure3d::InitializeMaterialArrays
_TEXT	ENDS
_DATA	SEGMENT
_INVLN_2 DQ	03ff71547652b82fer		; 1.4427
_X_AXIS	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
_Y_AXIS	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
_Z_AXIS	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
EXTRN	_atexit:PROC
_DATA	SEGMENT
_defaultProp DB	00H
	DB	15 DUP(00H)
	DD	00H
	DD	0fH
; Function compile flags: /Ogtp
_DATA	ENDS
;	COMDAT ??__EdefaultProp@osgDB@@YAXXZ
text$yc	SEGMENT
??__EdefaultProp@osgDB@@YAXXZ PROC			; osgDB::`dynamic initializer for 'defaultProp'', COMDAT
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osgdb\datatypes
; Line 109
	push	0
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, OFFSET _defaultProp
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	OFFSET ??__FdefaultProp@osgDB@@YAXXZ	; osgDB::`dynamic atexit destructor for 'defaultProp''
	mov	DWORD PTR _defaultProp+28, 0
	mov	BYTE PTR _defaultProp+32, 0
	call	_atexit
	pop	ecx
	ret	0
??__EdefaultProp@osgDB@@YAXXZ ENDP			; osgDB::`dynamic initializer for 'defaultProp''
text$yc	ENDS
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+12
_BEGIN_BRACKET DB 00H
	DB	15 DUP(00H)
	DD	00H
	DD	0fH
; Function compile flags: /Ogtp
_DATA	ENDS
;	COMDAT ??__EBEGIN_BRACKET@osgDB@@YAXXZ
text$yc	SEGMENT
??__EBEGIN_BRACKET@osgDB@@YAXXZ PROC			; osgDB::`dynamic initializer for 'BEGIN_BRACKET'', COMDAT
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osgdb\datatypes
; Line 131
	push	1
	push	OFFSET ??_C@_01HCONENDN@?$HL?$AA@
	mov	ecx, OFFSET _BEGIN_BRACKET
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	OFFSET ??__FBEGIN_BRACKET@osgDB@@YAXXZ	; osgDB::`dynamic atexit destructor for 'BEGIN_BRACKET''
	mov	DWORD PTR _BEGIN_BRACKET+28, 2
	call	_atexit
	pop	ecx
	ret	0
??__EBEGIN_BRACKET@osgDB@@YAXXZ ENDP			; osgDB::`dynamic initializer for 'BEGIN_BRACKET''
text$yc	ENDS
PUBLIC	??_C@_01CELHOKLL@?$HN?$AA@			; `string'
;	COMDAT ??_C@_01CELHOKLL@?$HN?$AA@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN?$AA@ DB '}', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+8
_END_BRACKET DB	00H
	DB	15 DUP(00H)
	DD	00H
	DD	0fH
; Function compile flags: /Ogtp
_DATA	ENDS
;	COMDAT ??__EEND_BRACKET@osgDB@@YAXXZ
text$yc	SEGMENT
??__EEND_BRACKET@osgDB@@YAXXZ PROC			; osgDB::`dynamic initializer for 'END_BRACKET'', COMDAT
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osgdb\datatypes
; Line 132
	push	1
	push	OFFSET ??_C@_01CELHOKLL@?$HN?$AA@
	mov	ecx, OFFSET _END_BRACKET
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	push	OFFSET ??__FEND_BRACKET@osgDB@@YAXXZ	; osgDB::`dynamic atexit destructor for 'END_BRACKET''
	mov	DWORD PTR _END_BRACKET+28, -2		; fffffffeH
	call	_atexit
	pop	ecx
	ret	0
??__EEND_BRACKET@osgDB@@YAXXZ ENDP			; osgDB::`dynamic initializer for 'END_BRACKET''
; Function compile flags: /Ogtp
text$yc	ENDS
;	COMDAT ??__EBMAT_NAME_HIGHLIGHT@@YAXXZ
text$yc	SEGMENT
??__EBMAT_NAME_HIGHLIGHT@@YAXXZ PROC			; `dynamic initializer for 'BMAT_NAME_HIGHLIGHT'', COMDAT
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 20
	push	OFFSET ??_C@_09EDNNHPMP@Highlight?$AA@
	mov	ecx, OFFSET ?BMAT_NAME_HIGHLIGHT@@3VvtString@@B ; BMAT_NAME_HIGHLIGHT
	call	??0vtString@@QAE@PBD@Z			; vtString::vtString
	push	OFFSET ??__FBMAT_NAME_HIGHLIGHT@@YAXXZ	; `dynamic atexit destructor for 'BMAT_NAME_HIGHLIGHT''
	call	_atexit
	pop	ecx
	ret	0
??__EBMAT_NAME_HIGHLIGHT@@YAXXZ ENDP			; `dynamic initializer for 'BMAT_NAME_HIGHLIGHT''
text$yc	ENDS
PUBLIC	?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A ; vtStructure3d::s_MaterialDescriptors
;	COMDAT xdata$x
; File c:\openscenegraph-3.0.1-vs10.0-x86\include\osg\referenced
xdata$x	SEGMENT
__unwindtable$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ$1
__ehfuncinfo$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
_DATA	SEGMENT
	ORG $+8
?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A DD FLAT:??_7vtMaterialDescriptorArray3d@@6B@ ; vtStructure3d::s_MaterialDescriptors
	DB	12 DUP(00H)
	DD	00H
	DB	00H
; Function compile flags: /Ogtp
_DATA	ENDS
;	COMDAT ??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
text$yc	SEGMENT
__$EHRec$ = -12						; size = 12
??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ PROC ; `dynamic initializer for 'vtStructure3d::s_MaterialDescriptors'', COMDAT
; File c:\openframeworks\addons\ofxvterrain\libs\src\vtlib\core\structure3d.cpp
; Line 23
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	OFFSET ??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ ; `dynamic atexit destructor for 'vtStructure3d::s_MaterialDescriptors''
	call	_atexit
	add	esp, 4
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yc	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ$0:
	mov	ecx, OFFSET ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A
	jmp	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
__unwindfunclet$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ$1:
	mov	ecx, OFFSET ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A+16
	jmp	??1?$ref_ptr@VvtMaterialArray@@@osg@@QAE@XZ ; osg::ref_ptr<vtMaterialArray>::~ref_ptr<vtMaterialArray>
__ehhandler$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ ENDP ; `dynamic initializer for 'vtStructure3d::s_MaterialDescriptors''
; Function compile flags: /Ogtp
;	COMDAT ??__FBMAT_NAME_HIGHLIGHT@@YAXXZ
text$yd	SEGMENT
??__FBMAT_NAME_HIGHLIGHT@@YAXXZ PROC			; `dynamic atexit destructor for 'BMAT_NAME_HIGHLIGHT'', COMDAT
	mov	ecx, OFFSET ?BMAT_NAME_HIGHLIGHT@@3VvtString@@B ; BMAT_NAME_HIGHLIGHT
	jmp	??1vtString@@QAE@XZ			; vtString::~vtString
??__FBMAT_NAME_HIGHLIGHT@@YAXXZ ENDP			; `dynamic atexit destructor for 'BMAT_NAME_HIGHLIGHT''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FEND_BRACKET@osgDB@@YAXXZ
text$yd	SEGMENT
??__FEND_BRACKET@osgDB@@YAXXZ PROC			; osgDB::`dynamic atexit destructor for 'END_BRACKET'', COMDAT
	cmp	DWORD PTR _END_BRACKET+20, 16		; 00000010H
	jb	SHORT $LN15@dynamic
	mov	eax, DWORD PTR _END_BRACKET
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN15@dynamic:
	xor	eax, eax
	mov	DWORD PTR _END_BRACKET+20, 15		; 0000000fH
	mov	DWORD PTR _END_BRACKET+16, eax
	mov	BYTE PTR _END_BRACKET, al
	ret	0
??__FEND_BRACKET@osgDB@@YAXXZ ENDP			; osgDB::`dynamic atexit destructor for 'END_BRACKET''
text$yd	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ$0
__ehfuncinfo$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtp
xdata$x	ENDS
;	COMDAT ??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
text$yd	SEGMENT
__$EHRec$ = -12						; size = 12
??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'vtStructure3d::s_MaterialDescriptors'', COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	ecx, DWORD PTR ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A+16
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	ecx, ecx
	je	SHORT $LN7@s_Material
	call	DWORD PTR __imp_?unref@Referenced@osg@@QBEHXZ
$LN7@s_Material:
	mov	ecx, OFFSET ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A ; vtStructure3d::s_MaterialDescriptors
	mov	DWORD PTR ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A+16, 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yd	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ$0:
	mov	ecx, OFFSET ?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A ; vtStructure3d::s_MaterialDescriptors
	jmp	??1vtMaterialDescriptorArray@@UAE@XZ	; vtMaterialDescriptorArray::~vtMaterialDescriptorArray
__ehhandler$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__F?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'vtStructure3d::s_MaterialDescriptors''
; Function compile flags: /Ogtp
;	COMDAT ??__FdefaultProp@osgDB@@YAXXZ
text$yd	SEGMENT
??__FdefaultProp@osgDB@@YAXXZ PROC			; osgDB::`dynamic atexit destructor for 'defaultProp'', COMDAT
	cmp	DWORD PTR _defaultProp+20, 16		; 00000010H
	jb	SHORT $LN15@dynamic@2
	mov	eax, DWORD PTR _defaultProp
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN15@dynamic@2:
	xor	eax, eax
	mov	DWORD PTR _defaultProp+20, 15		; 0000000fH
	mov	DWORD PTR _defaultProp+16, eax
	mov	BYTE PTR _defaultProp, al
	ret	0
??__FdefaultProp@osgDB@@YAXXZ ENDP			; osgDB::`dynamic atexit destructor for 'defaultProp''
; Function compile flags: /Ogtp
text$yd	ENDS
;	COMDAT ??__FBEGIN_BRACKET@osgDB@@YAXXZ
text$yd	SEGMENT
??__FBEGIN_BRACKET@osgDB@@YAXXZ PROC			; osgDB::`dynamic atexit destructor for 'BEGIN_BRACKET'', COMDAT
	cmp	DWORD PTR _BEGIN_BRACKET+20, 16		; 00000010H
	jb	SHORT $LN15@dynamic@3
	mov	eax, DWORD PTR _BEGIN_BRACKET
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN15@dynamic@3:
	xor	eax, eax
	mov	DWORD PTR _BEGIN_BRACKET+20, 15		; 0000000fH
	mov	DWORD PTR _BEGIN_BRACKET+16, eax
	mov	BYTE PTR _BEGIN_BRACKET, al
	ret	0
??__FBEGIN_BRACKET@osgDB@@YAXXZ ENDP			; osgDB::`dynamic atexit destructor for 'BEGIN_BRACKET''
text$yd	ENDS
PUBLIC	?BMAT_NAME_HIGHLIGHT@@3VvtString@@B		; BMAT_NAME_HIGHLIGHT
_BSS	SEGMENT
	ALIGN	4

?BMAT_NAME_HIGHLIGHT@@3VvtString@@B DD 01H DUP (?)	; BMAT_NAME_HIGHLIGHT
_BSS	ENDS
CRT$XCU	SEGMENT
_defaultProp$initializer$ DD FLAT:??__EdefaultProp@osgDB@@YAXXZ
_BEGIN_BRACKET$initializer$ DD FLAT:??__EBEGIN_BRACKET@osgDB@@YAXXZ
_END_BRACKET$initializer$ DD FLAT:??__EEND_BRACKET@osgDB@@YAXXZ
_BMAT_NAME_HIGHLIGHT$initializer$ DD FLAT:??__EBMAT_NAME_HIGHLIGHT@@YAXXZ
?s_MaterialDescriptors$initializer$@vtStructure3d@@1P6AXXZA DD FLAT:??__E?s_MaterialDescriptors@vtStructure3d@@1VvtMaterialDescriptorArray3d@@A@@YAXXZ ; vtStructure3d::s_MaterialDescriptors$initializer$
CRT$XCU	ENDS
END
